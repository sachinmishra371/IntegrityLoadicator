using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;    
using ZebecLoadMaster.Models;
using ZedGraph;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Threading;
using System.Drawing;
using System.Drawing.Imaging;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Runtime.InteropServices;
using System.Windows.Interop;
using System.Windows.Forms.Integration;
using System.IO;

using System.Windows.Forms;
using ZebecLoadMaster.Models.DAL;
using System.Runtime.Serialization.Formatters.Binary;
using System.Globalization;
using System.Reflection;


#region CADLIB
using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;
using WW.Cad.Drawing.Wpf;
using WW.Cad.Model.Objects;
using WW.Math.Geometry;
using System.Drawing.Drawing2D;
using System.Windows.Controls.Primitives;
using System.Speech.Synthesis;
using System.Data.SqlClient;
using System.ServiceProcess;
using iTextSharp.text.pdf.draw;
using System.Text.RegularExpressions;
using HelixToolkit.Wpf;
using System.Windows.Media.Media3D;
using ZebecLoadMaster.ViewModels;
using Org.BouncyCastle.Asn1.X509;
using System.Diagnostics.Eventing.Reader;

#endregion
namespace ZebecLoadMaster
{                                                                         //SanmarSitar TO Saushyant_Stability
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        //public int FirstTimeOpen;
        public int flagnumber20inhold;
        public int flagnumber20ondeck;
        public int flagnumber40inhold;
        public int flagnumber40ondeck;
        public int checkcalculateorloading = 0;
        BackgroundWorker bgWorker;
        int totalRow, totalRowLongitudinal;
        public System.Windows.Controls.CheckBox chk1;
        double[] x, x1, y1, y2, y3, y4, y5, y6;// xBMmax, yBMmax, xBMmin, yBMmin, xSFmax, ySFmax, xSFmin, ySFmin;
        GraphPane myGraph;
        int index;
        string header;
        int TankID;
        string reportPath;
        Double DraftsMid = 0;
        Double DraftsFP = 0;
        int flagDraft = 0;
        bool isStackWise = false;
        bool isTierWise = false;
        protected internal static string saveDate;
        private bool isCalculationRunning = false;
        private bool isHatchSelectionProfile = false;
        public static Dictionary<int, decimal> maxVolume;
        DataTable dtIntactCondition;
        public static bool IsTrial;
        public static int CheckNCheckOutCount, jjk = 0;
        public int _DamageStabilityCnt = 0;
        public string _damageTimeinterval_1;
        public string _damageTimeinterval_14;
        public string[,] _statusOKnNotOK = new string[41, 2];
        public static string[,] _DamageCases = new string[42, 4];
        string CmprItem = string.Empty;
        string CmprItem1 = string.Empty;
        public int DamageAll = 0;
        private delegate void UpdateProgressBarDelegate(
        System.Windows.DependencyProperty dp, Object value);

        FRMLoading objLoading = new FRMLoading();
        FRMLoading conLoading = new FRMLoading();
        public static string _servername;
        string connectionstring1 = "";
        private System.Data.SqlClient.SqlConnection conn;
        private System.Data.SqlClient.SqlDataReader reader;
        string sql = "";
        System.Data.SqlClient.SqlCommand command;
        public static int Flags = 0;
        public string DataBnding = "Sample";
        public string LoadingCondition;
        
        private string folderPath = "3DModel\\";
        private decimal PercentageFill;
        private string TankNameForPercentage;
        private HelixToolkit.Wpf.Plane3D ContourPlane;
        System.Windows.Threading.DispatcherTimer dispatcherTimer = new System.Windows.Threading.DispatcherTimer();
        System.Windows.Threading.DispatcherTimer dispatcherTimer1 = new System.Windows.Threading.DispatcherTimer();
        int MaxTankId;
        private int Mode = 0;
        private BackgroundWorker worker = null;
       // LBLBTNOKCLICK.Content = "FALSE";
        System.Windows.Controls.DataGrid stackGrid;
        bool isStackWise20OnDeck = false;
        bool isTierWise20OnDeck = false;
        bool isStackWise40OnDeck = false;
        bool isTierWise40OnDeck = false;
        bool isStackWise40InHold = false;
        bool isTierWise40InHold = false;
        public MainWindow()
        {
            clsSqlData.ReadValuefromXml();
            Models.TableModel.SimulationModeData();

            InitializeComponent();
            // LBLBTNOKCLICK.Content = "FALSE";
            //BackGroundWorker for Updating labels and Datagrid on DispatcherTimer Tick

            //..................................
            //commente by sachin 25.10.22
            //if (_servername == null)
            //{ objLoading.Show(); }
            //commented by sachin 25.10.22
           
            MainLoad();
            foreach (var wnd in System.Windows.Application.Current.Windows)
            {
                if (wnd is FRMLoading)
                {
                    objLoading.Close();
                }
            }
            this.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(canvasTwoD_MouseRightButtonDown);
        }

        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            //RefreshScreenReal();
        }

        public void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {



        }
        //public string MainWindoww;
        //public static string s= "MainWindoww";
        public string VARMAINWINDOWNAME = "ZebecLoadMaster.MainWindow";


        public void MainLoad()
        {
            try
            {
                //string firstTen = s.Substring(0, 10);
                SMMode.Visibility = Visibility.Hidden;
                //dgRealTanks.Visibility = Visibility.Hidden; comented by sachin for container
                if (IsTrial == true)
                {
                    System.Windows.Application.Current.Shutdown();
                }
                else
                {
                    SortedList FSMList = new SortedList();
                    FSMList.Add("Actual", "0");
                    FSMList.Add("MAX", "1");
                    FSMList.Add("User Specific", "2");
                    FSMType.ItemsSource = FSMList;
                    cmbDamageCases.IsEnabled = false;
                    cmbDamageCases.Text = "Select Damage Case";

                    // SFBMCondition.IsEnabled = true;
                    window.Height = window.Height - 30;
                    //clsSqlData.ReadValuefromXml();
                    //if (_servername == null || _servername == "")
                    //{
                    //    FRMConfiguration();
                    //}

                    if (_servername != "")
                    {
                        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                        string Err = "";
                        string cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.CoordinateData();

                       

                      
                        string query1 = "update tbl_CheckDensity set CheckDen= 0";
                        command.CommandText = query1;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                         
                        foreach (Window window in System.Windows.Application.Current.Windows)
                        {
                            string CARY = Convert.ToString(window);
                            if (window.Title==LoadingCondition)
                            {
                                RefreshScreenWithoutCad();
                            }

                            if (VARMAINWINDOWNAME == Convert.ToString(window))
                            {
                                RefreshScreen();
                            } 

                        }

                        //RefreshScreenWithoutCad();


                        MaxVolume();

                        btnGenerateReport.IsEnabled = false;
                        btnSaveLoadingCondition.IsEnabled = false;
                        tabLongitudinal.IsEnabled = true;
                        btnshow.Visibility = Visibility.Hidden;
                        btnshow1.Visibility = Visibility.Hidden;
                        shwbay1.Visibility = Visibility.Hidden;
                        shwbay.Visibility = Visibility.Hidden;
                        //tabItem7.IsEnabled = true;
                        //lblLoading.IsEnabled = false;
                        
                    }
                }
                //FirstTimeOpen++;

            }
            catch
            {
                Flags = 1;
                System.Windows.MessageBox.Show("Not able to Connect with Database. Please Check Configuration Settings or Contact Administrator");
            }
        }
        #region Binding
        public class students
        {
            private int ID;

            public int Myid
            {
                get { return ID; }
                set { ID = value; }
            }
            private int phone;

            public int MyPhone
            {
                get { return phone; }
                set { phone = value; }
            }
            private string Name;

            public string MyName
            {
                get { return Name; }
                set { Name = value; }
            }



        }

        public class AnotherClass : INotifyPropertyChanged
        {
            private string anotherfield;
            private Employee emp;
            public string AnotherField
            {
                get { return anotherfield; }
                set
                {
                    anotherfield = value;
                    OnPropertyChanged("AnotherField");
                }
            }
            public Employee EmployeeNameTest
            {
                get { return emp; }
                set
                {
                    emp = value;
                    OnPropertyChanged("EmployeeNameTest");
                }
            }
            public event PropertyChangedEventHandler PropertyChanged;
            //// Create the OnPropertyChanged method to raise the event
            protected void OnPropertyChanged(string name)
            {
                PropertyChangedEventHandler handler = PropertyChanged;
                if (handler != null)
                {
                    handler(this, new PropertyChangedEventArgs(name));
                }
            }
            public override string ToString()
            {
                return string.Format("My ToString implementation of AnotherClass");
            }
        }

        public class Employee : INotifyPropertyChanged
        {
            private string name;
            private string state;
            // Declare the event
            public event PropertyChangedEventHandler PropertyChanged;
            public Employee()
            {
            }
            public Employee(string value)
            {
                this.name = value;
            }
            public string EmployeeName
            {
                get { return name; }
                set
                {
                    name = value;
                    // Call OnPropertyChanged whenever the property is updated
                    OnPropertyChanged("EmployeeName");
                }
            }
            public string State
            {
                get { return state; }
                set
                {
                    state = value;
                    OnPropertyChanged("State");
                }
            }
            //// Create the OnPropertyChanged method to raise the event
            protected void OnPropertyChanged(string name)
            {
                PropertyChangedEventHandler handler = PropertyChanged;
                if (handler != null)
                {
                    handler(this, new PropertyChangedEventArgs(name));
                }
            }
        }

        #endregion
        public void FRMConfiguration()
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                ConfigurationWindow objInastnce = new ConfigurationWindow();
                objInastnce.instances();
                connectionstring1 = "Data Source=" + _servername + ";Initial Catalog=master;Integrated Security=SSPI";
                conn = new SqlConnection(connectionstring1);
                conn.Open();
                DataSet Dt = new DataSet();
                sql = "SELECT * FROM master.dbo.sysdatabases WHERE name ='SanmarSitar_Stability'";
                command = new System.Data.SqlClient.SqlCommand(sql, conn);
                command.CommandTimeout = 1200;
                reader = command.ExecuteReader();

                //ArrayList ArrayLT = new ArrayList();
                //while (reader.Read())
                //{
                //    ArrayLT.Add(reader[0].ToString());
                //}

                //if (ArrayLT.Count < 1)
                //{
                //    conn = new SqlConnection(connectionstring1);
                //    conn.Open();
                //    sql = "";
                //    sql = "USE Master;";
                //    sql += "Create database SanmarSitar_Stability";
                //    command = new SqlCommand(sql, conn);
                //    command.CommandTimeout = 2000;
                //    command.ExecuteNonQuery();
                //    conn.Close();
                //    conn.Dispose();
                //}


                {
                    //string path = System.Windows.Forms.Application.StartupPath;
                    //string dbBakup = path + "\\Stability_Bakup.Bak";
                    //conn = new SqlConnection(connectionstring1);
                    //conn.Open();
                    //sql = "USE Master;";
                    //sql += "Alter Database SanmarSitar_Stability Set OFFLINE WITH ROLLBACK IMMEDIATE;";
                    //sql += "Restore Database SanmarSitar_Stability FROM Disk = '" + dbBakup + "' WITH REPLACE;";
                    //command = new SqlCommand(sql, conn);
                    //command.CommandTimeout = 1000;
                    //command.ExecuteNonQuery();
                    //conn.Close();
                    //conn.Dispose();
                    //Mouse.OverrideCursor = null;
                    //objLoading.PrgsLoading.Value = 70;
                }
            }
            catch (Exception ex)
            {
                Flags = 1;
                //System.Windows.MessageBox.Show("Problem while Configuring Database").ToString();
            }
        }
        #region ControlEvents
        private void Configuration_Click(object sender, RoutedEventArgs e)
        {
            ConfigurationWindow objConfigurationWindow = new ConfigurationWindow();
            objConfigurationWindow.Show();
        }

        private void About_Click(object sender, RoutedEventArgs e)
        {
            AboutWindow objAboutWindow = new AboutWindow();
            objAboutWindow.Show();
        }
        public void FUNCTIONOTHERWINDOWTESTING()
        {

        }
        ////start sachin 28.2.23
        //public void refresh()
        //{
        //    try
        //    {
        //        string path = System.IO.Directory.GetCurrentDirectory() + folder + "\\" + listBoxSavedCondition.SelectedItem.ToString();


        //        FileStream fs = new FileStream(path + "\\Tanks.cnd", FileMode.Open, FileAccess.Read, FileShare.None);
        //        BinaryFormatter ob = new BinaryFormatter();
        //        string Err = "";
        //        string cmd = "";

        //        List<Tanks> listTank = new List<Tanks>();
        //        listTank = (List<Tanks>)ob.Deserialize(fs);
        //        fs.Close();
        //        //dtSMBallast= liBallast.toDa
        //        DataTable dtTanks = CollectionHelper.ConvertTo<Tanks>(listTank);
        //        //dtTanks = dtSMTanks.Clone();
        //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //        try
        //        {

        //            foreach (DataRow row in dtTanks.Rows)
        //            {
        //                if (Convert.ToInt16(row["Tank_ID"].ToString()) > 0)
        //                    cmd += " UPDATE tblSimulationMode_Tank_Status  SET Volume=" + row["Volume"].ToString() + ",SG=" + row["SG"].ToString() + ",IsDamaged='" + row["IsDamaged"].ToString() + "' WHERE Tank_ID=" + row["Tank_ID"].ToString() + " Update tblFSM_max_act set max_1_act_0=" + row["max_1_act_0"].ToString() + " WHERE Tank_ID=" + row["Tank_ID"].ToString() + " Update tblSimulationMode_Loading_Condition set FSM=" + row["FSM"].ToString() + " WHERE Tank_ID=" + row["Tank_ID"].ToString();
        //            }
        //            //con.Close();
        //            command.CommandText = cmd;
        //            command.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        //        }
        //        catch { }
        //        //for (int i = 0; i < dtTanks.Rows.Count; i++)
        //        //{
        //        //    dtTanks.ImportRow(dtSMTanks.Rows[i]);

        //        //}
        //        //dtTanks.AcceptChanges();
        //        try
        //        {
        //            fs = new FileStream(path + "\\FixedLoads.cnd", FileMode.Open, FileAccess.Read, FileShare.None);
        //            //  ob = new BinaryFormatter();
        //            cmd = "";
        //            List<FixedItems> liDeck1 = new List<FixedItems>();
        //            liDeck1 = (List<FixedItems>)ob.Deserialize(fs);
        //            fs.Close();
        //            DataTable dtFixedLoads = CollectionHelper.ConvertTo<FixedItems>(liDeck1);
        //            DbCommand command4 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            command4 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            cmd += " delete from [tblFixedLoad_Simulation] where Tank_ID>46";
        //            //cmd += " delete FROM [Saushyant_Stability].[dbo].[tblMaster_Tank] where [Group]='FIXED_WEIGHT'";
        //            //cmd += "  delete FROM [Saushyant_Stability].[dbo].[tblSimulationMode_Loading_Condition] where Tank_ID in (select Tank_ID FROM [Saushyant_Stability].[dbo].[tblMaster_Tank] where [Group]='FIXED_WEIGHT')";
        //            //cmd += "delete FROM [Saushyant_Stability].[dbo].tblSimulationMode_Tank_Status where Tank_ID in (select Tank_ID FROM [Saushyant_Stability].[dbo].[tblMaster_Tank] where [Group]='FIXED_WEIGHT')";
        //            cmd += " delete FROM [Saushyant_Stability].[dbo].[tblMaster_Tank] where Tank_ID>46";
        //            cmd += " delete FROM [Saushyant_Stability].[dbo].[tblSimulationMode_Loading_Condition] where Tank_ID>46";
        //            cmd += "delete FROM [Saushyant_Stability].[dbo].tblSimulationMode_Tank_Status where Tank_ID>46";
        //            command4.CommandText = cmd;
        //            command4.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command4, Err);
        //            foreach (DataRow row in dtFixedLoads.Rows)
        //            {

        //                string cmd1 = "INSERT INTO [tblMaster_Tank] ([Tank_ID],[Group],[Tank_Name])  VALUES (" + row["Tank_ID"].ToString() + ",'FIXED_WEIGHT','FIXED WEIGHT')";

        //                cmd1 += "INSERT INTO [tblSimulationMode_Loading_Condition] ([Tank_ID],[Percent_Full],[Volume],[SG],[Weight],[LCG],[Lmom],[TCG]," +
        //                         " [Tmom],[VCG],[Vmom],[FSM],[User],[IsManualEntry],[Sounding_Level],[Timestamp],[Permeability],[IsDamaged])" +
        //                         "VALUES (" + row["Tank_ID"].ToString() + ",0,0,1,0,0,0,0,0,0,0,0,'dbo',1,0,GETDATE(),1,0)";

        //                cmd1 += "INSERT INTO [tblSimulationMode_Tank_Status] ([Tank_ID],[Volume],[SG],[IsDamaged],[Timestamp],[Sounding_Level],[User],[Weight])" +
        //                                      "VALUES (" + row["Tank_ID"].ToString() + ",0,1,0,GETDATE(),0,'dbo',0)";
        //                //cmd += "INSERT INTO [tblFixedLoad_Simulation] ([Tank_ID],[Volume],[SG],[IsDamaged],[Timestamp],[Sounding_Level],[User],[Weight])" +
        //                //                      "VALUES (" + row["Tank_ID"].ToString() + ",0,1,0,GETDATE(),0,'dbo',0)";
        //                cmd1 += @"INSERT INTO tblFixedLoad_Simulation ([tank_Id],[Load_Name],[Weight],[LCG],[TCG],[VCG],[Length],[Breadth],[Depth])
        //                                                      VALUES (" + row["Tank_ID"].ToString() + ",'FIXED WEIGHT',0,0,0,0,0,0,0)";
        //                cmd1 += " UPDATE tblSimulationMode_Loading_Condition SET [Weight]=" + row["Weight"].ToString() + ", LCG =" + row["LCG"].ToString() + ",VCG=" + row["VCG"].ToString() + ",TCG=" + row["TCG"].ToString() + " WHERE Tank_ID=" + row["Tank_ID"].ToString();
        //                cmd1 += " UPDATE tblSimulationMode_Tank_Status SET Weight=" + row["Weight"].ToString() + "  WHERE Tank_ID=" + row["Tank_ID"].ToString();
        //                cmd1 += " UPDATE tblMaster_Tank SET Tank_Name='" + row["Tank_Name"].ToString() + "'  WHERE Tank_ID=" + row["Tank_ID"].ToString();

        //                //FIXED WEIGHT TEST UPDATE 



        //                cmd1 += " update tblFixedLoad_Simulation set [Weight]=" + row["Weight"].ToString() + " where Tank_ID=" + row["Tank_ID"].ToString();
        //                cmd1 += " update tblFixedLoad_Simulation set VCG=" + row["VCG"].ToString() + " where Tank_ID=" + row["Tank_ID"].ToString();
        //                cmd1 += " update tblFixedLoad_Simulation set LCG=" + row["LCG"].ToString() + " where Tank_ID=" + row["Tank_ID"].ToString();
        //                cmd1 += " update tblFixedLoad_Simulation set TCG=" + row["TCG"].ToString() + " where Tank_ID=" + row["Tank_ID"].ToString();
        //                //END

        //                command4.CommandText = cmd1;
        //                command4.CommandType = CommandType.Text;
        //                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command4, Err);


        //            }
        //            //command4.CommandText = cmd1;
        //            //command4.CommandType = CommandType.Text;
        //            //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command4, Err);

        //            //Models.clsGlobVar.dtSimulationVariableItems = dtFixedLoads;
        //            //TEST 22FEB4.34PM

        //            MainWindow M = new MainWindow();
        //            Models.clsGlobVar.dtSimulationfixedload = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModefixedload");//simultaionfixed 
        //            M.dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
        //            //END 
        //            //M.dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView;
        //        }
        //        catch (Exception ex)
        //        {
        //            //   System.Windows.MessageBox.Show(EX.ToString());
        //        }
        //        try
        //        {
        //            //for container 20
        //            fs = new FileStream(path + "\\bays.cnd", FileMode.Open, FileAccess.Read, FileShare.None);

        //            List<Bays> bays1 = new List<Bays>();
        //            bays1 = (List<Bays>)ob.Deserialize(fs);
        //            fs.Close();
        //            //dtSMBallast= liBallast.toDa
        //            DataTable dtbays = CollectionHelper.ConvertTo<Bays>(bays1);
        //            //dtTanks = dtSMTanks.Clone();
        //            DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string cmd1 = "";
        //            //row["cmbselected"].ToString()=dtbays.Rows;
        //            foreach (DataRow row in dtbays.Rows)
        //            {

        //                cmd1 += " UPDATE [20Ft_Container_Loading]  SET bay='" + row["Bay"].ToString() + "',[cmbselected]=" + row["cmbselected"].ToString() + ",Container_No=" + row["Container_No"].ToString() + ",weight=" + row["weight"].ToString() + ",lcg=" + row["lcg"].ToString() + ",tcg=" + row["tcg"].ToString() + ",vcg=" + row["vcg"].ToString() + ",[Container_Count]='" + row["Container_Count"].ToString() + "' WHERE [Container_No]=" + row["Container_No"].ToString();

        //            }
        //            //con.Close();
        //            command1.CommandText = cmd1;
        //            command1.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command1, Err);
        //            //end
        //            //System.Windows.MessageBox.Show(""+Convert.ToInt32(dtbays.Rows[0][12]));
        //            if (1 == Convert.ToInt32(dtbays.Rows[0][12]))
        //            {
        //                Collection objCollection = new Collection();
        //                objCollection.CollectionRefresh();
        //                MainWindow m = new MainWindow();
        //                m.dgContainers20FootInHold.ItemsSource = null;
        //                m.dgContainers20FootOnDeck.ItemsSource = null;
        //                m.dgContainers20FootInHold.ItemsSource = objCollection.Load20InHoldBaySource;
        //                m.dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
        //            }
        //        }
        //        catch { }
        //        try
        //        {
        //            //for container 40
        //            fs = new FileStream(path + "\\bays40.cnd", FileMode.Open, FileAccess.Read, FileShare.None);

        //            List<Bays> bays2 = new List<Bays>();
        //            bays2 = (List<Bays>)ob.Deserialize(fs);
        //            fs.Close();
        //            //dtSMBallast= liBallast.toDa
        //            DataTable dtbays2 = CollectionHelper.ConvertTo<Bays>(bays2);
        //            DbCommand command2 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            //dtTanks = dtSMTanks.Clone();
        //            command2 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string cmd2 = "";
        //            foreach (DataRow row in dtbays2.Rows)
        //            {

        //                cmd2 += " UPDATE [40Ft_Container_Loading]  SET bay='" + row["Bay"].ToString() + "',[cmbselected]=" + row["cmbselected"].ToString() + ",Container_No = " + row["Container_No"].ToString() + ",weight=" + row["weight"].ToString() + ",lcg=" + row["lcg"].ToString() + ",tcg=" + row["tcg"].ToString() + ",vcg=" + row["vcg"].ToString() + ",[Container_Count]='" + row["Container_Count"].ToString() + "' WHERE [Container_No]=" + row["Container_No"].ToString();
        //            }
        //            //con.Close();
        //            command2.CommandText = cmd2;
        //            command2.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command2, Err);
        //            //System.Windows.MessageBox.Show("" + Convert.ToInt32(dtbays2.Rows[0][12]));
        //            if (1 == Convert.ToInt32(dtbays2.Rows[0][13]))
        //            {
        //                Collection objCollection = new Collection();
        //                //objCollection.CollectionRefresh();
        //                MainWindow m = new MainWindow();
        //                m.dgContainers40FootInHold.ItemsSource = objCollection.Load40InHoldBaySource;

        //            }
        //            //end
        //        }
        //        catch (Exception)
        //        {
        //            //System.Windows.MessageBox.Show(ex.ToString()); 
        //        }

        //        try
        //        {
        //            //for bay 20
        //            fs = new FileStream(path + "\\showbays20.cnd", FileMode.Open, FileAccess.Read, FileShare.None);

        //            List<Bays> bays3 = new List<Bays>();
        //            bays3 = (List<Bays>)ob.Deserialize(fs);
        //            fs.Close();
        //            //dtSMBallast= liBallast.toDa
        //            DataTable dtbays3 = CollectionHelper.ConvertTo<Bays>(bays3);
        //            //dtTanks = dtSMTanks.Clone();
        //            DbCommand command3 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            command3 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string cmd2 = "";
        //            foreach (DataRow row in dtbays3.Rows)
        //            {

        //                cmd2 += " UPDATE [20Ft_Showbaywise]  SET bay='" + row["Bay"].ToString() + "',[cmbselected]=" + row["cmbselected"].ToString() + ",Container_No = " + row["Container_No"].ToString() + ",weight=" + row["weight"].ToString() + ",lcg=" + row["lcg"].ToString() + ",tcg=" + row["tcg"].ToString() + ",vcg=" + row["vcg"].ToString() + ",[Container_Count]='" + row["count"].ToString() + "' WHERE [Container_No]=" + row["Container_No"].ToString();
        //            }

        //            command3.CommandText = cmd2;
        //            command3.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command3, Err);
        //            //con.Close();
        //            //end
        //        }
        //        catch (Exception)
        //        {
        //            //System.Windows.MessageBox.Show(ex.ToString());
        //        }
        //        try
        //        {
        //            //for bay 40
        //            fs = new FileStream(path + "\\showbays40.cnd", FileMode.Open, FileAccess.Read, FileShare.None);

        //            List<Bays> bays3 = new List<Bays>();
        //            bays3 = (List<Bays>)ob.Deserialize(fs);
        //            fs.Close();
        //            //dtSMBallast= liBallast.toDa
        //            DataTable dtbays3 = CollectionHelper.ConvertTo<Bays>(bays3);
        //            //dtTanks = dtSMTanks.Clone();
        //            DbCommand command3 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            command3 = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string cmd2 = "";
        //            foreach (DataRow row in dtbays3.Rows)
        //            {

        //                cmd2 += " UPDATE [40Ft_Showbaywise]  SET bay='" + row["Bay"].ToString() + "',[cmbselected]=" + row["cmbselected"].ToString() + ",Container_No = " + row["Container_No"].ToString() + ",weight=" + row["weight"].ToString() + ",lcg=" + row["lcg"].ToString() + ",tcg=" + row["tcg"].ToString() + ",vcg=" + row["vcg"].ToString() + ",[Container_Count]='" + row["count"].ToString() + "' WHERE [Container_No]=" + row["Container_No"].ToString();
        //            }
        //            //con.Close();
        //            command3.CommandText = cmd2;
        //            command3.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command3, Err);
        //            //end
        //        }
        //        catch { }
        //        Models.clsGlobVar.dtSimulationAllTanks = dtTanks;


        //    }
        //    catch (Exception ex)
        //    {
        //        System.Windows.MessageBox.Show(ex.Message);
        //    }

        //}
        ////end 28.2.23

        private void btnToggle_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                //SpeechSynthesizer speechSynthesizer = new SpeechSynthesizer();
                //speechSynthesizer.Speak("Switch to Damage!");

                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                tabLongitudinal.IsEnabled = true;
                tabItem7.IsEnabled = false;
                btnToggle.Content = "Switch to Intact".ToString();
                cmbDamageCases.Text = "Select Damage Case";
                cmbDamageCases.IsEnabled = true;
                lblCalculationMethod.Content = "Damage";
                lblCalculationMethod.Background = System.Windows.Media.Brushes.Red;
                btnGenerateReport.IsEnabled = false;
                btnSaveLoadingCondition.IsEnabled = false;
                clsGlobVar.DamageCase = "";
                clsGlobVar.FlagDamageCases = true;
                dtIntactCondition = new DataTable();
                dtIntactCondition = clsGlobVar.dtSimulationAllTanks;
                cmbDamageCases.SelectedItem = false;
                RefreshScreen();
                txtLoadingConditionName.Text = "--";
                Mouse.OverrideCursor = null;


            }
            catch
            {
                Mouse.OverrideCursor = null;
            }

        }

        private void btnToggle_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {

             

                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                tabLongitudinal.IsEnabled = true;

                btnGenerateReport.IsEnabled = false;
                btnSaveLoadingCondition.IsEnabled = false;
                btnToggle.Content = "Switch to Damage".ToString();
                cmbDamageCases.IsEnabled = false;
                lblCalculationMethod.Content = "Intact";
                lblCalculationMethod.Background = System.Windows.Media.Brushes.LimeGreen;
                clsGlobVar.FlagDamageCases = false;
                clsGlobVar.DamageCase = "---";
                txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                cmbDamageCases.Text = "Select Damage Case";
                //tabItem7.IsEnabled = true;//Sangita
                //tabfloodingpoint.IsEnabled = false;
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                string cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53";
                for (int i = 0; i <= 60; i++)
                {
                    if (Convert.ToInt16(dtIntactCondition.Rows[i]["Tank_ID"].ToString()) > 0)
                    cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                }
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                TableModel.SimulationModeData();
                dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                RefreshScreen();
                Mouse.OverrideCursor = null;
                CheckNCheckOutCount = 0;
                chk1.IsChecked = false;

            }
            catch { Mouse.OverrideCursor = null; }
        }



        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {

        }
        DataGridRow dgRow;
        private void dgTanks_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            try
            {
                header = e.Column.Header.ToString();
                if (e.Column.GetType().ToString() == "System.Windows.Controls.DataGridTextColumn")
                {
                    index = e.Row.GetIndex();
                    dgRow = e.Row;
                    TextBlock cbo = (System.Windows.Controls.TextBlock)e.Column.GetCellContent(e.Row);
                    if (index > 48 && clsGlobVar.FlagDamageCases == false)
                    {
                        dgRow.IsEnabled = false;
                    }

                }
                if (e.Column.GetType().ToString() == "System.Windows.Controls.DataGridComboBoxColumn")
                {
                    index = e.Row.GetIndex();
                    System.Windows.Controls.ComboBox cbo;
                    cbo = (System.Windows.Controls.ComboBox)e.Column.GetCellContent(e.Row);
                    cbo.SelectionChanged += new SelectionChangedEventHandler(FSMType_SelectionChanged);
                }
            }
            catch
            {

            }
        }
        private void FSMType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                int TankId;
                TankId = Convert.ToInt16((dgTanks.Items[index] as DataRowView)["Tank_ID"]);
                var comboBox = sender as System.Windows.Controls.ComboBox;
                var selectedItem = comboBox.SelectedValue;
                string FSMType = Convert.ToString(selectedItem);
                string query = "update tblFSM_max_act set [max_1_act_0]=" + FSMType.ToString() + " where Tank_ID=" + TankId;
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                //dgTanks.Columns[0].Visibility = Visibility.Visible;

                //dgTanks.Items[index] as DataRowView).Rows.
            }
            catch
            {
            }

        }
        private void dgTanks_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {

                if (dgTanks.SelectedIndex == -1)
                {
                    Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                  

                   
                    Mouse.OverrideCursor = null;
                }

                if (dgTanks.SelectedIndex != -1)
                {
                    Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                    DrawHatchDeckPlanSelection();
                    //DrawHatchProfileSelection();
                    Mouse.OverrideCursor = null;


                    ///////////////////////////////////


                    int TankId;
                    string volume, percentfill;
                    string TankName, Status;

                    if (dgTanks.SelectedIndex == -1)
                    {
                        return;
                    }
                    TankId = Convert.ToInt16((dgTanks.Items[dgTanks.SelectedIndex] as DataRowView)["Tank_ID"]);
                    volume = Convert.ToString((dgTanks.Items[dgTanks.SelectedIndex] as DataRowView)["Volume"]);
                    percentfill = Convert.ToString((dgTanks.Items[dgTanks.SelectedIndex] as DataRowView)["Percent_Full"]);
                    TankName = Convert.ToString((dgTanks.Items[dgTanks.SelectedIndex] as DataRowView)["Tank_Name"]);
                    //comment by sachin
                    //Status = Convert.ToString((dgTanks.Items[dgTanks.SelectedIndex] as DataRowView)["IsDamaged"]);
                    //if (Status == "True")
                    //{
                    //    this.status = "Damaged";
                    //    this.volume = Convert.ToString("NA");
                    //    this.percent = Convert.ToString("NA");


                    //}
                    //else
                    //{
                    //    this.status = "Intact";
                    //    this.volume = volume;
                    //    this.percent = percentfill;

                    //}
                    // this.Tankname = TankName;
                    //this.volume = volume;
                    //this.percent = percentfill;
                    //end 
                    //Math.Round(Convert.ToDecimal(dspercent.Tables[0].Rows[0]["Percent_Full"].ToString()), 3); ///read
                  

                    // viewPort3d.Children[dgTanks.SelectedIndex + 2].SetName("Tank" + dgTanks.SelectedIndex.ToString());
                    //// textBoxModelName.Text = viewPort3d.Children[dgTanks.SelectedIndex + 2].GetName();
                    // Visual3D model1 = viewPort3d.Children[dgTanks.SelectedIndex + 2] as Visual3D;

                    string str1 = TankName.Replace("/", "");
                    //////////////////////////////////




                }
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
                Mouse.OverrideCursor = null;
            }

        }


        private void Getpercentage()
        {


            try
            {

                DataSet dspercent = new DataSet();
                string sCmd = "SELECT [Percent_Full] FROM [tblSimulationMode_Loading_Condition] WHERE Tank_ID= (SELECT Tank_ID FROM tblMaster_Tank WHERE Tank_Name='" + TankNameForPercentage + "')";
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                command.CommandText = sCmd;
                command.CommandType = CommandType.Text;
                string Err = "";
                DataSet ds = new DataSet();
                dspercent = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                PercentageFill = Math.Round(Convert.ToDecimal(dspercent.Tables[0].Rows[0]["Percent_Full"].ToString()), 3);


            }

            catch (System.Exception)
            {


            }
        }

        private string TankName;

        private string Volume;

        private string PercentFill;

        private string TankStatus;

        public string Tankname
        {
            get
            {
                return this.TankName;
            }
            set
            {
                this.TankName = value;
                this.OnPropertyChanged("Tankname");
            }
        }

        public string volume
        {
            get
            {
                return this.Volume;
            }
            set
            {
                this.Volume = value;
                this.OnPropertyChanged("volume");
            }
        }

        public string percent
        {
            get
            {
                return this.PercentFill;
            }
            set
            {
                this.PercentFill = value;
                this.OnPropertyChanged("percent");
            }
        }

        public string status
        {
            get
            {
                return this.TankStatus;
            }
            set
            {
                this.TankStatus = value;
                this.OnPropertyChanged("status");
            }
        }

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private void AddMaterial(GeometryModel3D model, Transform3D transform)
        {
            try
            {
                Material material = MaterialHelper.CreateMaterial(new SolidColorBrush(System.Windows.Media.Color.FromArgb(255, 255, 255, 0)));

                model.Material = material;
                model.BackMaterial = material;
            }
            catch { }



            //Rect3D bound = model.Bounds;
            //bound.SizeX = 1.2;


            //var p = ContourPlane.Position;
            //var n = ContourPlane.Normal;
            //var segments = MeshGeometryHelper.GetContourSegments(model.Geometry as MeshGeometry3D, p, n).ToList();
            //foreach (var contour in MeshGeometryHelper.CombineSegments(segments, 1e-6).ToList())
            //{
            //    if (contour.Count == 0)
            //        continue;
            //    viewPort3d.Children.Add(new TubeVisual3D { Diameter = 10, Path = new Point3DCollection(contour), Fill = Brushes.Green });
            //}
        }
        private void AddFill(Visual3D model1, int o, int m, int n)
        {
            var bounds = Visual3DHelper.FindBounds(model1, Transform3D.Identity);
            //Rect3D rect = new Rect3D();
            //rect.Size.Z = 40;

            //bounds.SizeZ = 40;
            for (int i = 1; i < n; i++)
            {
                this.ContourPlane = new HelixToolkit.Wpf.Plane3D(new System.Windows.Media.Media3D.Point3D(0, 0, bounds.Location.Z + bounds.Size.Z * i / n), new System.Windows.Media.Media3D.Vector3D(0, 0, 1));
                Visual3DHelper.Traverse<GeometryModel3D>(model1, this.AddFill);
            }
            for (int i = 1; i < m; i++)
            {
                this.ContourPlane = new HelixToolkit.Wpf.Plane3D(new System.Windows.Media.Media3D.Point3D(0, bounds.Location.Y + bounds.Size.Y * i / m, 0), new System.Windows.Media.Media3D.Vector3D(0, 1, 0));
                Visual3DHelper.Traverse<GeometryModel3D>(model1, this.AddFill);
            }
            for (int i = 1; i < o; i++)
            {
                this.ContourPlane = new HelixToolkit.Wpf.Plane3D(new System.Windows.Media.Media3D.Point3D(bounds.Location.X + bounds.Size.X * i / o, 0, 0), new System.Windows.Media.Media3D.Vector3D(1, 0, 0));
                Visual3DHelper.Traverse<GeometryModel3D>(model1, this.AddFill);
            }


        }
        private void AddFill(GeometryModel3D model, Transform3D transform)
        {
            Material material = MaterialHelper.CreateMaterial(new SolidColorBrush(System.Windows.Media.Color.FromArgb(255, 40, 40, 40)));
            model.Material = material;
            model.BackMaterial = material;
            //Rect3D bound = model.Bounds;
            //bound.SizeX = 1.2;
            //var p = ContourPlane.Position;
            //var n = ContourPlane.Normal;
            //var segments = MeshGeometryHelper.GetContourSegments(model.Geometry as MeshGeometry3D, p, n).ToList();
            //foreach (var contour in MeshGeometryHelper.CombineSegments(segments, 1e-6).ToList())
            //{
            //    if (contour.Count == 0)
            //        continue;
            //    viewPort3d.Children.Add(new TubeVisual3D { Diameter = 0.03, Path = new Point3DCollection(contour), Fill = Brushes.Green });
            //}

        }
        public static TimeSpan GetOffSetTime(string date)
        {
            DateTime d = Convert.ToDateTime(date);
            TimeZone zone = TimeZone.CurrentTimeZone;
            TimeSpan local = zone.GetUtcOffset(d);
            return local;
        }

        private void btnCalculate_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                checkcalculateorloading = 1;
                //SFCorrection1();
                GraphicsTab.SelectedIndex = 0;
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                if (lblCalculationMethod.Content.ToString() == "Damage")
                {
                    bool checkBox;

                    if (chk1 == null) { checkBox = false; } else { checkBox = (bool)chk1.IsChecked; }

                    if (CmprItem.Trim() == "Case 1(S)" || CmprItem.Trim() == "Case 2(S)" ||
                       CmprItem.Trim() == "Case 3(S)" || CmprItem.Trim() == "Case 4(S)" ||
                       CmprItem.Trim() == "Case 5(S)" || CmprItem.Trim() == "Case 6(S)" ||
                       CmprItem.Trim() == "Case 7(S)" || CmprItem.Trim() == "Case 8(S)" ||
                       CmprItem.Trim() == "Case 12(S)" || CmprItem.Trim() == "Case 13(S)" ||
                       CmprItem.Trim() == "Case 14(S)" || CmprItem.Trim() == "Case 15(S)" ||
                       CmprItem.Trim() == "Case 16(S)" || CmprItem.Trim() == "Case 17(S)" ||
                       CmprItem.Trim() == "Case 18(S)" || CmprItem.Trim() == "Case 19(S)" ||
                       CmprItem.Trim() == "Case 20(S)" || CmprItem.Trim() == "Case 21(S)" ||
                       CmprItem.Trim() == "Case 22(S)" || CmprItem.Trim() == "Case 23(S)" ||
                       CmprItem.Trim() == "Case 24(S)" || CmprItem.Trim() == "Case 25(S)" ||
                       CmprItem.Trim() == "Case 26(S)" || CmprItem.Trim() == "Case 27(S)" ||
                       CmprItem.Trim() == "Case 28(S)" || CmprItem.Trim() == "Case 29(S)" ||
                        CmprItem.Trim() == "Case 1(P)" || CmprItem.Trim() == "Case 2(P)" ||
                         CmprItem.Trim() == "Case 3(P)" || CmprItem.Trim() == "Case 4(P)" ||
                         CmprItem.Trim() == "Case 5(P)" || CmprItem.Trim() == "Case 5(P)" ||
                         CmprItem.Trim() == "Case 6(P)" || CmprItem.Trim() == "Case 7(P)" ||
                         CmprItem.Trim() == "Case 8(P)" ||
                       CmprItem.Trim() == "Case 9" || CmprItem.Trim() == "Case 10" ||
                       CmprItem.Trim() == "Case 11" ||
                       CmprItem.Trim() == "Case 12(P)" || CmprItem.Trim() == "Case 13(P)" ||
                       CmprItem.Trim() == "Case 14(P)" || CmprItem.Trim() == "Case 15(P)" ||
                       CmprItem.Trim() == "Case 16(P)" || CmprItem.Trim() == "Case 17(P)" ||
                       CmprItem.Trim() == "Case 18(P)" || CmprItem.Trim() == "Case 19(P)" ||
                       CmprItem.Trim() == "Case 20(P)" || CmprItem.Trim() == "Case 21(P)" ||
                       CmprItem.Trim() == "Case 22(P)" || CmprItem.Trim() == "Case 23(P)" ||
                       CmprItem.Trim() == "Case 24(P)" || CmprItem.Trim() == "Case 25(P)" ||
                       CmprItem.Trim() == "Case 26(P)" || CmprItem.Trim() == "Case 27(P)" ||
                       CmprItem.Trim() == "Case 28(P)" || CmprItem.Trim() == "Case 29(P)" ||
                       CmprItem.Trim() == "All Damage Cases")
                    {
                        CalculateStability();
                    }
                    else if (checkBox == true || CheckNCheckOutCount > 0)
                    {
                        CalculateStability();
                        chk1.IsChecked = false;
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("At least One tank OR Compartment should damage ");
                    }

                }
                else if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    CalculateStability();

                }
                Mouse.OverrideCursor = null;
                checkcalculateorloading = 0;
            }
            catch
            {
                Mouse.OverrideCursor = null;
            }
        }
        #endregion ControlEvents

        #region UserFunctions
        private void CalculateStability()
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                isCalculationRunning = true;
                btnCalculate.IsEnabled = false;
                bgWorker = new BackgroundWorker();
                bgWorker.DoWork += new DoWorkEventHandler(bgWorker_Do_Work);
                bgWorker.ProgressChanged += new ProgressChangedEventHandler
                        (bgWorker_ProgressChanged);
                bgWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler
                        (bgWorker_RunWorkerCompleted);
                bgWorker.WorkerReportsProgress = true;

                bgWorker.RunWorkerAsync();
                while (isCalculationRunning)
                {
                    for (int i = 0; i < 100; i++)
                    {
                        Thread.Sleep(4);
                        if (isCalculationRunning == true)
                        {
                            Process();
                        }
                        else
                        { i = 100; }
                    }
                }
                // Process();
                if (!isCalculationRunning)
                {
                    RefreshScreen();
                    if (ZebecLoadMaster.Models.DAL.clsSqlData.calculationResult == 0)
                    {
                        System.Windows.MessageBox.Show("Trim and heel value exceeded");
                        btnGenerateReport.IsEnabled = false;
                        lblStatus.Content = "NOT OK";
                        lblStatus.Background = System.Windows.Media.Brushes.Red;
                    }
                    else
                    {

                        /////////////////////////////////////////////////////////////////////////
                        if (_DamageStabilityCnt > 0)
                        {
                            (new System.Threading.Thread(CloseIt)).Start();
                            System.Windows.MessageBox.Show(" Damage Case " + clsGlobVar.DamageCase + " Stability calculation succeeded");
                        }
                        else
                        {
                            System.Windows.MessageBox.Show("Stability calculation succeeded");
                            if ((DraftsFP < 3.5) && (flagDraft > 1))
                            {
                                lblDraftFP.Content = DraftsFP;
                                lblDraftFP.Foreground = System.Windows.Media.Brushes.Red;
                                System.Windows.MessageBox.Show("Draft Shall not be less than 3.5");
                            }
                            else
                            {
                                lblDraftFP.Content = DraftsFP;
                                lblDraftFP.Foreground = System.Windows.Media.Brushes.Black;
                            }



                            if ((DraftsMid > 8.08) && (flagDraft > 1))
                            {
                                lblDraftMid.Content = DraftsMid;
                                lblDraftMid.Foreground = System.Windows.Media.Brushes.Red;
                                System.Windows.MessageBox.Show("Draft Exceeds Design Drafts");
                            }
                            else
                            {
                                lblDraftMid.Content = DraftsMid;
                                lblDraftMid.Foreground = System.Windows.Media.Brushes.Black;
                            }
                        }

                        ////////////////////////////////////////////////////////////
                        btnGenerateReport.IsEnabled = true;
                    }
                }
                //pbCalculation.Value = ((DamageAll * 100) / 88);   commnetd by sachin for contaier             
                btnCalculate.IsEnabled = true;
                btnSaveLoadingCondition.IsEnabled = true;
                Mouse.OverrideCursor = null;
            }
            catch
            {
            }
        }

        private void Process()
        {
            /*pbCalculation.Minimum = 0;
            pbCalculation.Value = 0;
            pbCalculation.Foreground = System.Windows.Media.Brushes.Green;
            double value = 0;
           */
            /* string sCmd = "select time_log from  tbl_progressbar";
           DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
           command.CommandText = sCmd;
           command.CommandType = CommandType.Text;
           string Err = "";
           
           string ds = Models.DAL.clsDBUtilityMethods.ExecuteScalar(command, Err).ToString();*/
            /* value = double.Parse(ds);*/
            /*
if (lblCalculationMethod.Content.ToString() == "Intact")
{
pbCalculation.Maximum = value;
}
else
{
pbCalculation.Maximum = value;
}


UpdateProgressBarDelegate updatePbDelegate =
new UpdateProgressBarDelegate(pbCalculation.SetValue);

do
{
value += 1;
Dispatcher.Invoke(updatePbDelegate,
System.Windows.Threading.DispatcherPriority.Background,
new object[] { System.Windows.Controls.ProgressBar.ValueProperty, value });
}
while (pbCalculation.Value != pbCalculation.Maximum);*/
            //  commnetd by sachin for contaier             
            //pbCalculation.Minimum = 0;
            //pbCalculation.Maximum = 100;
            //pbCalculation.Value = 0;
            //double value = 0;
            //if (lblCalculationMethod.Content.ToString() == "Intact")
            //{
            //    pbCalculation.Maximum = 300;
            //}
            //else
            //{
            //    pbCalculation.Maximum = 700;
            //}

            //pbCalculation.Foreground = System.Windows.Media.Brushes.Green;

            //UpdateProgressBarDelegate updatePbDelegate =
            //    new UpdateProgressBarDelegate(pbCalculation.SetValue);
            //do
            //{
            //    value += 1;
            //    Dispatcher.Invoke(updatePbDelegate,
            //        System.Windows.Threading.DispatcherPriority.Background,
            //        new object[] { System.Windows.Controls.ProgressBar.ValueProperty, value });
            //}
            //while (pbCalculation.Value != pbCalculation.Maximum);
           // commnetd by sachin for contaier
        }
        public void CloseIt()
        {
            System.Threading.Thread.Sleep(4000);
            System.Windows.Forms.SendKeys.SendWait(" ");
        }
        private void Tank_PercentFill()
        {
            try
            {
                clsGlobVar.Tank1_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[0]["Percent_Full"]);
                clsGlobVar.Tank2_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[1]["Percent_Full"]);
                clsGlobVar.Tank3_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[2]["Percent_Full"]);
                clsGlobVar.Tank4_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[3]["Percent_Full"]);
                clsGlobVar.Tank5_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[4]["Percent_Full"]);
                clsGlobVar.Tank6_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[5]["Percent_Full"]);
                clsGlobVar.Tank7_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[6]["Percent_Full"]);
                clsGlobVar.Tank8_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[7]["Percent_Full"]);
                clsGlobVar.Tank9_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[8]["Percent_Full"]);
                clsGlobVar.Tank10_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[9]["Percent_Full"]);
                clsGlobVar.Tank11_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[10]["Percent_Full"]);
                clsGlobVar.Tank12_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[11]["Percent_Full"]);
                clsGlobVar.Tank13_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[12]["Percent_Full"]);
                clsGlobVar.Tank14_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[13]["Percent_Full"]);
                clsGlobVar.Tank15_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[14]["Percent_Full"]);
                clsGlobVar.Tank16_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[15]["Percent_Full"]);
                clsGlobVar.Tank17_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[16]["Percent_Full"]);
                clsGlobVar.Tank18_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[17]["Percent_Full"]);
                clsGlobVar.Tank19_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[18]["Percent_Full"]);
                clsGlobVar.Tank20_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[19]["Percent_Full"]);
                clsGlobVar.Tank21_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[20]["Percent_Full"]);
                clsGlobVar.Tank22_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[21]["Percent_Full"]);
                clsGlobVar.Tank23_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[22]["Percent_Full"]);
                clsGlobVar.Tank24_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[23]["Percent_Full"]);
                clsGlobVar.Tank25_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[24]["Percent_Full"]);
               clsGlobVar.Tank26_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[25]["Percent_Full"]);
                clsGlobVar.Tank27_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[26]["Percent_Full"]);
                clsGlobVar.Tank28_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[27]["Percent_Full"]);
                clsGlobVar.Tank29_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[28]["Percent_Full"]);
                clsGlobVar.Tank30_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[29]["Percent_Full"]);
                clsGlobVar.Tank31_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[30]["Percent_Full"]);
                clsGlobVar.Tank32_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[31]["Percent_Full"]);
                clsGlobVar.Tank33_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[32]["Percent_Full"]);
                clsGlobVar.Tank34_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[33]["Percent_Full"]);
                clsGlobVar.Tank35_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[34]["Percent_Full"]);
                clsGlobVar.Tank36_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[35]["Percent_Full"]);
                clsGlobVar.Tank37_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[36]["Percent_Full"]);
                //clsGlobVar.Tank38_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[43]["Percent_Full"]);
                //clsGlobVar.Tank39_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[45]["Percent_Full"]);
                //clsGlobVar.Tank40_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[46]["Percent_Full"]);
                //clsGlobVar.Tank41_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[47]["Percent_Full"]);
                //clsGlobVar.Tank42_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[48]["Percent_Full"]);
                //clsGlobVar.Tank43_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[50]["Percent_Full"]);
                //clsGlobVar.Tank44_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[51]["Percent_Full"]);
                //clsGlobVar.Tank45_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[52]["Percent_Full"]);
                //clsGlobVar.Tank46_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[53]["Percent_Full"]);
                //clsGlobVar.Tank47_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[54]["Percent_Full"]);
                //clsGlobVar.Tank48_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[55]["Percent_Full"]);
                //clsGlobVar.Tank49_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[56]["Percent_Full"]);
                //clsGlobVar.Tank50_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[57]["Percent_Full"]);
                //clsGlobVar.Tank51_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[58]["Percent_Full"]);
                //clsGlobVar.Tank52_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[59]["Percent_Full"]);
                //clsGlobVar.Tank53_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[60]["Percent_Full"]);
                // clsGlobVar.Tank42_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[41]["Percent_Full"]);
                // clsGlobVar.Tank43_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[42]["Percent_Full"]);

            }
            catch (Exception ex)
            {
                // System.Windows.MessageBox.Show(ex.Message);
            }
        }
        private void Tank_PercentFillReal()
        {
            try
            {
                
                clsGlobVar.Tank1_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[1]["Percent_Full"]);
                clsGlobVar.Tank2_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[2]["Percent_Full"]);
                clsGlobVar.Tank3_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[3]["Percent_Full"]);
                clsGlobVar.Tank4_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[4]["Percent_Full"]);
                clsGlobVar.Tank5_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[5]["Percent_Full"]);
                clsGlobVar.Tank6_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[6]["Percent_Full"]);
                clsGlobVar.Tank7_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[7]["Percent_Full"]);
                clsGlobVar.Tank8_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[8]["Percent_Full"]);
                clsGlobVar.Tank9_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[9]["Percent_Full"]);
                clsGlobVar.Tank10_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[10]["Percent_Full"]);
                clsGlobVar.Tank11_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[11]["Percent_Full"]);
                clsGlobVar.Tank12_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[12]["Percent_Full"]);
                clsGlobVar.Tank13_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[13]["Percent_Full"]);
                clsGlobVar.Tank14_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[14]["Percent_Full"]);
                clsGlobVar.Tank15_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[16]["Percent_Full"]);
                clsGlobVar.Tank16_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[17]["Percent_Full"]);
                clsGlobVar.Tank17_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[18]["Percent_Full"]);
                clsGlobVar.Tank18_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[19]["Percent_Full"]);
                clsGlobVar.Tank19_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[20]["Percent_Full"]);
                clsGlobVar.Tank20_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[21]["Percent_Full"]);
                clsGlobVar.Tank21_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[22]["Percent_Full"]);
                clsGlobVar.Tank22_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[23]["Percent_Full"]);
                clsGlobVar.Tank23_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[24]["Percent_Full"]);
                clsGlobVar.Tank24_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[25]["Percent_Full"]);
                clsGlobVar.Tank25_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[26]["Percent_Full"]);
                clsGlobVar.Tank26_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[27]["Percent_Full"]);
                clsGlobVar.Tank27_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[28]["Percent_Full"]);
                clsGlobVar.Tank28_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[29]["Percent_Full"]);
                clsGlobVar.Tank29_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[31]["Percent_Full"]);
                clsGlobVar.Tank30_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[32]["Percent_Full"]);
                clsGlobVar.Tank31_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[33]["Percent_Full"]);
                clsGlobVar.Tank32_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[35]["Percent_Full"]);
                clsGlobVar.Tank33_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[37]["Percent_Full"]);
                clsGlobVar.Tank34_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[38]["Percent_Full"]);
                clsGlobVar.Tank35_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[40]["Percent_Full"]);
                clsGlobVar.Tank36_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[41]["Percent_Full"]);
                clsGlobVar.Tank37_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[42]["Percent_Full"]);
                clsGlobVar.Tank38_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[43]["Percent_Full"]);
                clsGlobVar.Tank39_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[45]["Percent_Full"]);
                clsGlobVar.Tank40_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[46]["Percent_Full"]);
                clsGlobVar.Tank41_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[47]["Percent_Full"]);
                clsGlobVar.Tank42_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[48]["Percent_Full"]);
                clsGlobVar.Tank43_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[50]["Percent_Full"]);
                clsGlobVar.Tank44_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[51]["Percent_Full"]);
                clsGlobVar.Tank45_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[52]["Percent_Full"]);
                clsGlobVar.Tank46_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[53]["Percent_Full"]);
                clsGlobVar.Tank47_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[54]["Percent_Full"]);
                clsGlobVar.Tank48_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[55]["Percent_Full"]);
                clsGlobVar.Tank49_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[56]["Percent_Full"]);
                clsGlobVar.Tank50_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[57]["Percent_Full"]);
                clsGlobVar.Tank51_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[58]["Percent_Full"]);
                clsGlobVar.Tank52_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[59]["Percent_Full"]);
                clsGlobVar.Tank53_PercentFillReal = Convert.ToDecimal(clsGlobVar.dtRealAllTanks.Rows[60]["Percent_Full"]);
                // clsGlobVar.Tank42_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[41]["Percent_Full"]);
                // clsGlobVar.Tank43_PercentFill = Convert.ToDecimal(clsGlobVar.dtSimulationAllTanks.Rows[42]["Percent_Full"]);

            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.Message);
            }
        }
        private void RefreshScreen()
        {
            try
            {
           
                if (Convert.ToInt16(checkcalculateorloading) == 1||1==1)
                    //if (Convert.ToInt16(checkcalculateorloading) == 1 || FirstTimeOpen < 2)
                    {
                    //checkcalculateorloading == 1;
                    //this.IsActive = true;

                    //foreach (Window window in System.Windows.Application.Current.Windows)
                    //{
                    //    if (window.GetType() != typeof(LoadingCondition))
                    //    {
                    //    }
                    //}
                    //if (txtLoadingConditionName.Text==null) { }
                    tabLongitudinal.IsSelected = true;
                    isHatchSelectionProfile = false;
                    tabLongitudinal.Focus();
                    zedGraph.Refresh();
                    zedGraph.GraphPane.CurveList.Clear();
                    zedGraph.GraphPane.GraphObjList.Clear();
                    dt1StabilityStatus.IsEnabled = false;
                    if (lblCalculationMethod.Content.ToString() == "Intact")
                    {
                        tabfloodingpoint.IsEnabled = false;
                        //SFBMCondition.IsEnabled = true;
                        tabLongitudinal.IsEnabled = true;
                        dgTanks.Columns[0].Visibility = Visibility.Hidden;
                        tabItem7.IsEnabled = true;
                        btnAldamage.IsEnabled = false;
                        lblLongitudinalStrength.IsEnabled = true;
                        lblLongitudinalStatus.Content = "OK";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.LimeGreen;
                        DrawLongitudinalGraph();

                        //GetDamageStatus();
                    }
                    else
                    {
                        tabfloodingpoint.IsEnabled = true;
                        //SFBMCondition.IsEnabled = false;
                        tabLongitudinal.IsEnabled = false;
                        btnAldamage.IsEnabled = true;
                        tabItem7.IsEnabled = true;
                        dgTanks.Columns[0].Visibility = Visibility.Visible;
                        lblLongitudinalStrength.IsEnabled = false;
                        lblLongitudinalStatus.Content = "NA";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.Gray;

                    }
                    // Refresh3dNew();
                    canvasTwoD.Children.Clear();//17.11
                    ViewModels.CadViewModel.Cad2dModels();

                    //Tank_PercentFill();
                    Model(Models.clsGlobVar.CentrelineProfile);
                    string sCmd = "Select M.Tank_ID,M.[Group], M.Tank_Name,M.Max_Volume,f.[max_1_act_0],L.[Sounding_Level], L.Volume, L.SG, L.Weight,L.Percent_Full, L.LCG, L.TCG, L.VCG, L.FSM ,S.IsDamaged ";
                    sCmd += "From tblSimulationMode_Loading_Condition L ";
                    sCmd += "JOIN dbo.tblMaster_Tank M ";
                    sCmd += "On L.Tank_ID = M.Tank_ID ";
                    sCmd += " Join tblSimulationMode_Tank_Status S ";
                    sCmd += "On L.Tank_ID = S.Tank_ID ";
                    sCmd += " Join tblFSM_max_act f ";
                    sCmd += " on f.Tank_ID = M.Tank_ID ";
                    sCmd += "where m.Tank_ID<46 ORDER BY Tank_ID";
                    string Err1 = "";
                    DbCommand commandd = Models.DAL.clsDBUtilityMethods.GetCommand();
                    commandd.CommandText = sCmd;
                    commandd.CommandType = CommandType.Text;
                    DataSet ds = new DataSet();
                    ds = Models.DAL.clsDBUtilityMethods.GetDataSet(commandd, Err1);
                    clsGlobVar.dtSimulationAllTanks = ds.Tables[0];
                    dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanks.DefaultView;
                    DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    DataSet dstable; string err1 = "";
                    //testing container to bay and vice versa
                    //string scmd = "select * from tblFixedLoad_Simulation";22feb23

                    ////flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";22feb23
                    ////flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";22feb23
                    //command12.CommandText = scmd;22feb23
                    //command12.CommandType = CommandType.Text;22feb23
                    //dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);22feb23
                    //DataTable dttable1 = new DataTable();22feb23
                    //dttable1 = dstable.Tables[0];22feb23

                    //dgVariableItems.ItemsSource = dttable1.DefaultView;
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    Models.clsGlobVar.dtSimulationfixedload = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModefixedload");//simultaionfixed 
                    dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView;
                    // dgFixedLoad.ItemsSource = clsGlobVar.dtSimulationVariableItems.DefaultView;   commnetd by sachin for contaier             
                    tabItem1.IsSelected = true;
                    tabItem4.IsSelected = true;
                    tabItem1.Focus();
                    DrawGZGraph();

                    Models.TableModel.SimulationModeData();
                    StabilityCriteria();
                    LebelUpdate();
                    //AddHatchProfile();
                    //AddHatchDeckPlan();
                    canvasTwoD.Arrange(new Rect(0, 0, canvasTwoD.RenderSize.Width, canvasTwoD.RenderSize.Height));
                    canvasTwoD.InvalidateVisual();
                    CreateBitmapFromVisual(canvasTwoD, System.Windows.Forms.Application.StartupPath + "\\Images\\Img.bmp");
                    Collection bay = new Collection();
                    bay.CollectionRefresh();
                    //try { 
                    //dgContainers20FootInHold.ItemsSource = bay.Load20InHoldBaySource;
                    //dgContainers20FootOnDeck.ItemsSource = bay.Load20OnDeckBaySource;
                    //dgContainers40FootInHold.ItemsSource = bay.Load40InHoldBaySource;
                    //dgContainers40FootOnDeck.ItemsSource = bay.Load40OnDeckBaySource;
                    //dgBale.ItemsSource = bay.LoadBaleSource;
                    //radioButtonStackWise_Checked();
                    //}
                    //catch { }
                }
            }
            catch (Exception)
            {
                //System.Windows.MessageBox.Show(ex.Message);
            }

        }
        //without cad(means dwg file) by sachin
        private void RefreshScreenWithoutCad()
        {
            try
            {

                //if (Convert.ToInt16(checkcalculateorloading) == 1)
                //{
                    //checkcalculateorloading == 1;
                    //this.IsActive = true;

                    //foreach (Window window in System.Windows.Application.Current.Windows)
                    //{
                    //    if (window.GetType() != typeof(LoadingCondition))
                    //    {
                    //    }
                    //}
                    //if (txtLoadingConditionName.Text==null) { }
                    tabLongitudinal.IsSelected = true;
                    isHatchSelectionProfile = false;
                    tabLongitudinal.Focus();
                    zedGraph.Refresh();
                    zedGraph.GraphPane.CurveList.Clear();
                    zedGraph.GraphPane.GraphObjList.Clear();
                    dt1StabilityStatus.IsEnabled = false;
                    if (lblCalculationMethod.Content.ToString() == "Intact")
                    {
                        tabfloodingpoint.IsEnabled = false;
                        //SFBMCondition.IsEnabled = true;
                        tabLongitudinal.IsEnabled = true;
                        dgTanks.Columns[0].Visibility = Visibility.Hidden;
                        tabItem7.IsEnabled = true;
                        btnAldamage.IsEnabled = false;
                        lblLongitudinalStrength.IsEnabled = true;
                        lblLongitudinalStatus.Content = "OK";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.LimeGreen;
                        DrawLongitudinalGraph();

                        //GetDamageStatus();
                    }
                    else
                    {
                        tabfloodingpoint.IsEnabled = true;
                        //SFBMCondition.IsEnabled = false;
                        tabLongitudinal.IsEnabled = false;
                        btnAldamage.IsEnabled = true;
                        tabItem7.IsEnabled = true;
                        dgTanks.Columns[0].Visibility = Visibility.Visible;
                        lblLongitudinalStrength.IsEnabled = false;
                        lblLongitudinalStatus.Content = "NA";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.Gray;

                    }
                    // Refresh3dNew();
                    //commnetted bcoz software crash when savedloading open then refreshscreen again and again run by sachin 
                    //canvasTwoD.Children.Clear();//17.11
                    //ViewModels.CadViewModel.Cad2dModels();
                    //end commnetted bcoz software crash when savedloading open then refreshscreen again and again run by sachin
                    //Tank_PercentFill();
                    Model(Models.clsGlobVar.CentrelineProfile);
                    string sCmd = "Select M.Tank_ID,M.[Group], M.Tank_Name,M.Max_Volume,f.[max_1_act_0],L.[Sounding_Level], L.Volume, L.SG, L.Weight,L.Percent_Full, L.LCG, L.TCG, L.VCG, L.FSM ,S.IsDamaged ";
                    sCmd += "From tblSimulationMode_Loading_Condition L ";
                    sCmd += "JOIN dbo.tblMaster_Tank M ";
                    sCmd += "On L.Tank_ID = M.Tank_ID ";
                    sCmd += " Join tblSimulationMode_Tank_Status S ";
                    sCmd += "On L.Tank_ID = S.Tank_ID ";
                    sCmd += " Join tblFSM_max_act f ";
                    sCmd += " on f.Tank_ID = M.Tank_ID ";
                    sCmd += "where m.Tank_ID<46 ORDER BY Tank_ID";
                    string Err1 = "";
                    DbCommand commandd = Models.DAL.clsDBUtilityMethods.GetCommand();
                    commandd.CommandText = sCmd;
                    commandd.CommandType = CommandType.Text;
                    DataSet ds = new DataSet();
                    ds = Models.DAL.clsDBUtilityMethods.GetDataSet(commandd, Err1);
                    clsGlobVar.dtSimulationAllTanks = ds.Tables[0];
                    dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanks.DefaultView;
                    DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    DataSet dstable; string err1 = "";
                    //testing container to bay and vice versa
                    //string scmd = "select * from tblFixedLoad_Simulation";22feb23

                    ////flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";22feb23
                    ////flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";22feb23
                    //command12.CommandText = scmd;22feb23
                    //command12.CommandType = CommandType.Text;22feb23
                    //dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);22feb23
                    //DataTable dttable1 = new DataTable();22feb23
                    //dttable1 = dstable.Tables[0];22feb23

                    //dgVariableItems.ItemsSource = dttable1.DefaultView;
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    Models.clsGlobVar.dtSimulationfixedload = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModefixedload");//simultaionfixed 
                    dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView;
                    // dgFixedLoad.ItemsSource = clsGlobVar.dtSimulationVariableItems.DefaultView;   commnetd by sachin for contaier             
                    tabItem1.IsSelected = true;
                    tabItem4.IsSelected = true;
                    tabItem1.Focus();
                    DrawGZGraph();

                    Models.TableModel.SimulationModeData();
                    StabilityCriteria();
                    LebelUpdate();
                    //AddHatchProfile();
                    //AddHatchDeckPlan();
                    canvasTwoD.Arrange(new Rect(0, 0, canvasTwoD.RenderSize.Width, canvasTwoD.RenderSize.Height));
                    canvasTwoD.InvalidateVisual();
                    CreateBitmapFromVisual(canvasTwoD, System.Windows.Forms.Application.StartupPath + "\\Images\\Img.bmp");
                    Collection bay = new Collection();
                    bay.CollectionRefresh();
                    //try { 
                    //dgContainers20FootInHold.ItemsSource = bay.Load20InHoldBaySource;
                    //dgContainers20FootOnDeck.ItemsSource = bay.Load20OnDeckBaySource;
                    //dgContainers40FootInHold.ItemsSource = bay.Load40InHoldBaySource;
                    //dgContainers40FootOnDeck.ItemsSource = bay.Load40OnDeckBaySource;
                    //dgBale.ItemsSource = bay.LoadBaleSource;
                    //radioButtonStackWise_Checked();
                    //}
                    //catch { }
                //}
            }
            catch (Exception)
            {
                //System.Windows.MessageBox.Show(ex.Message);
            }

        }
        // end cad(means dwg file) by sachin
        private void RefreshScreenReal()
        {
            try
            {

                System.Windows.Application.Current.Dispatcher.BeginInvoke((System.Action)delegate
                {
                    tabItem7.IsSelected = true;
                    isHatchSelectionProfile = false;
                    // tabLongitudinal.Focus();
                    zedGraph.Refresh();
                    zedGraph.GraphPane.CurveList.Clear();
                    zedGraph.GraphPane.GraphObjList.Clear();
                    dt1StabilityStatus.IsEnabled = false;
                    if (lblCalculationMethod.Content.ToString() == "Intact")
                    {
                        tabfloodingpoint.IsEnabled = false;
                        // SFBMCondition.IsEnabled = true;
                        tabLongitudinal.IsEnabled = true;
                        //dgTanks.Columns[0].Visibility = Visibility.Hidden;
                        tabItem7.IsEnabled = true;
                        btnAldamage.IsEnabled = false;
                        lblLongitudinalStrength.IsEnabled = true;
                        lblLongitudinalStatus.Content = "OK";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.LimeGreen;
                        DrawLongitudinalGraphReal();

                       
                        //   Refresh3dNew();

                        //GetDamageStatus();
                    }
                    //else
                    //{
                    //    tabfloodingpoint.IsEnabled = true;
                    //    SFBMCondition.IsEnabled = false;
                    //    tabLongitudinal.IsEnabled = false;
                    //    btnAldamage.IsEnabled = true;
                    //    tabItem7.IsEnabled = true;
                    //    dgTanks.Columns[0].Visibility = Visibility.Visible;
                    //    lblLongitudinalStrength.IsEnabled = false;
                    //    lblLongitudinalStatus.Content = "NA";
                    //    lblLongitudinalStatus.Background = System.Windows.Media.Brushes.Gray;

                    //}

                    //GraphicsTab.SelectedIndex = 0;

                    canvasTwoD.Children.Clear();
                    CadViewModel.Cad2dModels();
                    TableModel.RealModeData();
                    //lblRealtrim.Content = "Physical Trim :- " + Math.Round(Convert.ToDecimal(Models.clsGlobVar.dtRealTrimHeelValues.Rows[0]["Trim"]), 2).ToString();
                    //lblRealheel.Content = "Physical Heel :- " + Math.Round(Convert.ToDecimal(Models.clsGlobVar.dtRealTrimHeelValues.Rows[0]["Heel"]), 2).ToString();
                    Tank_PercentFillReal();
                    Model(clsGlobVar.CentrelineProfile);

                    //dgRealTanks.ItemsSource = clsGlobVar.dtRealAllTanks.DefaultView; comented by sachin for container
                    dglighship.ItemsSource = clsGlobVar.dtlighshipvalues.DefaultView;

                    //dgFixedLoad.ItemsSource = clsGlobVar.dtRealVariableItems.DefaultView;
                    //tabItem1.IsSelected = true;
                    //tabItem4.IsSelected = true;
                    //tabItem1.Focus();
                    DrawGZGraphReal();
                    StabilityCriteriaReal();
                    LebelUpdateReal();
                    //AddHatchProfileReal();
                   // AddHatchDeckPlanReal();
                    canvasTwoD.Arrange(new Rect(0, 0, canvasTwoD.RenderSize.Width, canvasTwoD.RenderSize.Height));
                    //canvasTwoD.Arrange(new Rect(0, 0, 500 ,canvasTwoD.RenderSize.Height));
                    canvasTwoD.InvalidateVisual();

                    CreateBitmapFromVisual(canvasTwoD, System.Windows.Forms.Application.StartupPath + "\\Images\\Img.bmp");
                });

            }
            catch (Exception ex)
            {
                // System.Windows.MessageBox.Show(ex.Message);
            }

        }

        private void DrawGZGraph()
        {
            try
            {
                myGraph = zedGraph.GraphPane;
                myGraph.XAxis.Title.Text = "Heel (degree)";
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myGraph.Title.Text = "GZ and Lever Arm Curves";
                    myGraph.YAxis.Title.Text = "GZ and Lever Arm (m)";
                    myGraph.XAxis.Scale.Min = -80;
                    myGraph.XAxis.Scale.Max = 80;
                }
                else if (lblCalculationMethod.Content.ToString() == "Damage")
                {
                    myGraph.Title.Text = " GZ ";
                    myGraph.YAxis.Title.Text = "GZ (m)";
                    myGraph.XAxis.Scale.Min = -80;
                    myGraph.XAxis.Scale.Max = 80;
                }
                zedGraph.ZoomButtons = System.Windows.Forms.MouseButtons.None;
                zedGraph.ZoomButtons = System.Windows.Forms.MouseButtons.None;
                zedGraph.ZoomStepFraction = 0;
                zedGraph.AxisChange();
                zedGraph.Invalidate();

                DataSet dsGZData = new DataSet();
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                string cmd = "SELECT heelAng,ISNULL(heelGZ,0) AS heelGZ from GZDataSimulationMode_New where [User] = 'dbo'";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsGZData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtGZgraph = new DataTable();
                dtGZgraph = dsGZData.Tables[0];
                dgGZData.ItemsSource = dtGZgraph.DefaultView;

                myGraph.YAxis.Scale.Min = dtGZgraph.AsEnumerable().Min(row => Convert.ToInt32(row["heelGZ"])) - 0.5;
                myGraph.YAxis.Scale.Max = dtGZgraph.AsEnumerable().Max(row => Convert.ToInt32(row["heelGZ"])) + 0.8;

                foreach (DataColumn dc in dtGZgraph.Columns)
                {
                    foreach (DataRow dtrow in dtGZgraph.Rows)
                    {
                        totalRow = dtGZgraph.Rows.Count;
                        x = new double[totalRow];
                        y1 = new double[totalRow];

                        DataColumn colx1 = dtGZgraph.Columns[0];
                        DataColumn coly1 = dtGZgraph.Columns[1];

                        for (int index = 0; index < dtGZgraph.Rows.Count; index++)
                        {
                            //x[index] = (float)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[0]);
                            //y1[index] = (float)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[1]);
                            x[index] = (double)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[0]);
                            y1[index] = (double)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[1]);

                        }

                    }
                }
                PointPairList aList = new PointPairList();
                aList.Add(x, y1);


                LineItem myCurve = myGraph.AddCurve("Smooth", aList, System.Drawing.Color.Green, SymbolType.None);
                myCurve.Label.Text = "GZ";
                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Symbol.Fill = new Fill(System.Drawing.Color.Green);
                myCurve.Symbol.Size = 4;
                myCurve.Line.Width = 2;
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    DataSet dsHeelingArms = new DataSet();
                    cmd = "SELECT [lw1],[lw2] from [tblWindHeelSimulation] ";
                    command.CommandText = cmd;
                    command.CommandType = CommandType.Text;
                    dsHeelingArms = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                    DataTable dtHeelingArms = new DataTable();
                    dtHeelingArms = dsHeelingArms.Tables[0];
                    double[] xArm = { -30, 90 };
                    double[] yArm = { Convert.ToDouble(dtHeelingArms.Rows[0][1]), Convert.ToDouble(dtHeelingArms.Rows[0][1]) };
                    myCurve = myGraph.AddCurve("lw2 " + Convert.ToDouble(dtHeelingArms.Rows[0][1]).ToString(), xArm, yArm, System.Drawing.Color.DarkMagenta, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Dash;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;

                    double[] xArm2 = { -30, 90 };
                    double[] yArm2 = { Convert.ToDouble(dtHeelingArms.Rows[0][0]), Convert.ToDouble(dtHeelingArms.Rows[0][0]) };
                    myCurve = myGraph.AddCurve("lw1 " + Convert.ToDouble(dtHeelingArms.Rows[0][0]).ToString(), xArm2, yArm2, System.Drawing.Color.DarkBlue, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Dash;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;
                }
                DataSet dsDownFlooding = new DataSet();
                cmd = "SELECT [Angle] from [tblMinimum_DF_Angle] ";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsDownFlooding = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtDownFlooding = new DataTable();
                dtDownFlooding = dsDownFlooding.Tables[0];
                double[] xDF = { Convert.ToDouble(dtDownFlooding.Rows[0][0]), Convert.ToDouble(dtDownFlooding.Rows[0][0]) };
                double[] yDF = { 0, 5 };

                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myCurve = myGraph.AddCurve("Downflooding  " + Math.Round(Convert.ToDouble(dtDownFlooding.Rows[0][0]), 1).ToString() + (char)176, xDF, yDF, System.Drawing.Color.DarkMagenta, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;
                    myCurve.Line.Width = 2;
                }
                else
                {
                    //  myCurve = myGraph.AddCurve("Critical Point  " + Convert.ToDouble(dtDownFlooding.Rows[0][0]).ToString() + (char)176, xDF, yDF, System.Drawing.Color.DarkMagenta, SymbolType.None);
                }
                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Line.DashOff = 2f;
                myCurve.Line.DashOn = 2f;
                myCurve.Line.Width = 2;

                //DataSet dsEquillibriumAngle = new DataSet();
                //cmd = "SELECT [Actual_Value] from [tblSimulationMode_Stability_Actual_Criteria_Calc] where [Stability_Summary_ID]=7 and [User]='dbo'";
                //command.CommandText = cmd;
                //command.CommandType = CommandType.Text;
                //dsEquillibriumAngle = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);

                //DataTable dtEquillibriumAngle = new DataTable();
                //dtEquillibriumAngle = dsEquillibriumAngle.Tables[0];
                //double xArmE = Convert.ToDouble(dtEquillibriumAngle.Rows[0][0]);


                //// Hatching Code Start///
                //PointD[] pointD = new PointD[25];
                //int maxIndex = 0;
                //for (int index = 7; index < dtGZgraph.Rows.Count; index++)
                //{
                //    if (x[index] < Convert.ToDouble(dtDownFlooding.Rows[0][0]))
                //    {
                //        pointD[index - 6] = new PointD(x[index], y1[index]);
                //        maxIndex = index - 6;
                //    }

                //}
                ////pointD[maxIndex + 1] = new PointD(Convert.ToDouble(dtDownFlooding.Rows[0][0]), Convert.ToDouble(dtHeelingArms.Rows[0][1]));

                //var poly1 = new ZedGraph.PolyObj
                //{
                //    Points = pointD,
                //    Fill = new ZedGraph.Fill(System.Drawing.Color.PowderBlue),
                //    ZOrder = ZedGraph.ZOrder.E_BehindCurves
                //};
                //zedGraph.GraphPane.GraphObjList.Add(poly1);
                /////Hatching Code End
                zedGraph.AxisChange();
                zedGraph.Invalidate();
                double[] xb = { 0, 0 };
                double[] yb = { -5, 5 };

                double[] xb1 = { 0, 0 };
                double[] yb1 = { -0, 0 };
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myCurve = myGraph.AddCurve("", xb, yb, System.Drawing.Color.Black, SymbolType.None);
                }
                else
                {
                    myCurve = myGraph.AddCurve("", xb1, yb1, System.Drawing.Color.Black, SymbolType.None);
                }


                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Line.DashOff = 4f;
                myCurve.Line.DashOn = 4f;
                myCurve.YAxisIndex = 1;
                myGraph.YAxis.AxisGap = 0.2f;
                myGraph.YAxis.Title.FontSpec.Size = 15f;
                myGraph.YAxis.Scale.FontSpec.Size = 15f;
                myGraph.Y2Axis.Title.FontSpec.Size = 15f;
                myGraph.Y2Axis.Scale.FontSpec.Size = 15f;
                myGraph.XAxis.Title.FontSpec.Size = 15f;
                myGraph.XAxis.Scale.FontSpec.Size = 15f;
                myGraph.Legend.FontSpec.Size = 13f;
                myGraph.YAxis.Title.FontSpec.FontColor = System.Drawing.Color.Green;
                myGraph.YAxis.Scale.FontSpec.FontColor = System.Drawing.Color.Green;
                myGraph.Legend.Gap = 1f;
                zedGraph.ZoomStepFraction = 0;
                zedGraph.AxisChange();
                zedGraph.Invalidate();

                using (var bmp = new System.Drawing.Bitmap(zedGraph.Width, zedGraph.Height))
                {
                    zedGraph.DrawToBitmap(bmp, new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height));
                    bmp.Save(System.Windows.Forms.Application.StartupPath + "\\Images\\GZ_curve.png");

                }
            }
            catch (Exception ex)
            {
                // System.Windows.MessageBox.Show(ex.Message);
            }
        }

        private void DrawGZGraphReal()
        {
            try
            {
                myGraph = zedGraph.GraphPane;
                myGraph.XAxis.Title.Text = "Heel (degree)";
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myGraph.Title.Text = "GZ and Lever Arm Curves";
                    myGraph.YAxis.Title.Text = "GZ and Lever Arm (m)";
                    myGraph.XAxis.Scale.Min = -80;
                    myGraph.XAxis.Scale.Max = 80;
                }
                else if (lblCalculationMethod.Content.ToString() == "Damage")
                {
                    myGraph.Title.Text = " GZ ";
                    myGraph.YAxis.Title.Text = "GZ (m)";
                    myGraph.XAxis.Scale.Min = -80;
                    myGraph.XAxis.Scale.Max = 80;
                }
                zedGraph.ZoomButtons = System.Windows.Forms.MouseButtons.None;
                zedGraph.ZoomButtons = System.Windows.Forms.MouseButtons.None;
                zedGraph.ZoomStepFraction = 0;
                zedGraph.AxisChange();
                zedGraph.Invalidate();

                DataSet dsGZData = new DataSet();
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                string cmd = "SELECT heelAng,ISNULL(heelGZ,0) AS heelGZ from GZDataRealMode_New where [User] = 'dbo'";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsGZData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtGZgraph = new DataTable();
                dtGZgraph = dsGZData.Tables[0];
                dgGZData.ItemsSource = dtGZgraph.DefaultView;

                myGraph.YAxis.Scale.Min = dtGZgraph.AsEnumerable().Min(row => Convert.ToInt32(row["heelGZ"])) - 0.5;
                myGraph.YAxis.Scale.Max = dtGZgraph.AsEnumerable().Max(row => Convert.ToInt32(row["heelGZ"])) + 0.8;

                foreach (DataColumn dc in dtGZgraph.Columns)
                {
                    foreach (DataRow dtrow in dtGZgraph.Rows)
                    {
                        totalRow = dtGZgraph.Rows.Count;
                        x = new double[totalRow];
                        y1 = new double[totalRow];

                        DataColumn colx1 = dtGZgraph.Columns[0];
                        DataColumn coly1 = dtGZgraph.Columns[1];

                        for (int index = 0; index < dtGZgraph.Rows.Count; index++)
                        {
                            //x[index] = (float)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[0]);
                            //y1[index] = (float)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[1]);
                            x[index] = (double)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[0]);
                            y1[index] = (double)Convert.ToDouble(dtGZgraph.Rows[index].ItemArray[1]);

                        }

                    }
                }
                PointPairList aList = new PointPairList();
                aList.Add(x, y1);


                LineItem myCurve = myGraph.AddCurve("Smooth", aList, System.Drawing.Color.Green, SymbolType.None);
                myCurve.Label.Text = "GZ";
                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Symbol.Fill = new Fill(System.Drawing.Color.Green);
                myCurve.Symbol.Size = 4;
                myCurve.Line.Width = 2;
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    DataSet dsHeelingArms = new DataSet();
                    cmd = "SELECT [lw1],[lw2] from [tblWindHeelReal] ";
                    command.CommandText = cmd;
                    command.CommandType = CommandType.Text;
                    dsHeelingArms = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                    DataTable dtHeelingArms = new DataTable();
                    dtHeelingArms = dsHeelingArms.Tables[0];
                    double[] xArm = { -30, 90 };
                    double[] yArm = { Convert.ToDouble(dtHeelingArms.Rows[0][1]), Convert.ToDouble(dtHeelingArms.Rows[0][1]) };
                    myCurve = myGraph.AddCurve("lw2 " + Convert.ToDouble(dtHeelingArms.Rows[0][1]).ToString(), xArm, yArm, System.Drawing.Color.DarkMagenta, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Dash;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;

                    double[] xArm2 = { -30, 90 };
                    double[] yArm2 = { Convert.ToDouble(dtHeelingArms.Rows[0][0]), Convert.ToDouble(dtHeelingArms.Rows[0][0]) };
                    myCurve = myGraph.AddCurve("lw1 " + Convert.ToDouble(dtHeelingArms.Rows[0][0]).ToString(), xArm2, yArm2, System.Drawing.Color.DarkBlue, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Dash;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;
                }
                DataSet dsDownFlooding = new DataSet();
                cmd = "SELECT [Angle] from [tblMinimum_DF_Angle] ";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsDownFlooding = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtDownFlooding = new DataTable();
                dtDownFlooding = dsDownFlooding.Tables[0];
                double[] xDF = { Convert.ToDouble(dtDownFlooding.Rows[0][0]), Convert.ToDouble(dtDownFlooding.Rows[0][0]) };
                double[] yDF = { 0, 5 };

                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myCurve = myGraph.AddCurve("Downflooding  " + Math.Round(Convert.ToDouble(dtDownFlooding.Rows[0][0]), 1).ToString() + (char)176, xDF, yDF, System.Drawing.Color.DarkMagenta, SymbolType.None);
                    myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                    myCurve.Line.DashOff = 2f;
                    myCurve.Line.DashOn = 2f;
                    myCurve.Line.Width = 2;
                }
                else
                {
                    //  myCurve = myGraph.AddCurve("Critical Point  " + Convert.ToDouble(dtDownFlooding.Rows[0][0]).ToString() + (char)176, xDF, yDF, System.Drawing.Color.DarkMagenta, SymbolType.None);
                }
                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Line.DashOff = 2f;
                myCurve.Line.DashOn = 2f;
                myCurve.Line.Width = 2;

                //DataSet dsEquillibriumAngle = new DataSet();
                //cmd = "SELECT [Actual_Value] from [tblSimulationMode_Stability_Actual_Criteria_Calc] where [Stability_Summary_ID]=7 and [User]='dbo'";
                //command.CommandText = cmd;
                //command.CommandType = CommandType.Text;
                //dsEquillibriumAngle = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);

                //DataTable dtEquillibriumAngle = new DataTable();
                //dtEquillibriumAngle = dsEquillibriumAngle.Tables[0];
                //double xArmE = Convert.ToDouble(dtEquillibriumAngle.Rows[0][0]);


                //// Hatching Code Start///
                //PointD[] pointD = new PointD[25];
                //int maxIndex = 0;
                //for (int index = 7; index < dtGZgraph.Rows.Count; index++)
                //{
                //    if (x[index] < Convert.ToDouble(dtDownFlooding.Rows[0][0]))
                //    {
                //        pointD[index - 6] = new PointD(x[index], y1[index]);
                //        maxIndex = index - 6;
                //    }

                //}
                ////pointD[maxIndex + 1] = new PointD(Convert.ToDouble(dtDownFlooding.Rows[0][0]), Convert.ToDouble(dtHeelingArms.Rows[0][1]));

                //var poly1 = new ZedGraph.PolyObj
                //{
                //    Points = pointD,
                //    Fill = new ZedGraph.Fill(System.Drawing.Color.PowderBlue),
                //    ZOrder = ZedGraph.ZOrder.E_BehindCurves
                //};
                //zedGraph.GraphPane.GraphObjList.Add(poly1);
                /////Hatching Code End
                zedGraph.AxisChange();
                zedGraph.Invalidate();
                double[] xb = { 0, 0 };
                double[] yb = { -5, 5 };

                double[] xb1 = { 0, 0 };
                double[] yb1 = { -0, 0 };
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    myCurve = myGraph.AddCurve("", xb, yb, System.Drawing.Color.Black, SymbolType.None);
                }
                else
                {
                    myCurve = myGraph.AddCurve("", xb1, yb1, System.Drawing.Color.Black, SymbolType.None);
                }


                myCurve.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve.Line.DashOff = 4f;
                myCurve.Line.DashOn = 4f;
                myCurve.YAxisIndex = 1;
                myGraph.YAxis.AxisGap = 0.2f;
                myGraph.YAxis.Title.FontSpec.Size = 15f;
                myGraph.YAxis.Scale.FontSpec.Size = 15f;
                myGraph.Y2Axis.Title.FontSpec.Size = 15f;
                myGraph.Y2Axis.Scale.FontSpec.Size = 15f;
                myGraph.XAxis.Title.FontSpec.Size = 15f;
                myGraph.XAxis.Scale.FontSpec.Size = 15f;
                myGraph.Legend.FontSpec.Size = 13f;
                myGraph.YAxis.Title.FontSpec.FontColor = System.Drawing.Color.Green;
                myGraph.YAxis.Scale.FontSpec.FontColor = System.Drawing.Color.Green;
                myGraph.Legend.Gap = 1f;
                zedGraph.ZoomStepFraction = 0;
                zedGraph.AxisChange();
                zedGraph.Invalidate();

                using (var bmp = new System.Drawing.Bitmap(zedGraph.Width, zedGraph.Height))
                {
                    zedGraph.DrawToBitmap(bmp, new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height));
                    bmp.Save(System.Windows.Forms.Application.StartupPath + "\\Images\\GZ_curve.png");

                }
            }
            catch (Exception ex)
            {
                //  System.Windows.MessageBox.Show(ex.Message);
            }
        }

        private void DrawLongitudinalGraph()
        {
            try
            {  ////////////////////////longitudinal data/////////////
                DataSet dsLongitudinalData = new DataSet();
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                string cmd = "SELECT [frame],[SF],[BM] from [tbl_SimulationMode_SFAndBM_New] where [User] = 'dbo'";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLongitudinalData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLongitudinal = new DataTable();

                DataSet seaOrPort = new DataSet();
                cmd = "SELECT [Sea_1_Port_0] from [tblMaster_Config_Addi]";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                seaOrPort = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable ds = new DataTable();
                ds = seaOrPort.Tables[0];
                int gg = 3;
                if (ds.Rows.Count > 0)
                {
                    gg = Convert.ToInt16(ds.Rows[0][0]);
                }
                DataSet dsLogitudinalNew = new DataSet();
                if (gg == 1)
                { cmd = "SELECT Max_BM_Sea,[Min_BM_Sea],[Max_SF_Sea], [Min_SF_Sea] from [tbl_SimulationMode_SFAndBM_Permissible_Graph] "; }
                else { cmd = "SELECT [Max_BM_Port],[Min_BM_Port],[Max_SF_Port], [Min_SF_Port] from [tbl_SimulationMode_SFAndBM_Permissible_Graph] "; }
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLogitudinalNew = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLogitudinalNew = dsLogitudinalNew.Tables[0];

                if (dsLongitudinalData.Tables.Count > 0)
                {
                    if (dsLongitudinalData.Tables[0].Rows.Count > 0)
                    {
                        dtLongitudinal = dsLongitudinalData.Tables[0];
                        foreach (DataRow dr in dtLongitudinal.Rows)
                        {
                            foreach (DataColumn dc in dtLongitudinal.Columns)
                            {
                                if ((dr[dc] == DBNull.Value))
                                {
                                    dr[dc] = 0;

                                }
                            }
                        }
                    }
                    else
                    {
                        zedGraphLongitudinal.GraphPane.CurveList.Clear();
                        zedGraphLongitudinal.GraphPane.GraphObjList.Clear();
                        zedGraphLongitudinal.Refresh();
                    }
                }
                else
                {
                    zedGraphLongitudinal.GraphPane.CurveList.Clear();
                    zedGraphLongitudinal.GraphPane.GraphObjList.Clear();
                    zedGraphLongitudinal.Refresh();
                }

                DataSet dsLongitudinalFrame = new DataSet();
                command = Models.DAL.clsDBUtilityMethods.GetCommand();
                Err = "";
                cmd = "SELECT [Distance], [Frame],[SF],[SF_Percentage_Diff_at_Sea],[BM],[BM_Percentage_Diff_at_Sea],[Status],[SF_Percentage_Diff_at_Port],[BM_Percentage_Diff_at_Port] from [tbl_SimulationMode_SFAndBM_New] ";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLongitudinalFrame = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLongitudinalFrame = new DataTable();
                dtLongitudinalFrame = dsLongitudinalFrame.Tables[0];
                DataTable dtfinal = dtLongitudinalFrame.Clone();
                foreach (DataRow dr in dtLongitudinalFrame.Rows)
                {
                    dtfinal.Rows.Add(dr.ItemArray);
                }
                dtfinal.Columns.Remove("Status");
                dtfinal.Columns.Add("Status", typeof(string));
                for (int i = 0; i < dtLongitudinalFrame.Rows.Count; i++)
                {
                    if (dtLongitudinalFrame.Rows[i]["Status"].ToString() == "1")
                    {
                        dtfinal.Rows[i]["Status"] = "OK";
                    }
                    else
                    {
                        dtfinal.Rows[i]["Status"] = "NOT OK";
                        lblLongitudinalStatus.Content = "NOT OK";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.Red;
                    }
                }
                dtfinal.Columns["Status"].ReadOnly = true;

                for (int i = 0; i < dtfinal.Rows.Count; i++)
                { dtfinal.Rows[i]["Frame"] = Math.Round(Convert.ToDecimal(dtfinal.Rows[i]["Frame"])); 
                }

                dgLongitudinal.ItemsSource = dtfinal.DefaultView;



                foreach (DataColumn dcLongitudinal in dtLongitudinal.Columns)
                {
                    foreach (DataRow drLongitudinal in dtLongitudinal.Rows)
                    {
                        totalRowLongitudinal = dtLongitudinal.Rows.Count;
                        x1 = new double[totalRowLongitudinal];
                        y1 = new double[totalRowLongitudinal];
                        y2 = new double[totalRowLongitudinal];

                        DataColumn colx1 = dtLongitudinal.Columns[0];
                        DataColumn coly1 = dtLongitudinal.Columns[1];
                        DataColumn coly2 = dtLongitudinal.Columns[2];

                        for (int indexbouyancy = 0; indexbouyancy < dtLongitudinal.Rows.Count; indexbouyancy++)
                        {
                            x1[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[0]);
                            y1[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[1]);
                            y2[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[2]);

                        }
                    }
                }

                foreach (DataColumn dcLongitudinalNew in dtLogitudinalNew.Columns)
                {
                    foreach (DataRow drLongitudinalNew in dtLogitudinalNew.Rows)
                    {
                        int totalRowLongitudinalNew = dtLongitudinal.Rows.Count;
                        y3 = new double[totalRowLongitudinalNew];
                        y4 = new double[totalRowLongitudinalNew];
                        y5 = new double[totalRowLongitudinalNew];
                        y6 = new double[totalRowLongitudinalNew];

                        DataColumn colx1 = dtLogitudinalNew.Columns[0];
                        DataColumn coly1 = dtLogitudinalNew.Columns[1];
                        DataColumn coly2 = dtLogitudinalNew.Columns[2];
                        DataColumn coly3 = dtLogitudinalNew.Columns[3];

                        for (int indexbouyancy = 0; indexbouyancy < dtLongitudinal.Rows.Count; indexbouyancy++)
                        {
                            y3[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[0]);
                            y4[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[1]);
                            y5[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[2]);
                            y6[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[3]);

                        }
                    }
                }

                //................changees@250116 2:41.....
                GraphPane myPane7 = zedGraphLongitudinal.GraphPane;
                myPane7.Title.Text = "Longitudinal Strength Curve";
                myPane7.XAxis.Title.Text = "FRAMES";
                myPane7.XAxis.Scale.Min = 0;
                myPane7.XAxis.Scale.Max = 200;
                // Make up some data points based on the Sine function
                PointPairList vList = new PointPairList();
                PointPairList aList = new PointPairList();
                PointPairList bmMaxList = new PointPairList();
                PointPairList bmMinList = new PointPairList();
                PointPairList sfMaxList = new PointPairList();
                PointPairList sfMinList = new PointPairList();
                aList.Add(x1, y1);
                vList.Add(x1, y2);
                bmMaxList.Add(x1, y3);
                bmMinList.Add(x1, y4);
                sfMaxList.Add(x1, y5);
                sfMinList.Add(x1, y6);

                zedGraphLongitudinal.GraphPane.CurveList.Clear();
                zedGraphLongitudinal.GraphPane.GraphObjList.Clear();

                LineItem myCurve1 = myPane7.AddCurve("Shear Force", aList, System.Drawing.Color.Blue, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.Line.Width = 1.8f;
                myCurve1 = myPane7.AddCurve("Bending Moment", vList, System.Drawing.Color.Red, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 1.8f;
                myCurve1 = myPane7.AddCurve("Permissible  BM", bmMaxList, System.Drawing.Color.Pink, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.8f;
                myCurve1 = myPane7.AddCurve("Permissible  SF", sfMaxList, System.Drawing.Color.Green, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                //myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.5f;
                myCurve1 = myPane7.AddCurve("Permissible  BM", bmMinList, System.Drawing.Color.Pink, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.8f;
                myCurve1 = myPane7.AddCurve("Permissible  SF", sfMinList, System.Drawing.Color.Green, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.Line.Width = 2.5f;

                myPane7.XAxis.MajorGrid.IsVisible = true;
                myPane7.YAxis.Title.Text = "Shear Force (T)";
                //myPane7.Y2Axis.Title.Text = "Net Load (T/m)";
                myPane7.YAxis.AxisGap = 0.2f;
                myPane7.YAxis.Title.FontSpec.Size = 15f;
                myPane7.YAxis.Scale.FontSpec.Size = 15f;
                myPane7.Y2Axis.Title.FontSpec.Size = 15f;
                myPane7.Y2Axis.Scale.FontSpec.Size = 15f;
                myPane7.XAxis.Title.FontSpec.Size = 15f;
                myPane7.XAxis.Scale.FontSpec.Size = 15f;
                // Make the Y axis scale BLue
                myPane7.YAxis.Scale.FontSpec.FontColor = System.Drawing.Color.Blue;
                myPane7.YAxis.Title.FontSpec.FontColor = System.Drawing.Color.Blue;
                // turn off the opposite tics so the Y tics don't show up on the Y2 axis
                myPane7.YAxis.MajorTic.IsOpposite = false;
                myPane7.YAxis.MinorTic.IsOpposite = false;
                // Don't display the Y zero line
                myPane7.YAxis.MajorGrid.IsZeroLine = false;
                // Align the Y axis labels so they are flush to the axis
                myPane7.YAxis.Scale.Align = AlignP.Inside;

                // myPane7.YAxis.Scale.Max = Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_SF"])) + 100;
                myPane7.YAxis.Scale.Max = 6000;
                // myPane7.YAxis.Scale.Min = -Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_SF"]))-100;
                myPane7.YAxis.Scale.Min = -6000;

                myPane7.Y2Axis.Title.Text = "Bending Moment(T-m)";
                //myPane7.YAxis.Scale.Max = 150;
                //myPane7.YAxis.Scale.Min = -150;
                // Enable the Y2 axis display
                myPane7.Y2Axis.IsVisible = true;
                // Make the Y2 axis scale blue
                myPane7.Y2Axis.Scale.FontSpec.FontColor = System.Drawing.Color.Red;
                myPane7.Y2Axis.Title.FontSpec.FontColor = System.Drawing.Color.Red;
                // turn off the opposite tics so the Y2 tics don't show up on the Y
                //axis
                myPane7.Y2Axis.MajorTic.IsOpposite = false;
                myPane7.Y2Axis.MinorTic.IsOpposite = false;
                // Display the Y2 axis grid lines
                myPane7.Y2Axis.MajorGrid.IsVisible = true;
                // Align the Y2 axis labels so they are flush to the axis
                myPane7.Y2Axis.Scale.Align = AlignP.Inside;
                //myPane7.Y2Axis.Scale.Min = -Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_BM"]))-1000;
                //myPane7.Y2Axis.Scale.Max = Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_BM"])) + 1000;

                myPane7.Y2Axis.Scale.Max = 115000;
                myPane7.Y2Axis.Scale.Min = -88430;

                myPane7.Legend.FontSpec.Size = 15f;
                zedGraphLongitudinal.ZoomButtons = MouseButtons.None;
                zedGraphLongitudinal.ZoomButtons = MouseButtons.None;
                zedGraphLongitudinal.ZoomStepFraction = 0;

                zedGraphLongitudinal.AxisChange();
                zedGraphLongitudinal.Invalidate();

                using (var bmp = new System.Drawing.Bitmap(zedGraphLongitudinal.Width, zedGraphLongitudinal.Height))
                {
                    zedGraphLongitudinal.DrawToBitmap(bmp, new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height));
                    bmp.Save(System.Windows.Forms.Application.StartupPath + "\\Images\\Longitudinal_curve.png");
                }
            }
            catch (Exception ex)
            {
               // System.Windows.MessageBox.Show(ex.Message.ToString());
            }
        }

        private void DrawLongitudinalGraphReal()
        {
            try
            {  ////////////////////////longitudinal data/////////////
                DataSet dsLongitudinalData = new DataSet();
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                string cmd = "SELECT [Distance],[SF],[BM] from [tbl_RealMode_SFAndBM_New] where [User] = 'dbo'";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLongitudinalData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLongitudinal = new DataTable();

                DataSet seaOrPort = new DataSet();
                cmd = "SELECT [Sea_1_Port_0] from [tblMaster_Config_Addi]";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                seaOrPort = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable ds = new DataTable();
                ds = seaOrPort.Tables[0];
                int gg = 3;
                if (ds.Rows.Count > 0)
                {
                    gg = Convert.ToInt16(ds.Rows[0][0]);
                }
                DataSet dsLogitudinalNew = new DataSet();
                if (gg == 1)
                { cmd = "SELECT Max_BM_Sea,[Min_BM_Sea],[Max_SF_Sea], [Min_SF_Sea] from [tbl_RealMode_SFAndBM_Permissible_Graph] "; }
                else { cmd = "SELECT [Max_BM_Port],[Min_BM_Port],[Max_SF_Port], [Min_SF_Port] from [tbl_RealMode_SFAndBM_Permissible_Graph] "; }
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLogitudinalNew = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLogitudinalNew = dsLogitudinalNew.Tables[0];

                if (dsLongitudinalData.Tables.Count > 0)
                {
                    if (dsLongitudinalData.Tables[0].Rows.Count > 0)
                    {
                        dtLongitudinal = dsLongitudinalData.Tables[0];
                        foreach (DataRow dr in dtLongitudinal.Rows)
                        {
                            foreach (DataColumn dc in dtLongitudinal.Columns)
                            {
                                if ((dr[dc] == DBNull.Value))
                                {
                                    dr[dc] = 0;

                                }
                            }
                        }
                    }
                    else
                    {
                        zedGraphLongitudinal.GraphPane.CurveList.Clear();
                        zedGraphLongitudinal.GraphPane.GraphObjList.Clear();
                        zedGraphLongitudinal.Refresh();
                    }
                }
                else
                {
                    zedGraphLongitudinal.GraphPane.CurveList.Clear();
                    zedGraphLongitudinal.GraphPane.GraphObjList.Clear();
                    zedGraphLongitudinal.Refresh();
                }

                DataSet dsLongitudinalFrame = new DataSet();
                command = Models.DAL.clsDBUtilityMethods.GetCommand();
                Err = "";
                cmd = "SELECT [Frame],[Distance],[SF],[SF_Percentage_Diff],[BM],[BM_Percentage_Diff],[Status] from [tbl_RealMode_SFAndBM_New] ";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsLongitudinalFrame = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtLongitudinalFrame = new DataTable();
                dtLongitudinalFrame = dsLongitudinalFrame.Tables[0];
                DataTable dtfinal = dtLongitudinalFrame.Clone();
                foreach (DataRow dr in dtLongitudinalFrame.Rows)
                {
                    dtfinal.Rows.Add(dr.ItemArray);
                }
                dtfinal.Columns.Remove("Status");
                dtfinal.Columns.Add("Status", typeof(string));
                for (int i = 0; i < dtLongitudinalFrame.Rows.Count; i++)
                {
                    if (dtLongitudinalFrame.Rows[i]["Status"].ToString() == "1")
                    {
                        dtfinal.Rows[i]["Status"] = "OK";
                    }
                    else
                    {
                        dtfinal.Rows[i]["Status"] = "NOT OK";
                        lblLongitudinalStatus.Content = "NOT OK";
                        lblLongitudinalStatus.Background = System.Windows.Media.Brushes.Red;
                    }
                }
                dtfinal.Columns["Status"].ReadOnly = true;

                for (int i = 0; i < dtfinal.Rows.Count; i++)
                { dtfinal.Rows[i]["Distance"] = Math.Round(Convert.ToDecimal(dtfinal.Rows[i]["Distance"])); }


                dgLongitudinal.ItemsSource = dtfinal.DefaultView;



                foreach (DataColumn dcLongitudinal in dtLongitudinal.Columns)
                {
                    foreach (DataRow drLongitudinal in dtLongitudinal.Rows)
                    {
                        totalRowLongitudinal = dtLongitudinal.Rows.Count;
                        x1 = new double[totalRowLongitudinal];
                        y1 = new double[totalRowLongitudinal];
                        y2 = new double[totalRowLongitudinal];

                        DataColumn colx1 = dtLongitudinal.Columns[0];
                        DataColumn coly1 = dtLongitudinal.Columns[1];
                        DataColumn coly2 = dtLongitudinal.Columns[2];

                        for (int indexbouyancy = 0; indexbouyancy < dtLongitudinal.Rows.Count; indexbouyancy++)
                        {
                            x1[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[0]);
                            y1[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[1]);
                            y2[indexbouyancy] = (float)Convert.ToDouble(dtLongitudinal.Rows[indexbouyancy].ItemArray[2]);

                        }
                    }
                }

                foreach (DataColumn dcLongitudinalNew in dtLogitudinalNew.Columns)
                {
                    foreach (DataRow drLongitudinalNew in dtLogitudinalNew.Rows)
                    {
                        int totalRowLongitudinalNew = dtLongitudinal.Rows.Count;
                        y3 = new double[totalRowLongitudinalNew];
                        y4 = new double[totalRowLongitudinalNew];
                        y5 = new double[totalRowLongitudinalNew];
                        y6 = new double[totalRowLongitudinalNew];

                        DataColumn colx1 = dtLogitudinalNew.Columns[0];
                        DataColumn coly1 = dtLogitudinalNew.Columns[1];
                        DataColumn coly2 = dtLogitudinalNew.Columns[2];
                        DataColumn coly3 = dtLogitudinalNew.Columns[3];

                        for (int indexbouyancy = 0; indexbouyancy < dtLongitudinal.Rows.Count; indexbouyancy++)
                        {
                            y3[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[0]);
                            y4[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[1]);
                            y5[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[2]);
                            y6[indexbouyancy] = (float)Convert.ToDouble(dtLogitudinalNew.Rows[indexbouyancy].ItemArray[3]);

                        }
                    }
                }

                //................changees@250116 2:41.....
                GraphPane myPane7 = zedGraphLongitudinal.GraphPane;
                myPane7.Title.Text = "Longitudinal Strength Curve";
                myPane7.XAxis.Title.Text = "Distance From Origin (m)";
                myPane7.XAxis.Scale.Min = -90;
                myPane7.XAxis.Scale.Max = 90;
                // Make up some data points based on the Sine function
                PointPairList vList = new PointPairList();
                PointPairList aList = new PointPairList();
                PointPairList bmMaxList = new PointPairList();
                PointPairList bmMinList = new PointPairList();
                PointPairList sfMaxList = new PointPairList();
                PointPairList sfMinList = new PointPairList();
                aList.Add(x1, y1);
                vList.Add(x1, y2);
                bmMaxList.Add(x1, y3);
                bmMinList.Add(x1, y4);
                sfMaxList.Add(x1, y5);
                sfMinList.Add(x1, y6);

                zedGraphLongitudinal.GraphPane.CurveList.Clear();
                zedGraphLongitudinal.GraphPane.GraphObjList.Clear();

                LineItem myCurve1 = myPane7.AddCurve("Shear Force", aList, System.Drawing.Color.Blue, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.Line.Width = 1.8f;
                myCurve1 = myPane7.AddCurve("Bending Moment", vList, System.Drawing.Color.Red, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 1.8f;
                myCurve1 = myPane7.AddCurve("Permissible  BM", bmMaxList, System.Drawing.Color.Pink, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.8f;
                myCurve1 = myPane7.AddCurve("Permissible  SF", sfMaxList, System.Drawing.Color.Green, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                //myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.5f;
                myCurve1 = myPane7.AddCurve("Permissible  BM", bmMinList, System.Drawing.Color.Pink, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.IsY2Axis = true;
                myCurve1.Line.Width = 2.8f;
                myCurve1 = myPane7.AddCurve("Permissible  SF", sfMinList, System.Drawing.Color.Green, SymbolType.None);
                myCurve1.Line.Style = System.Drawing.Drawing2D.DashStyle.Solid;
                myCurve1.Line.Width = 2.5f;

                myPane7.XAxis.MajorGrid.IsVisible = true;
                myPane7.YAxis.Title.Text = "Shear Force (T)";
                //myPane7.Y2Axis.Title.Text = "Net Load (T/m)";
                myPane7.YAxis.AxisGap = 0.2f;
                myPane7.YAxis.Title.FontSpec.Size = 15f;
                myPane7.YAxis.Scale.FontSpec.Size = 15f;
                myPane7.Y2Axis.Title.FontSpec.Size = 15f;
                myPane7.Y2Axis.Scale.FontSpec.Size = 15f;
                myPane7.XAxis.Title.FontSpec.Size = 15f;
                myPane7.XAxis.Scale.FontSpec.Size = 15f;
                // Make the Y axis scale BLue
                myPane7.YAxis.Scale.FontSpec.FontColor = System.Drawing.Color.Blue;
                myPane7.YAxis.Title.FontSpec.FontColor = System.Drawing.Color.Blue;
                // turn off the opposite tics so the Y tics don't show up on the Y2 axis
                myPane7.YAxis.MajorTic.IsOpposite = false;
                myPane7.YAxis.MinorTic.IsOpposite = false;
                // Don't display the Y zero line
                myPane7.YAxis.MajorGrid.IsZeroLine = false;
                // Align the Y axis labels so they are flush to the axis
                myPane7.YAxis.Scale.Align = AlignP.Inside;

                // myPane7.YAxis.Scale.Max = Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_SF"])) + 100;
                myPane7.YAxis.Scale.Max = 6000;
                // myPane7.YAxis.Scale.Min = -Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_SF"]))-100;
                myPane7.YAxis.Scale.Min = -6000;

                myPane7.Y2Axis.Title.Text = "Bending Moment(T-m)";
                //myPane7.YAxis.Scale.Max = 150;
                //myPane7.YAxis.Scale.Min = -150;
                // Enable the Y2 axis display
                myPane7.Y2Axis.IsVisible = true;
                // Make the Y2 axis scale blue
                myPane7.Y2Axis.Scale.FontSpec.FontColor = System.Drawing.Color.Red;
                myPane7.Y2Axis.Title.FontSpec.FontColor = System.Drawing.Color.Red;
                // turn off the opposite tics so the Y2 tics don't show up on the Y
                //axis
                myPane7.Y2Axis.MajorTic.IsOpposite = false;
                myPane7.Y2Axis.MinorTic.IsOpposite = false;
                // Display the Y2 axis grid lines
                myPane7.Y2Axis.MajorGrid.IsVisible = true;
                // Align the Y2 axis labels so they are flush to the axis
                myPane7.Y2Axis.Scale.Align = AlignP.Inside;
                //myPane7.Y2Axis.Scale.Min = -Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_BM"]))-1000;
                //myPane7.Y2Axis.Scale.Max = Math.Abs(Convert.ToDouble(Models.clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_BM"])) + 1000;

                myPane7.Y2Axis.Scale.Max = 115000;
                myPane7.Y2Axis.Scale.Min = -88430;

                myPane7.Legend.FontSpec.Size = 15f;
                zedGraphLongitudinal.ZoomButtons = MouseButtons.None;
                zedGraphLongitudinal.ZoomButtons = MouseButtons.None;
                zedGraphLongitudinal.ZoomStepFraction = 0;

                zedGraphLongitudinal.AxisChange();
                zedGraphLongitudinal.Invalidate();

                using (var bmp = new System.Drawing.Bitmap(zedGraphLongitudinal.Width, zedGraphLongitudinal.Height))
                {
                    zedGraphLongitudinal.DrawToBitmap(bmp, new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height));
                    bmp.Save(System.Windows.Forms.Application.StartupPath + "\\Images\\Longitudinal_curve.png");
                }
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.Message.ToString());
            }
        }
        private void StabilityCriteria()
        {
            try
            {
                DataTable dtfinal = new DataTable();
                //Flooding Point Start....................
                //dgFloodingPoint.ItemsSource = clsGlobVar.FloodingPoint_Damage.DefaultView;

                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    dtfinal = clsGlobVar.dtSimulationStabilityCriteriaIntact.Clone();
                    foreach (DataRow dr in clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";
                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;

                }
                else
                {
                    dtfinal = clsGlobVar.dtSimulationStabilityCriteriaDamage.Clone();
                    foreach (DataRow dr in clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";

                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;
                }


                dgStabilityCriteria.ItemsSource = dtfinal.DefaultView;
            }
            catch
            {
            }
        }
       

        private void StabilityCriteriaReal()
        {
            try
            {
                DataTable dtfinal = new DataTable();
                //Flooding Point Start....................
                //dgFloodingPoint.ItemsSource = clsGlobVar.FloodingPoint_Damage.DefaultView;

                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    dtfinal = clsGlobVar.dtRealStabilityCriteriaIntact.Clone();
                    foreach (DataRow dr in clsGlobVar.dtRealStabilityCriteriaIntact.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtRealStabilityCriteriaIntact.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtRealStabilityCriteriaIntact.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";
                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;

                }
                else
                {
                    dtfinal = clsGlobVar.dtRealStabilityCriteriaDamage.Clone();
                    foreach (DataRow dr in clsGlobVar.dtRealStabilityCriteriaDamage.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtRealStabilityCriteriaDamage.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtRealStabilityCriteriaDamage.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";

                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;
                }


                dgStabilityCriteria.ItemsSource = dtfinal.DefaultView;
            }
            catch
            {
            }
        }

        private void MaxVolume()
        {
            try
            {

                maxVolume = new Dictionary<int, decimal>();
                maxVolume.Add(1, 313.014m);
                maxVolume.Add(2, 471.718m);
                maxVolume.Add(3, 471.708m);
                maxVolume.Add(4, 305.795m);
                maxVolume.Add(5, 305.802m);
                maxVolume.Add(6, 230.499m);
                maxVolume.Add(7, 230.522m);
                maxVolume.Add(8, 490.567m);
                maxVolume.Add(9, 490.542m);
                maxVolume.Add(10, 467.403m);
                maxVolume.Add(11, 467.405m);
                maxVolume.Add(12, 92.703m);
                maxVolume.Add(13, 118.645m);
                maxVolume.Add(14, 118.647m);
                maxVolume.Add(15, 65.258m);
                maxVolume.Add(16, 65.263m);
                maxVolume.Add(17, 198.971m);
                maxVolume.Add(18, 198.965m);
                maxVolume.Add(19, 227.312m);
                maxVolume.Add(20, 227.312m);
                maxVolume.Add(21, 102.590m);
                maxVolume.Add(22, 102.586m);
                maxVolume.Add(23, 62.399m);
                maxVolume.Add(24, 62.407m);
                maxVolume.Add(25, 15.228m);
                maxVolume.Add(26, 0.924m);
                maxVolume.Add(27, 16.030m);
                maxVolume.Add(28, 14.077m);
                maxVolume.Add(29, 14.075m);
                maxVolume.Add(30, 7.555m);
                maxVolume.Add(31, 8.688m);
                maxVolume.Add(32, 15.013m);
                maxVolume.Add(33, 8.176m);
                //maxVolume.Add(34, 162.114m);
                //maxVolume.Add(35, 162.114m);
                //maxVolume.Add(36, 66.165m);
                //maxVolume.Add(37, 68.778m);
                //maxVolume.Add(38, 16.632m);
                //maxVolume.Add(39, 16.632m);
                //maxVolume.Add(40, 15.664m);
                //maxVolume.Add(41, 42.432m);
                //maxVolume.Add(42, 16.973m);
                //maxVolume.Add(43, 16.973m);
                //maxVolume.Add(44, 13.779m);
                //maxVolume.Add(45, 28.583m);
                //maxVolume.Add(46, 13.040m);
                //maxVolume.Add(47, 29.405m);
                //maxVolume.Add(48, 4.436m);
                //maxVolume.Add(49, 18.286m);
                //maxVolume.Add(50, 8584.768m);
                //maxVolume.Add(51, 1257.650m);
                //maxVolume.Add(52, 615.3m);
                //maxVolume.Add(53, 867.463m);
            }

            catch
            {
            }
        }

        private void DamageCases()
        {
            _DamageCases[0, 0] = Convert.ToString(1);
            _DamageCases[1, 0] = Convert.ToString(1);
        }
        private void LebelUpdate()
        {
            try
            {
                /////Front Values
                flagDraft++;
                DataTable dtHydrostatics = new DataTable();
                dtHydrostatics = clsGlobVar.dtSimulationHydrostatics;
                lblDisplacement.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Displacement"]), 2).ToString();
                lblDeadWeight.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Deadweight"]), 2).ToString();
                lblTrim.Content = Math.Abs(Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2)).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2) > 0)
                {
                    lblTrimStatus.Content = "Trim (AFT)";
                }
                else
                {
                    lblTrimStatus.Content = "Trim (FWD)";
                }
                lblHeel.Content = Math.Abs(Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2)).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2) < 0)
                {
                    lblHeelStatus.Content = "Heel (PORT)";
                }
                else
                {
                    lblHeelStatus.Content = "Heel (STBD)";
                }
                lblPropeller.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Prop_Immersion"]), 2).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Prop_Immersion"]), 2) < 50)
                {
                    lblPropeller.Foreground = System.Windows.Media.Brushes.Red;
                }
                else
                {
                    lblPropeller.Background = System.Windows.Media.Brushes.Transparent;
                    lblPropeller.Foreground = System.Windows.Media.Brushes.Black;
                }
                lblGMt.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["GMT"]), 2).ToString();

                lblDraftAP.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_AP"]), 2).ToString();
                lblDraftFP.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_FP"]), 2).ToString();
                DraftsMid = Math.Round(Convert.ToDouble(dtHydrostatics.Rows[0]["Draft_MID"]), 3);
                DraftsFP = Math.Round(Convert.ToDouble(dtHydrostatics.Rows[0]["Draft_FP"]), 3);

                if ((DraftsMid > 12.8) && (flagDraft > 1) && (lblCalculationMethod.Content.ToString() == "Intact"))
                {
                    lblDraftMid.Content = DraftsMid;
                    lblDraftMid.Foreground = System.Windows.Media.Brushes.Red;
                    System.Windows.MessageBox.Show("Draft Exceeds Design Drafts");
                }
                else
                {
                    lblDraftMid.Content = DraftsMid;
                    lblDraftMid.Foreground = System.Windows.Media.Brushes.Black;
                }


                //lblDraftFwdMark.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_FWD_MARK"]), 2).ToString();

                //Inside TabControl
                lblHydDisplacement.Content = dtHydrostatics.Rows[0]["Displacement"].ToString();
                lblHydTrim.Content = Math.Abs(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"])).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2) > 0)
                {
                    lblHydroTrimStatus.Content = "Trim (AFT)";
                }
                else
                {
                    lblHydroTrimStatus.Content = "Trim (FWD)";

                }
                lblHydHeel.Content = Math.Abs(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"])).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2) < 0)
                {
                    lblHydroHeelStatus.Content = "Heel (PORT)";
                }
                else
                {
                    lblHydroHeelStatus.Content = "Heel (STBD)";
                }
                lblHydKGSolid.Content = dtHydrostatics.Rows[0]["KG(Solid)"].ToString();
                lblHydKGLiquid.Content = dtHydrostatics.Rows[0]["KG(Fluid)"].ToString();
                lblHydGMT.Content = dtHydrostatics.Rows[0]["GMT"].ToString();
                lblHydFSC.Content = dtHydrostatics.Rows[0]["FSC"].ToString();
                //added on march 2020
                lblTCB.Content = dtHydrostatics.Rows[0]["TCB"].ToString();
                lblLCB.Content = dtHydrostatics.Rows[0]["LCB"].ToString();
                ///
                lblHydLCG.Content = dtHydrostatics.Rows[0]["LCG"].ToString();
                lblHydLCF.Content = dtHydrostatics.Rows[0]["LCF"].ToString();
                lblHydTPC.Content = dtHydrostatics.Rows[0]["TPC"].ToString();
                lblHydMCT.Content = dtHydrostatics.Rows[0]["MCT"].ToString();
                lblHydRollingPeriod.Content = dtHydrostatics.Rows[0]["Rolling_Period"].ToString();
                //lblTrimAngle.Content = dtHydrostatics.Rows[0]["TrimAngle"].ToString();
                lblHydDraftAP.Content = dtHydrostatics.Rows[0]["Draft_AP"].ToString();
                lblHydDraftFP.Content = dtHydrostatics.Rows[0]["Draft_FP"].ToString();
                lblHydDraftMidship.Content = dtHydrostatics.Rows[0]["Draft_MID"].ToString();
                lblHydDraftAftMark.Content = dtHydrostatics.Rows[0]["Draft_AFT_MARK"].ToString();
                lblHydDraftForwardMark.Content = dtHydrostatics.Rows[0]["Draft_FWD_MARK"].ToString();
                lblHydDraftMidship.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_MID"]), 2).ToString();
                lblMeandraft.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["MeanDraft"]), 2).ToString();

                //Dead Weight Details
                lblcargo.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[0].Rows[0][0].ToString();
                lblBallastWater.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[1].Rows[0][0].ToString();
                lblFuelOil.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[2].Rows[0][0].ToString();
                lblFreshWater.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[3].Rows[0][0].ToString();
                lblDieselOil.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[4].Rows[0][0].ToString();
                lblMisc.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[5].Rows[0][0].ToString();
                //lblLubeOil.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[5].Rows[0][0].ToString();
                //lblMisc.Content = clsGlobVar.dsSimulationDeadWeightDetails1.Tables[0].Rows[0][0].ToString();

                lblFixedLoads.Content = clsGlobVar.dsSimulationDeadWeightDetails.Tables[6].Rows[0][0].ToString();

                //lblcargovol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[0].Rows[0][0].ToString();
                //lblBallastWatervol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[1].Rows[0][0].ToString();
                //lblFuelOilvol.Content =clsGlobVar.dsSimulationDWVolumes.Tables[2].Rows[0][0].ToString();
                //lblFreshWatervol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[3].Rows[0][0].ToString();
                //lblDieselOilvol.Content=clsGlobVar.dsSimulationDWVolumes.Tables[4].Rows[0][0].ToString();
                //lblLubeOilvol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[5].Rows[0][0].ToString();
                //lblMiscvol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[6].Rows[0][0].ToString();
               // lblFixedLoadsvol.Content = clsGlobVar.dsSimulationDWVolumes.Tables[7].Rows[0][0].ToString();


                //lblcargoNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[0].Rows[0][0].ToString();
                //lblBallastWaterNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[1].Rows[0][0].ToString();
                //lblFuelOilNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[2].Rows[0][0].ToString();
                //lblFreshWaterNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[3].Rows[0][0].ToString();
                //lblDeiselNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[4].Rows[0][0].ToString();
                //lblLubeOilNetvol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[5].Rows[0][0].ToString();
                //lblMiscTankNetVol.Content = clsGlobVar.dsSimulationDWVolumesCorretion.Tables[6].Rows[0][0].ToString();


                lblStatus.Content = clsGlobVar.dtSimulationStabilitySummary.Rows[0][0].ToString();
                if (lblStatus.Content.ToString() == "OK")
                {
                    lblStatus.Background = System.Windows.Media.Brushes.LimeGreen;
                    //lblStatus.HorizontalContentAlignment = System.Windows.HorizontalAlignment.Center;
                }
                else
                {
                    lblStatus.Background = System.Windows.Media.Brushes.Red;
                }

                if (DamageAll > 0)
                {
                    // int jjk = 0;

                    for (int jj = jjk; jj < jjk + 1; jj++)
                    {
                        _statusOKnNotOK[jj, 0] = Convert.ToString(jj + 1);
                        _statusOKnNotOK[jj, 1] = clsGlobVar.dtSimulationStabilitySummary.Rows[0][0].ToString();
                    }
                    jjk++;
                    if (DamageAll >= 36) { jjk = 0; }
                }

                /////SF and BM Maximum Values
                lblBMMaxValue.Content = clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_BM"].ToString();
                lblSFMaxValue.Content = clsGlobVar.dtSimulationSFBMMax.Rows[0]["Max_SF"].ToString();

                lblBMMaxDistance.Content = Math.Round(Convert.ToDecimal(clsGlobVar.dtSimulationSFBMMax.Rows[0]["Distance_BM"].ToString()));
                lblSFMaxDistance.Content = Math.Round(Convert.ToDecimal(clsGlobVar.dtSimulationSFBMMax.Rows[0]["Distance_SF"].ToString()));
            }
            catch
            {
            }
        }

        private void LebelUpdateReal()
        {
            try
            {
                /////Front Values
                flagDraft++;
                DataTable dtHydrostatics = new DataTable();
                dtHydrostatics = clsGlobVar.dtRealHydrostatics;
                lblDisplacement.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Displacement"]), 2).ToString();
                lblDeadWeight.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Deadweight"]), 2).ToString();
                lblTrim.Content = Math.Abs(Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2)).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2) > 0)
                {
                    lblTrimStatus.Content = "Trim (AFT)";
                }
                else
                {
                    lblTrimStatus.Content = "Trim (FWD)";
                }
                lblHeel.Content = Math.Abs(Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2)).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2) < 0)
                {
                    lblHeelStatus.Content = "Heel (PORT)";
                }
                else
                {
                    lblHeelStatus.Content = "Heel (STBD)";
                }
                lblPropeller.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Prop_Immersion"]), 2).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Prop_Immersion"]), 2) < 50)
                {
                    lblPropeller.Foreground = System.Windows.Media.Brushes.Red;
                }
                else
                {
                    lblPropeller.Background = System.Windows.Media.Brushes.Transparent;
                    lblPropeller.Foreground = System.Windows.Media.Brushes.Black;
                }
                lblGMt.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["GMT"]), 2).ToString();

                lblDraftAP.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_AP"]), 2).ToString();
                lblDraftFP.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_FP"]), 2).ToString();
                DraftsMid = Math.Round(Convert.ToDouble(dtHydrostatics.Rows[0]["Draft_MID"]), 3);


                if ((DraftsMid > 12.8) && (flagDraft > 1) && (lblCalculationMethod.Content.ToString() == "Intact"))
                {
                    lblDraftMid.Content = DraftsMid;
                    lblDraftMid.Foreground = System.Windows.Media.Brushes.Red;
                    System.Windows.MessageBox.Show("Draft Exceeds Design Drafts");
                }
                else
                {
                    lblDraftMid.Content = DraftsMid;
                    lblDraftMid.Foreground = System.Windows.Media.Brushes.Black;
                }


                //lblDraftFwdMark.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_FWD_MARK"]), 2).ToString();

                //Inside TabControl
                lblHydDisplacement.Content = dtHydrostatics.Rows[0]["Displacement"].ToString();
                lblHydTrim.Content = Math.Abs(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"])).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["TRIM"]), 2) > 0)
                {
                    lblHydroTrimStatus.Content = "Trim (AFT)";
                }
                else
                {
                    lblHydroTrimStatus.Content = "Trim (FWD)";

                }
                lblHydHeel.Content = Math.Abs(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"])).ToString();
                if (Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Heel"]), 2) < 0)
                {
                    lblHydroHeelStatus.Content = "Heel (PORT)";
                }
                else
                {
                    lblHydroHeelStatus.Content = "Heel (STBD)";
                }
                lblHydKGSolid.Content = dtHydrostatics.Rows[0]["KG(Solid)"].ToString();
                lblHydKGLiquid.Content = dtHydrostatics.Rows[0]["KG(Fluid)"].ToString();
                lblHydGMT.Content = dtHydrostatics.Rows[0]["GMT"].ToString();
                lblHydFSC.Content = dtHydrostatics.Rows[0]["FSC"].ToString();
                //added on march 2020
                lblTCB.Content = dtHydrostatics.Rows[0]["TCB"].ToString();
                lblLCB.Content = dtHydrostatics.Rows[0]["LCB"].ToString();
                ///
                lblHydLCG.Content = dtHydrostatics.Rows[0]["LCG"].ToString();
                lblHydLCF.Content = dtHydrostatics.Rows[0]["LCF"].ToString();
                lblHydTPC.Content = dtHydrostatics.Rows[0]["TPC"].ToString();
                lblHydMCT.Content = dtHydrostatics.Rows[0]["MCT"].ToString();
                lblHydRollingPeriod.Content = dtHydrostatics.Rows[0]["Rolling_Period"].ToString();
                //lblTrimAngle.Content = dtHydrostatics.Rows[0]["TrimAngle"].ToString();
                lblHydDraftAP.Content = dtHydrostatics.Rows[0]["Draft_AP"].ToString();
                lblHydDraftFP.Content = dtHydrostatics.Rows[0]["Draft_FP"].ToString();
                lblHydDraftMidship.Content = dtHydrostatics.Rows[0]["Draft_MID"].ToString();
                lblHydDraftAftMark.Content = dtHydrostatics.Rows[0]["Draft_AFT_MARK"].ToString();
                lblHydDraftForwardMark.Content = dtHydrostatics.Rows[0]["Draft_FWD_MARK"].ToString();
                lblHydDraftMidship.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["Draft_MID"]), 2).ToString();
                lblMeandraft.Content = Math.Round(Convert.ToDecimal(dtHydrostatics.Rows[0]["MeanDraft"]), 2).ToString();

                //Dead Weight Details
                lblcargo.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[0].Rows[0][0].ToString();
                lblBallastWater.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[1].Rows[0][0].ToString();
                lblFuelOil.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[2].Rows[0][0].ToString();
                lblFreshWater.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[3].Rows[0][0].ToString();
                lblDieselOil.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[4].Rows[0][0].ToString();

                lblLubeOil.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[5].Rows[0][0].ToString();
                lblMisc.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[6].Rows[0][0].ToString();
                lblFixedLoads.Content = clsGlobVar.dsRealDeadWeightDetails.Tables[7].Rows[0][0].ToString();



                lblStatus.Content = clsGlobVar.dtRealStabilitySummary.Rows[0][0].ToString();
                if (lblStatus.Content.ToString() == "OK")
                {
                    lblStatus.Background = System.Windows.Media.Brushes.LimeGreen;
                    //lblStatus.HorizontalContentAlignment = System.Windows.HorizontalAlignment.Center;
                }
                else
                {
                    lblStatus.Background = System.Windows.Media.Brushes.Red;
                }

                if (DamageAll > 0)
                {
                    // int jjk = 0;

                    for (int jj = jjk; jj < jjk + 1; jj++)
                    {
                        _statusOKnNotOK[jj, 0] = Convert.ToString(jj + 1);
                        _statusOKnNotOK[jj, 1] = clsGlobVar.dtSimulationStabilitySummary.Rows[0][0].ToString();
                    }
                    jjk++;
                    if (DamageAll >= 36) { jjk = 0; }
                }

                /////SF and BM Maximum Values
                lblBMMaxValue.Content = clsGlobVar.dtRealSFBMMax.Rows[0]["Max_BM"].ToString();
                lblSFMaxValue.Content = clsGlobVar.dtRealSFBMMax.Rows[0]["Max_SF"].ToString();
                    
                lblBMMaxDistance.Content = Math.Round(Convert.ToDecimal(clsGlobVar.dtRealSFBMMax.Rows[0]["Distance_BM"].ToString()));
                lblSFMaxDistance.Content = Math.Round(Convert.ToDecimal(clsGlobVar.dtRealSFBMMax.Rows[0]["Distance_SF"].ToString()));
            }
            catch
            {
            }
        }
        #region PDFWriter
        static String ISO_Date()
        {
            return DateTime.Now.ToString("yyyy_MM_dd HH_mm_ss");
        }
        public void printToPdf()
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                Document doc = new Document(iTextSharp.text.PageSize.A4, 30, 30, 30, 20);

                if (DamageAll == 0)
                {

                    reportPath = System.Windows.Forms.Application.StartupPath + "\\Reports\\" + ISO_Date() + "_Report.pdf";
                    PdfWriter wri = PdfWriter.GetInstance(doc, new FileStream(reportPath, FileMode.Create));
                    doc.Open();//Open Document to write
                    wri.PageEvent = new pdfFormating();
                }

                else if (DamageAll != 0)
                {
                    reportPath = System.Windows.Forms.Application.StartupPath + "\\Reports\\AllDamageCases\\" + ISO_Date() + "_Report.pdf";
                    PdfWriter wri = PdfWriter.GetInstance(doc, new FileStream(reportPath, FileMode.Create));
                    doc.Open();//Open Document to write
                    wri.PageEvent = new pdfFormating();
                }
                if (DamageAll == 0 || DamageAll >= 1)
                {
                    iTextSharp.text.Paragraph projecttitl = new iTextSharp.text.Paragraph("    " + "Saushyant Stability: LoadMaster Report ", FontFactory.GetFont(FontFactory.TIMES, 10, iTextSharp.text.Font.BOLD));
                    projecttitl.Alignment = Element.ALIGN_CENTER;
                    doc.Add(projecttitl);
                    //var gray = new BaseColor(128, 128, 128);
                    iTextSharp.text.Paragraph _ProjectNameNVersion = new iTextSharp.text.Paragraph("Zebec LoadMaster, V-0", FontFactory.GetFont(FontFactory.TIMES, 8, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.GRAY));
                    _ProjectNameNVersion.Alignment = Element.ALIGN_RIGHT;
                    _ProjectNameNVersion.IndentationRight = 10;

                    doc.Add(_ProjectNameNVersion);

                    //string loadname = txtLoadingConditionName.ToString();
                    //string finalDamage = Damagecases.Split(':')[1];
                    if (clsGlobVar.loadingconname != "")
                    {
                        iTextSharp.text.Paragraph loadconname = new iTextSharp.text.Paragraph("    " + "Loading Condition :" + " " + clsGlobVar.loadingconname, FontFactory.GetFont(FontFactory.TIMES, 9, iTextSharp.text.Font.BOLD));
                        loadconname.Alignment = Element.ALIGN_CENTER;
                        doc.Add(loadconname);
                    }
                }
                if (lblCalculationMethod.Content.ToString() != "Intact")
                {
                    string Damagecases = txtLoadingConditionName.ToString();
                    string finalDamage = Damagecases.Split(':')[1];
                    iTextSharp.text.Paragraph DamageCase = new iTextSharp.text.Paragraph("Damage Case :" + " " + finalDamage, FontFactory.GetFont(FontFactory.TIMES, 11, iTextSharp.text.Font.BOLD));
                    DamageCase.Alignment = Element.ALIGN_CENTER;
                    doc.Add(DamageCase);
                }
                else
                {
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                }
                //...........StartOFLogo.........................................
                if (DamageAll == 0 || DamageAll == 1)
                {
                    //iTextSharp.text.Image LogoWatermark = iTextSharp.text.Image.GetInstance(System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\Images\\Watermark.jpg");
                    //iTextSharp.text.Image pic = iTextSharp.text.Image.GetInstance(LogoWatermark);
                    //pic.Alignment = Element.ALIGN_LEFT;
                    //pic.ScaleToFit(70, 50);
                    //doc.Add(pic);
                    //iTextSharp.text.Image logoMdl = iTextSharp.text.Image.GetInstance(System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\Images\\Client_Logo.PNG");
                    //iTextSharp.text.Image pic1 = iTextSharp.text.Image.GetInstance(logoMdl);
                    //pic1.Alignment = Element.ALIGN_RIGHT;
                    //pic1.ScaleToFit(70, 50);
                    //pic1.SetAbsolutePosition(485, 732);
                    //doc.Add(pic1); 
                }

                //if (DamageAll > 1)
                //{
                //    doc.Add(new iTextSharp.text.Paragraph("  "));
                //    doc.Add(new iTextSharp.text.Paragraph("  "));
                //}
                //ship drawing dwg
               // iTextSharp.text.Image imgCad = iTextSharp.text.Image.GetInstance(System.Windows.Forms.Application.StartupPath + "\\Images\\Img.bmp");
               // imgCad.Alignment = Element.ALIGN_CENTER;
               // //imgCad.SetAbsolutePosition(0, 650);
               //// imgCad.ScaleToFit(500, 130);
               // imgCad.ScaleToFit(700, 150);

              //end 

                //imgCad.ScaleAbsoluteHeight(150);
                //doc.Add(imgCad);27.11.22 commented for ship dwg 

                //if (DamageAll > 1)
                //{
                //    doc.Add(new iTextSharp.text.Paragraph("  "));
                //    doc.Add(new iTextSharp.text.Paragraph("  "));
                //}

                iTextSharp.text.Paragraph p3 = new iTextSharp.text.Paragraph("      Loading Summary", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // Loading Summary Table Name
                p3.Alignment = Element.ALIGN_CENTER;
                doc.Add(p3);
                doc.Add(new iTextSharp.text.Paragraph("  ", FontFactory.GetFont(FontFactory.TIMES, 2, iTextSharp.text.Font.BOLD)));


                //var blue = new BaseColor(0, 0, 255);

                iTextSharp.text.Font fntHeader = FontFactory.GetFont("Times New Roman", 7, iTextSharp.text.Color.BLUE);   //Header
                iTextSharp.text.Font fntBody = FontFactory.GetFont("Times New Roman", 6f);   // Body
                //..........StartofLoadingSummaryPart1..............................
                PdfPTable tblLoadingSummary = new PdfPTable(9);
                tblLoadingSummary.DefaultCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblLoadingSummary.WidthPercentage = 90;
                float[] widthsLoading = new float[] { 2.5f, 1.8f, 1.8f, 1.2f, 1.2f, 1.2f, 1.2f, 1.2f, 1.2f};      //in case nishant decide to incorporate again add 2nd and 3rd column as 1f  
                tblLoadingSummary.SetWidths(widthsLoading);
                tblLoadingSummary.HorizontalAlignment = Element.ALIGN_CENTER;
                //var orange = new BaseColor(255, 165, 0);
                iTextSharp.text.Font fntRedColor = FontFactory.GetFont("Times New Roman", 1, iTextSharp.text.Color.ORANGE);// Body

                PdfPCell tankName = new PdfPCell(new Phrase("Tank Name", fntHeader));
                tankName.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell tankStatus = new PdfPCell(new Phrase("Status", fntHeader));
                tankStatus.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell percentFull = new PdfPCell(new Phrase("Percent Fill", fntHeader));
                percentFull.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell Volume = new PdfPCell(new Phrase("Volume (cu.m)", fntHeader));
                Volume.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell sg = new PdfPCell(new Phrase("SG", fntHeader));
                sg.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell weight = new PdfPCell(new Phrase("Weight (T)", fntHeader));
                weight.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell lcg = new PdfPCell(new Phrase("LCG (m)", fntHeader));
                lcg.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell tcg = new PdfPCell(new Phrase("TCG (m)", fntHeader));
                tcg.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell vcg = new PdfPCell(new Phrase("VCG (m)", fntHeader));
                vcg.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell fsm = new PdfPCell(new Phrase("FSM  (T-m)", fntHeader));
                fsm.HorizontalAlignment = Element.ALIGN_CENTER;

                //PdfPCell Sounding = new PdfPCell(new Phrase("Sounding", fntHeader));
                //Sounding.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell Ullage = new PdfPCell(new Phrase("Ullage", fntHeader));
                //Ullage.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell Den@15Deg = new PdfPCell(new Phrase("Den@15Deg", fntHeader));
                //Den@15Deg.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell Temp = new PdfPCell(new Phrase("Temp.", fntHeader));
                //Temp.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell VCF = new PdfPCell(new Phrase("VCF", fntHeader));
                //VCF.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell VolCor = new PdfPCell(new Phrase("Vol. Corr.", fntHeader));
                //VolCor.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell WCF = new PdfPCell(new Phrase("WCF", fntHeader));
                //WCF.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell WtinAir = new PdfPCell(new Phrase("Wt.in Air", fntHeader));
                //WtinAir.HorizontalAlignment = Element.ALIGN_CENTER;

              

                // sCmd += "S.Sounding_Level,S.Temperature,S.VCF,S.Volume_Corr,S.WCF,S.Weight_in_Air ";
                //Add header to table
                tblLoadingSummary.AddCell(tankName);
                tblLoadingSummary.AddCell(percentFull);
                tblLoadingSummary.AddCell(Volume);
                tblLoadingSummary.AddCell(sg);
                tblLoadingSummary.AddCell(weight);
                tblLoadingSummary.AddCell(lcg);
                tblLoadingSummary.AddCell(tcg);
                tblLoadingSummary.AddCell(vcg);
                tblLoadingSummary.AddCell(fsm);
                //tblLoadingSummary.AddCell(Sounding);
                //tblLoadingSummary.AddCell(Ullage);
                //tblLoadingSummary.AddCell(Den@15Deg);
                //tblLoadingSummary.AddCell(Temp);
                //tblLoadingSummary.AddCell(VCF);
                //tblLoadingSummary.AddCell(VolCor);
                //tblLoadingSummary.AddCell(WCF);
                //tblLoadingSummary.AddCell(WtinAir);
                //tblLoadingSummary.AddCell(tankStatus);

                DataTable dtLoadingSummary = clsGlobVar.dtSimulationLoadingSummary.Clone();
                foreach (DataRow dr in clsGlobVar.dtSimulationLoadingSummary.Rows)
                {
                    dtLoadingSummary.Rows.Add(dr.ItemArray);
                }
                dtLoadingSummary.Columns.Remove("frames");
                dtLoadingSummary.Columns.Remove("tank_id");
                dtLoadingSummary.Columns.Remove("IsDamaged");
                dtLoadingSummary.Columns.Remove("Sounding_Level");
                //dtLoadingSummary.Columns.Add("IsDamaged", typeof(string));

                //for (int i = 0; i < clsGlobVar.dtSimulationLoadingSummary.Rows.Count; i++)
                //{
                //    if (clsGlobVar.dtSimulationLoadingSummary.Rows[i]["IsDamaged"].ToString() == "True")
                //    {
                //        dtLoadingSummary.Rows[i]["IsDamaged"] = "Damaged";
                //    }
                //    else
                //    {
                //        dtLoadingSummary.Rows[i]["IsDamaged"] = "Intact";
                //    }
                //}
                //dtLoadingSummary.Columns["IsDamaged"].ReadOnly = true;
                int columnCount = dtLoadingSummary.Columns.Count;
                int rowCount = dtLoadingSummary.Rows.Count;

                for (int rowCounter = 0;rowCounter < rowCount-3; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < columnCount; columnCounter++)
                    {
                        string strValue = (dtLoadingSummary.Rows[rowCounter][columnCounter].ToString());
                       
                        string temp;
                        //string strDmage = (dtLoadingSummary.Rows[rowCounter][17].ToString());
                        if (columnCounter != 10 && columnCounter != 20)
                        {
                            if (rowCounter == rowCount - 1 || rowCounter == rowCount - 2 || rowCounter == rowCount - 3)
                            {
                                if (columnCounter == 0)
                                {
                                    try
                                    {
                                        PdfPCell pdf1;
                                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(strValue, FontFactory.GetFont("Times New Roman", 6, iTextSharp.text.Font.BOLD)));
                                        pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        pdf1.Colspan = 4;
                                        tblLoadingSummary.AddCell(pdf1);
                                    }
                                    catch
                                    {
                                    }
                                }
                                else if (columnCounter == 0)
                                {
                                    temp = Convert.ToString(strValue);
                                    //temp = Convert.ToString(Math.Round(d, 3));
                                    PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                                    tblLoadingSummary.AddCell(pdf);
                                }
                                else if (columnCounter == 6 || columnCounter == 7 || columnCounter == 8 || columnCounter == 9 || columnCounter == 10)
                                {
                                    decimal d = Convert.ToDecimal(strValue);
                                    temp = Convert.ToString(Math.Round(d, 3));
                                    PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                                    tblLoadingSummary.AddCell(pdf);
                                }
                                //else if (columnCounter == 11)
                                //{
                                //    PdfPCell pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                                //    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                                //    tblLoadingSummary.AddCell(pdf1);
                                //}
                            }
                            else if (columnCounter == 1 || columnCounter == 2 || columnCounter == 3 || columnCounter == 4 || columnCounter == 5 || columnCounter == 6 || columnCounter == 7 || columnCounter == 8 || columnCounter == 9 || columnCounter == 10 || columnCounter == 11 || columnCounter == 12 || columnCounter == 13 || columnCounter == 14 || columnCounter == 15 || columnCounter == 16 && rowCounter != rowCount - 1 && rowCounter != rowCount - 2 && rowCounter != rowCount - 3)
                            {
                                //if (rowCounter != 47)
                                //{ 
                                    PdfPCell pdf;
                                decimal d = Convert.ToDecimal(strValue);
                                temp = Convert.ToString(Math.Round(d, 2));
                                if (temp == Convert.ToString(0))
                                {
                                    pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                                }
                                else
                                {
                                    //pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    //if (strDmage == "Damaged")
                                    //{
                                    //    //pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntRedColor));
                                    //    //pdf.BackgroundColor = new iTextSharp.text.Color(214, 108, 105);
                                    //   // var red = new BaseColor(255, 0, 0);
                                    //    iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                                    //    pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody1));
                                    //}
                                    //else
                                    //{
                                    pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    //}
                                }
                                pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                                tblLoadingSummary.AddCell(pdf);
                            //}
                            }

                            else
                            {
                                PdfPCell pdf1;
                                temp = Convert.ToString(strValue);
                                if (temp == Convert.ToString(0))
                                {
                                    pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                                }
                                else
                                {
                                    // pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    //if (strValue == "Damaged")
                                    //{
                                    //   // var red = new BaseColor(255, 0, 0);
                                    //    iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                                    //    pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody1));
                                    //}
                                    //else
                                    //{
                                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    //}
                                }
                                if (columnCounter == 0)
                                {
                                    pdf1.HorizontalAlignment = Element.ALIGN_LEFT;
                                }
                                else
                                {
                                    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                                }
                                tblLoadingSummary.AddCell(pdf1);
                            }
                        }
                    }
                }
                doc.Add(tblLoadingSummary);
                // doc.Add(new iTextSharp.text.Paragraph("  "));
                //..........EndofLoadingSummaryPart1..............................


                ////..........StartofLoadingSummaryPart2..............................
                //doc.NewPage();
                //doc.Add(new iTextSharp.text.Paragraph("  "));
                //doc.Add(new iTextSharp.text.Paragraph("  "));

                //PdfPTable tblLoadingSummary2 = new PdfPTable(16);
                //tblLoadingSummary2.DefaultCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                //tblLoadingSummary2.WidthPercentage = 90;
                //float[] widthsLoading2 = new float[] { 2.5f, 1.8f, 1.8f, 1.2f, 1.5f, 1.2f, 1.2f, 1.2f, 1.5f, 1.5f, 1f, 1f, 1f, 1f, 1f, 1.5f };      //in case nishant decide to incorporate again add 2nd and 3rd column as 1f  
                //tblLoadingSummary2.SetWidths(widthsLoading2);
                //tblLoadingSummary2.HorizontalAlignment = Element.ALIGN_CENTER;
                //iTextSharp.text.Font fntRedColor2 = FontFactory.GetFont("Times New Roman", 1, iTextSharp.text.Color.ORANGE);// Body

                //PdfPCell tankName2 = new PdfPCell(new Phrase("Tank Name", fntHeader));
                //tankName2.HorizontalAlignment = Element.ALIGN_LEFT;
                //PdfPCell tankStatus2 = new PdfPCell(new Phrase("Status", fntHeader));
                //tankStatus2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell percentFull2 = new PdfPCell(new Phrase("Percent Fill", fntHeader));
                //percentFull2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell Volume2 = new PdfPCell(new Phrase("Volume (cu.m)", fntHeader));
                //Volume2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell sg2 = new PdfPCell(new Phrase("SG", fntHeader));
                //sg2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell weight2 = new PdfPCell(new Phrase("Weight (T)", fntHeader));
                //weight2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell lcg2 = new PdfPCell(new Phrase("LCG (m)", fntHeader));
                //lcg2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell tcg2 = new PdfPCell(new Phrase("TCG (m)", fntHeader));
                //tcg2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell vcg2 = new PdfPCell(new Phrase("VCG (m)", fntHeader));
                //vcg2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell fsm2 = new PdfPCell(new Phrase("FSM (T-m)", fntHeader));
                //fsm2.HorizontalAlignment = Element.ALIGN_CENTER;

                //PdfPCell Sounding2 = new PdfPCell(new Phrase("Sounding", fntHeader));
                //Sounding2.HorizontalAlignment = Element.ALIGN_CENTER;
                ////PdfPCell Ullage2 = new PdfPCell(new Phrase("Ullage", fntHeader));
                ////Ullage2.HorizontalAlignment = Element.ALIGN_CENTER;
                ////PdfPCell Den@15Deg2 = new PdfPCell(new Phrase("Den@15Deg", fntHeader));
                ////Den@15Deg2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell Temp2 = new PdfPCell(new Phrase("Temp.", fntHeader));
                //Temp2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell VCF2 = new PdfPCell(new Phrase("VCF", fntHeader));
                //VCF2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell VolCor2 = new PdfPCell(new Phrase("Vol.Corr.", fntHeader));
                //VolCor2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell WCF2 = new PdfPCell(new Phrase("WCF", fntHeader));
                //WCF2.HorizontalAlignment = Element.ALIGN_CENTER;
                //PdfPCell WtinAir2 = new PdfPCell(new Phrase("Wt.in Air", fntHeader));
                //WtinAir2.HorizontalAlignment = Element.ALIGN_CENTER;

                ////Add header to table
                //tblLoadingSummary2.AddCell(tankName2);
                //tblLoadingSummary2.AddCell(percentFull2);
                //tblLoadingSummary2.AddCell(Volume2);
                //tblLoadingSummary2.AddCell(sg2);
                //tblLoadingSummary2.AddCell(weight2);
                //tblLoadingSummary2.AddCell(lcg2);
                //tblLoadingSummary2.AddCell(tcg2);
                //tblLoadingSummary2.AddCell(vcg2);
                //tblLoadingSummary2.AddCell(fsm2);
                //tblLoadingSummary2.AddCell(Sounding2);
                ////tblLoadingSummary2.AddCell(Ullage2);
                ////tblLoadingSummary2.AddCell(Den@15Deg2);
                //tblLoadingSummary2.AddCell(Temp2);
                //tblLoadingSummary2.AddCell(VCF2);
                //tblLoadingSummary2.AddCell(VolCor2);
                //tblLoadingSummary2.AddCell(WCF2);
                //tblLoadingSummary2.AddCell(WtinAir2);
                //tblLoadingSummary2.AddCell(tankStatus2);

                DataTable dtLoadingSummary2 = clsGlobVar.dtSimulationLoadingSummary.Clone();
                //foreach (DataRow dr in clsGlobVar.dtSimulationLoadingSummary.Rows)
                //{
                //    dtLoadingSummary2.Rows.Add(dr.ItemArray);
                //}

                //dtLoadingSummary2.Columns.Remove("IsDamaged");
                //dtLoadingSummary2.Columns.Add("IsDamaged", typeof(string));

                //for (int i = 0; i < clsGlobVar.dtSimulationLoadingSummary.Rows.Count; i++)
                //{
                //    if (clsGlobVar.dtSimulationLoadingSummary.Rows[i]["IsDamaged"].ToString() == "True")
                //    {
                //        dtLoadingSummary2.Rows[i]["IsDamaged"] = "Damaged";
                //    }
                //    else
                //    {
                //        dtLoadingSummary2.Rows[i]["IsDamaged"] = "Intact";
                //    }
                //}
                //dtLoadingSummary2.Columns["IsDamaged"].ReadOnly = true;
                //int columnCount2 = dtLoadingSummary2.Columns.Count;
                int rowCount2 = dtLoadingSummary2.Rows.Count;
                
                //for (int rowCounter = 48; rowCounter < rowCount2; rowCounter++)
                //{
                //    for (int columnCounter = 0; columnCounter < columnCount2; columnCounter++)
                //    {
                //        string strValue = (dtLoadingSummary2.Rows[rowCounter][columnCounter].ToString());
                //        string temp;
                //        string strDmage = (dtLoadingSummary2.Rows[rowCounter][11].ToString());
                //        if (columnCounter != 1 && columnCounter != 2)
                //        {
                //            if (rowCounter == rowCount - 1 || rowCounter == rowCount - 2)
                //            {
                //                if (columnCounter == 0)
                //                {
                //                    try
                //                    {
                //                        PdfPCell pdf1;
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(strValue, FontFactory.GetFont("Times New Roman", 7, iTextSharp.text.Font.BOLD)));
                //                        pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                        pdf1.Colspan = 4;
                //                        tblLoadingSummary2.AddCell(pdf1);
                //                    }
                //                    catch
                //                    {
                //                    }
                //                }

                //                else if (columnCounter == 3 || columnCounter == 4  && rowCounter != rowCount - 1 && rowCounter != rowCount - 2 && rowCounter != rowCount - 3)
                //                {
                //                    PdfPCell pdf;
                //                    if (strValue == "")
                //                    {
                //                        strValue = "0";
                //                    }
                //                    decimal d = Convert.ToDecimal(strValue);
                //                    temp = Convert.ToString(Math.Round(d, 2));
                //                    if (temp == Convert.ToString(0))
                //                    {
                //                        pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                    }
                //                    else
                //                    {

                //                        if (strDmage == "Damaged")
                //                        {
                //                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntRedColor));
                //                            pdf.BackgroundColor = new iTextSharp.text.Color(214, 108, 105);
                //                        }
                //                        else
                //                        {
                //                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                        }
                //                    }
                //                    pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                //                    tblLoadingSummary2.AddCell(pdf);
                //                }

                //                else if (columnCounter == 5 || columnCounter == 6 || columnCounter == 7 || columnCounter == 8 || columnCounter == 9 || columnCounter == 10 || columnCounter == 11 || columnCounter == 12 || columnCounter == 13 || columnCounter == 14 || columnCounter == 15 || columnCounter == 16)
                //                {
                //                    if (strValue == "")
                //                    {
                //                        strValue = "0";
                //                    }
                //                    decimal d = Convert.ToDecimal(strValue);
                //                    temp = Convert.ToString(Math.Round(d, 2));
                //                    PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                //                    tblLoadingSummary2.AddCell(pdf);
                //                }
                //                //else if (columnCounter == 11)
                //                //{
                //                //    PdfPCell pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                //    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                //    tblLoadingSummary2.AddCell(pdf1);
                //                //}
                //            }



                //            else
                //            {
                //                PdfPCell pdf1;
                //                temp = Convert.ToString(strValue);
                //                if (temp == Convert.ToString(0))
                //                {
                //                    pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                }
                //                else
                //                {

                //                    if (strValue == "Damaged")
                //                    {
                //                        iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody1));
                //                    }
                //                    else
                //                    {
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    }
                //                }
                //                if (columnCounter == 0)
                //                {
                //                    pdf1.HorizontalAlignment = Element.ALIGN_LEFT;
                //                }
                //                else
                //                {
                //                    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                }
                //                tblLoadingSummary2.AddCell(pdf1);
                //            }
                //        }
                //    }
                //}

                ////sachin commented bcoz no 48 row 
                //for (int rowCounter = 48; rowCounter < rowCount2; rowCounter++)
                //{
                //    for (int columnCounter = 0; columnCounter < columnCount; columnCounter++)
                //    {
                //        string strValue = (dtLoadingSummary2.Rows[rowCounter][columnCounter].ToString());
                //        string temp;
                //        string strDmage = (dtLoadingSummary2.Rows[rowCounter][17].ToString());
                //        if (columnCounter != 1 && columnCounter != 2)
                //        {
                //            if (rowCounter == rowCount - 1 || rowCounter == rowCount - 2)
                //            {
                //                if (columnCounter == 0)
                //                {
                //                    try
                //                    {
                //                        PdfPCell pdf1;
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(strValue, FontFactory.GetFont("Times New Roman", 6, iTextSharp.text.Font.BOLD)));
                //                        pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                        pdf1.Colspan = 4;
                //                        tblLoadingSummary2.AddCell(pdf1);
                //                    }
                //                    catch
                //                    {
                //                    }
                //                }
                //                else if (columnCounter == 6 || columnCounter == 7 || columnCounter == 8 || columnCounter == 9 || columnCounter == 10 || columnCounter == 11 || columnCounter == 12 || columnCounter == 13 || columnCounter == 14 || columnCounter == 15 || columnCounter == 16 )
                //                {
                //                    decimal d = Convert.ToDecimal(strValue);
                //                    temp = Convert.ToString(Math.Round(d, 2));
                //                    PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                //                    tblLoadingSummary2.AddCell(pdf);
                //                }
                //                //else if (columnCounter == 11)
                //                //{
                //                //    PdfPCell pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                //    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                //    tblLoadingSummary2.AddCell(pdf1);
                //                //}
                //            }
                //            else if (columnCounter == 3 || columnCounter == 4 || columnCounter == 5 || columnCounter == 6 || columnCounter == 7 || columnCounter == 8 || columnCounter == 9 || columnCounter == 10 || columnCounter == 11 || columnCounter == 12 || columnCounter == 13 || columnCounter == 14 || columnCounter == 15 || columnCounter == 16 && rowCounter != rowCount - 1 && rowCounter != rowCount - 2 && rowCounter != rowCount - 3)
                //            {
                //                if (strValue == "")
                //                {
                //                    strValue = "0.00";
                //                }

                //                PdfPCell pdf;
                //                decimal d = Convert.ToDecimal(strValue);
                //                temp = Convert.ToString(Math.Round(d, 2));
                //                if (temp == Convert.ToString(0))
                //                {
                //                    pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                }
                //                else
                //                {
                //                    //pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    //if (strDmage == "Damaged")
                //                    //{
                //                    //    //pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntRedColor));
                //                    //    //pdf.BackgroundColor = new iTextSharp.text.Color(214, 108, 105);
                //                    //    // var red = new BaseColor(255, 0, 0);
                //                    //    iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                //                    //    pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody1));
                //                    //}
                //                    //else
                //                    //{
                //                        pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                   // }
                //                }
                //                pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                //                tblLoadingSummary2.AddCell(pdf);
                //            }


                //            else
                //            {
                //                PdfPCell pdf1;
                //                temp = Convert.ToString(strValue);
                //                if (temp == Convert.ToString(0))
                //                {
                //                    pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                //                }
                //                else
                //                {
                //                    // pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    if (strValue == "Damaged")
                //                    {
                //                        // var red = new BaseColor(255, 0, 0);
                //                        iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody1));
                //                    }
                //                    else
                //                    {
                //                        pdf1 = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                //                    }
                //                }
                //                if (columnCounter == 0)
                //                {
                //                    pdf1.HorizontalAlignment = Element.ALIGN_LEFT;
                //                }
                //                else
                //                {
                //                    pdf1.HorizontalAlignment = Element.ALIGN_CENTER;
                //                }
                //                tblLoadingSummary2.AddCell(pdf1);
                //            }
                //        }
                //    }
                //}

                /////
                //doc.Add(tblLoadingSummary2);
                //doc.Add(new iTextSharp.text.Paragraph("  "));
                ////..........EndofLoadingSummaryPart2..............................

                doc.NewPage();
                doc.Add(new iTextSharp.text.Paragraph("  "));
                iTextSharp.text.Paragraph pHeaderDeadweight = new iTextSharp.text.Paragraph("Deadweight(T) Details", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                pHeaderDeadweight.Alignment = Element.ALIGN_CENTER;
                doc.Add(pHeaderDeadweight);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                PdfPTable tblDeadweight = new PdfPTable(7);
                tblDeadweight.WidthPercentage = 90;
                float[] widthsDeadweight = new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f };
                tblDeadweight.SetWidths(widthsDeadweight);

                PdfPCell cargo = new PdfPCell(new Phrase("Cargo Tank", fntHeader));
                PdfPCell BallastWater = new PdfPCell(new Phrase("Ballast Tank", fntHeader));

                PdfPCell fuel = new PdfPCell(new Phrase("Fuel Oil Tank", fntHeader));
                PdfPCell FreshWater = new PdfPCell(new Phrase("Fresh Water Tank", fntHeader));
                PdfPCell Diesel = new PdfPCell(new Phrase("Diesel Oil Tank", fntHeader));
               
                //PdfPCell LubeOil = new PdfPCell(new Phrase("Lube Oil Tank", fntHeader));
                PdfPCell Misc = new PdfPCell(new Phrase("OTHER TANKS", fntHeader));
                PdfPCell FixedL = new PdfPCell(new Phrase("Fixed Loads", fntHeader));


                cargo.HorizontalAlignment = Element.ALIGN_CENTER;
                BallastWater.HorizontalAlignment = Element.ALIGN_CENTER;
                Diesel.HorizontalAlignment = Element.ALIGN_CENTER;
                FreshWater.HorizontalAlignment = Element.ALIGN_CENTER;
                fuel.HorizontalAlignment = Element.ALIGN_CENTER;
                //LubeOil.HorizontalAlignment = Element.ALIGN_CENTER;
                Misc.HorizontalAlignment = Element.ALIGN_CENTER;
                FixedL.HorizontalAlignment = Element.ALIGN_CENTER;


                tblDeadweight.AddCell(cargo);
                tblDeadweight.AddCell(BallastWater);
                tblDeadweight.AddCell(fuel);
                tblDeadweight.AddCell(FreshWater);
                tblDeadweight.AddCell(Diesel);
               // tblDeadweight.AddCell(LubeOil);
                tblDeadweight.AddCell(Misc);
                tblDeadweight.AddCell(FixedL);
                //clsGlobVar.dsSimulationDeadWeightDetails.Columns.Remove("frames");
                //DataTable DEADWEIGHT = clsGlobVar.dsSimulationDeadWeightDetails.Tables[0];
                //DEADWEIGHT.Columns.Remove("");
                for (int index = 0; index < 7; index++)
                {
                    if (index != 5 ||index!=7)
                    {
                        
                           
                            string strValueDead = clsGlobVar.dsSimulationDeadWeightDetails.Tables[index].Rows[0][0].ToString();
                            PdfPCell pdfDead = new PdfPCell(new iTextSharp.text.Paragraph(strValueDead, fntBody));
                            pdfDead.HorizontalAlignment = Element.ALIGN_CENTER;
                            tblDeadweight.AddCell(pdfDead);
                        }
                    
                }
                doc.Add(tblDeadweight);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                //Hydrostatic Equilibrium Angle
                iTextSharp.text.Paragraph pHeaderHydro = new iTextSharp.text.Paragraph("Hydrostatics", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                pHeaderHydro.Alignment = Element.ALIGN_CENTER;
                doc.Add(pHeaderHydro);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                PdfPTable tblHydrostatic = new PdfPTable(13);
                tblHydrostatic.WidthPercentage = 90;
                float[] widthsHydro = new float[] { 1.5f, 1.2f, 1.2f, 1.2f, 0.9f, 1.2f, 0.9f, 0.9f, 0.9f, 0.9f, 0.8f, 0.8f, 0.8f};
                tblHydrostatic.SetWidths(widthsHydro);

                DataSet dsHydrostaticsData = new DataSet();
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                DataTable dtHydroDrafts = new DataTable();
                string Err = "";
                //SELECT ,,,,,,,,,,,, FROM  tblSimulationMode_Equilibrium_Values
                string cmd = "Select Displacement,[TRIM],[Heel],[Draft_MID],[GMT],[KG(Fluid)],[LCG],[TCG],[TCB],[TPC],[MCT],[VCB],[LCB] " +
                             "From tblSimulationMode_Equilibrium_Values Where [USER] = 'dbo'";

                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsHydrostaticsData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtHydrostaticsData = new DataTable();
                dtHydrostaticsData = dsHydrostaticsData.Tables[0];

                // dtHydroDrafts = ((DataView)dtHydrostaticsData.ItemsSource).ToTable();
                int columnCountHydro2 = dtHydrostaticsData.Columns.Count;
                int rowCountHydro2 = dtHydrostaticsData.Rows.Count;
                decimal trimValue = Convert.ToDecimal(dtHydrostaticsData.Rows[0][1]);
                decimal heelValue = Convert.ToDecimal(dtHydrostaticsData.Rows[0][2]);


                PdfPCell Displacement = new PdfPCell(new Phrase("Displacement (T)", fntHeader));

                PdfPCell trim;
                PdfPCell list;
                if (trimValue > 0)
                {
                    trim = new PdfPCell(new Phrase("Trim (m) AFT", fntHeader));
                }
                else if (trimValue < 0)
                {
                    trim = new PdfPCell(new Phrase("Trim (m) FWD", fntHeader));
                }
                else
                {
                    trim = new PdfPCell(new Phrase("Trim (m)", fntHeader));
                }

                if (heelValue < 0)
                {
                    list = new PdfPCell(new Phrase("Heel (Deg.) PORT", fntHeader));
                }
                else if (heelValue > 0)
                {
                    list = new PdfPCell(new Phrase("Heel (Deg.) STBD", fntHeader));
                }
                else { list = new PdfPCell(new Phrase("Heel (Deg.)", fntHeader)); ; }

                PdfPCell GMT = new PdfPCell(new Phrase("GMT   (m)", fntHeader));
                PdfPCell KGF = new PdfPCell(new Phrase("KG-Fluid (m)", fntHeader));
                PdfPCell LCG = new PdfPCell(new Phrase("LCG   (m)", fntHeader));
                PdfPCell TCG = new PdfPCell(new Phrase("TCG   (m)", fntHeader));
                PdfPCell TCB = new PdfPCell(new Phrase("TCB   (m)", fntHeader));
                PdfPCell TPC = new PdfPCell(new Phrase("TPC   (T/cm)", fntHeader));
                PdfPCell MCT = new PdfPCell(new Phrase("MCT   (T-m)", fntHeader));
                PdfPCell VCB = new PdfPCell(new Phrase("VCB   (m)", fntHeader));
                PdfPCell LCB = new PdfPCell(new Phrase("LCB   (m)", fntHeader));
               
                PdfPCell DraftMid = new PdfPCell(new Phrase("Draft MID (m)", fntHeader));


                Displacement.HorizontalAlignment = Element.ALIGN_CENTER;
                trim.HorizontalAlignment = Element.ALIGN_CENTER;
                list.HorizontalAlignment = Element.ALIGN_CENTER;
                GMT.HorizontalAlignment = Element.ALIGN_CENTER;
                KGF.HorizontalAlignment = Element.ALIGN_CENTER;
                LCG.HorizontalAlignment = Element.ALIGN_CENTER;
                TCG.HorizontalAlignment = Element.ALIGN_CENTER;
                TCB.HorizontalAlignment = Element.ALIGN_CENTER;
                TPC.HorizontalAlignment = Element.ALIGN_CENTER;
                TCG.HorizontalAlignment = Element.ALIGN_CENTER;
                MCT.HorizontalAlignment = Element.ALIGN_CENTER;
                VCB.HorizontalAlignment = Element.ALIGN_CENTER;
                LCB.HorizontalAlignment = Element.ALIGN_CENTER;
              
                DraftMid.HorizontalAlignment = Element.ALIGN_CENTER;

                tblHydrostatic.AddCell(Displacement);
                tblHydrostatic.AddCell(trim);
                tblHydrostatic.AddCell(list);
                tblHydrostatic.AddCell(DraftMid);
                tblHydrostatic.AddCell(GMT);
                tblHydrostatic.AddCell(KGF);
                tblHydrostatic.AddCell(LCG);
                tblHydrostatic.AddCell(TCG);
                tblHydrostatic.AddCell(TCB);
                tblHydrostatic.AddCell(TPC);
                tblHydrostatic.AddCell(MCT);
                tblHydrostatic.AddCell(VCB);
                tblHydrostatic.AddCell(LCB);
              

                int columnCountHydro2332 = dtHydrostaticsData.Columns.Count;
                int columnCountHydro = columnCountHydro2332;
                int rowCountHydro = dtHydrostaticsData.Rows.Count;
                for (int rowCounter = 0; rowCounter < rowCountHydro; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < columnCountHydro; columnCounter++)
                    {
                        PdfPCell pdf;
                        string strValue = (dtHydrostaticsData.Rows[rowCounter][columnCounter].ToString());
                        //PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));


                        decimal value = Convert.ToDecimal(strValue);
                        string strvalueNew = "";
                        if (((columnCounter == 1) || (columnCounter == 2)) && (value < 0))
                        {
                            string dd = value.ToString("N");
                            decimal mm = Convert.ToDecimal(dd);
                            strvalueNew = Convert.ToString(Convert.ToDecimal(mm) * (-1));


                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(strvalueNew, fntBody));
                        }
                        else
                        {

                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                        }

                        pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblHydrostatic.AddCell(pdf);
                    }
                }
                doc.Add(tblHydrostatic);
                doc.Add(new iTextSharp.text.Paragraph("  "));
                //DraftAtEquilibriumAngle

                iTextSharp.text.Paragraph pHeaderDraft = new iTextSharp.text.Paragraph("Draft At Equilibrium (m)", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                pHeaderDraft.Alignment = Element.ALIGN_CENTER;
                doc.Add(pHeaderDraft);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                PdfPTable tblDraft = new PdfPTable(3);
                tblDraft.WidthPercentage = 60;
                float[] widthsDraft = new float[] { 1f, 1f, 1f };
                tblDraft.SetWidths(widthsDraft);

                PdfPCell DraftAP = new PdfPCell(new Phrase("Draft AP", fntHeader));
                PdfPCell DraftFP = new PdfPCell(new Phrase("Draft FP", fntHeader));
                PdfPCell DraftMID = new PdfPCell(new Phrase("Draft MID", fntHeader));
                DraftAP.HorizontalAlignment = Element.ALIGN_CENTER;
                DraftFP.HorizontalAlignment = Element.ALIGN_CENTER;
                DraftMID.HorizontalAlignment = Element.ALIGN_CENTER;


                tblDraft.AddCell(DraftAP);
                tblDraft.AddCell(DraftFP);
                tblDraft.AddCell(DraftMID);

                DataSet dsDraftData = new DataSet();

                command = Models.DAL.clsDBUtilityMethods.GetCommand();

                Err = "";
                cmd = "Select  [Draft_AP],[Draft_FP],[Draft_MID],[Draft_AFT_MARK],";
                cmd += "[Draft_FWD_MARK] From tblSimulationMode_Equilibrium_Values Where [USER] = 'dbo'";


                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsDraftData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtDraftData = new DataTable();
                dtDraftData = dsDraftData.Tables[0];
                int columnCountDraft = dtDraftData.Columns.Count;
                int rowCountDraft = dtDraftData.Rows.Count;
                for (int rowCounter = 0; rowCounter < rowCountDraft; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < columnCountDraft; columnCounter++)
                    {
                        string strValue = (dtDraftData.Rows[rowCounter][columnCounter].ToString());
                        PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                        pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblDraft.AddCell(pdf);
                    }
                }
                doc.Add(tblDraft);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                ////Blind Zone And Propeller Immersion table  
                //iTextSharp.text.Paragraph pHVisibility_PropImm = new iTextSharp.text.Paragraph("Visibility And Propeller Immersion", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                //pHVisibility_PropImm.Alignment = Element.ALIGN_CENTER;
                //doc.Add(pHVisibility_PropImm);
                //doc.Add(new iTextSharp.text.Paragraph("  "));
                //PdfPTable tblvisibility_PropImm = new PdfPTable(2);
                //tblvisibility_PropImm.WidthPercentage = 40;
                //float[] widthsVisiPropImm = new float[] { 1f, 1f };
                //tblvisibility_PropImm.SetWidths(widthsVisiPropImm);
                //PdfPCell PropellerImm = new PdfPCell(new Phrase("Propeller Immersion (%)", fntHeader));
                //PdfPCell BlindZone = new PdfPCell(new Phrase("Blind Zone (m)", fntHeader));

                //PropellerImm.HorizontalAlignment = Element.ALIGN_CENTER;
                //BlindZone.HorizontalAlignment = Element.ALIGN_CENTER;
                //tblvisibility_PropImm.AddCell(PropellerImm);
                //tblvisibility_PropImm.AddCell(BlindZone);
                //DataSet dsVisiPropImmData = new DataSet();
                //command = Models.DAL.clsDBUtilityMethods.GetCommand();
                //Err = "";
                //cmd = "Select [Prop_Immersion],[Visibility] From tblSimulationMode_Equilibrium_Values Where [USER] = 'dbo'";
                //command.CommandText = cmd;
                //command.CommandType = CommandType.Text;
                //dsVisiPropImmData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                //DataTable dtVisiPropImmData = new DataTable();
                //dtVisiPropImmData = dsVisiPropImmData.Tables[0];
                //int columnCountVisiPropImm = dtVisiPropImmData.Columns.Count;
                //int rowCountVisiPropImm = dtVisiPropImmData.Rows.Count;
                //for (int rowCounter = 0; rowCounter < rowCountVisiPropImm; rowCounter++)
                //{
                //    for (int columnCounter = 0; columnCounter < columnCountVisiPropImm; columnCounter++)
                //    {
                //        string strValue = (dtVisiPropImmData.Rows[rowCounter][columnCounter].ToString());
                //        PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                //        pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                //        tblvisibility_PropImm.AddCell(pdf);
                //    }
                //}
                //doc.Add(tblvisibility_PropImm);
                //doc.Add(new iTextSharp.text.Paragraph("  "));



                //IntactStability Or Damage Stability
                //Intact Stability Table Name









                // doc.NewPage();
                PdfPTable tblIntact = new PdfPTable(4);
                tblIntact.WidthPercentage = 80;
                float[] widthsIntact = new float[] { 3.5f, 1.4f, 1.4f, 1f };
                tblIntact.SetWidths(widthsIntact);

                PdfPCell criterion = new PdfPCell(new Phrase("Criterion", fntHeader));
                PdfPCell criticalValue = new PdfPCell(new Phrase("Critical Value", fntHeader));
                PdfPCell actualvalue = new PdfPCell(new Phrase("Actual Value", fntHeader));
                PdfPCell status = new PdfPCell(new Phrase("Status", fntHeader));
                criterion.HorizontalAlignment = Element.ALIGN_CENTER;
                criticalValue.HorizontalAlignment = Element.ALIGN_CENTER;
                actualvalue.HorizontalAlignment = Element.ALIGN_CENTER;
                status.HorizontalAlignment = Element.ALIGN_CENTER;

                tblIntact.AddCell(criterion);
                tblIntact.AddCell(criticalValue);
                tblIntact.AddCell(actualvalue);
                tblIntact.AddCell(status);
                DataTable dtfinal = new DataTable();

                iTextSharp.text.Paragraph pHeaderIntact;
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    pHeaderIntact = new iTextSharp.text.Paragraph("IMO Stability Criteria-" + "Intact", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD));

                }
                else
                {
                    if (rowCount2 > 59)
                    {
                        doc.NewPage();
                        doc.Add(new iTextSharp.text.Paragraph("  "));
                        pHeaderIntact = new iTextSharp.text.Paragraph("Stability Criteria-" + lblCalculationMethod.Content.ToString(), FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD));

                    }
                    else
                    {
                        pHeaderIntact = new iTextSharp.text.Paragraph("Stability Criteria-" + lblCalculationMethod.Content.ToString(), FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD));
                    }
                }
                pHeaderIntact.Alignment = Element.ALIGN_CENTER;
                doc.Add(pHeaderIntact);


                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    dtfinal = clsGlobVar.dtSimulationStabilityCriteriaIntact.Clone();
                    foreach (DataRow dr in clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtSimulationStabilityCriteriaIntact.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";
                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;

                }
                else
                {

                    //doc.Add(new iTextSharp.text.Paragraph("  "));
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    dtfinal = clsGlobVar.dtSimulationStabilityCriteriaDamage.Clone();
                    foreach (DataRow dr in clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows)
                    {

                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));


                    for (int i = 0; i < clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows.Count; i++)
                    {
                        if (clsGlobVar.dtSimulationStabilityCriteriaDamage.Rows[i]["Status"].ToString() == "True")
                        {
                            dtfinal.Rows[i]["Status"] = "Pass";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "Fail";

                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;

                }

                int columnCountIntact = dtfinal.Columns.Count;
                int rowCountIntact = dtfinal.Rows.Count;
                for (int rowCounter = 0; rowCounter < rowCountIntact; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < columnCountIntact; columnCounter++)
                    {
                        string strValue = dtfinal.Rows[rowCounter][columnCounter].ToString();
                        PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                        if (columnCounter == 0)
                        {
                            pdf.HorizontalAlignment = Element.ALIGN_LEFT;
                        }
                        else
                        {
                            pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                        }
                        tblIntact.AddCell(pdf);
                    }
                }
                doc.Add(tblIntact);

                doc.Add(new iTextSharp.text.Paragraph("  "));




                /////////////////////////////////////////////////////////////////////////
                if (lblCalculationMethod.Content.ToString() == "Damage")
                {
                    //////////////////FOR NEXT PAGE ///////////////////
                    doc.NewPage();
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    iTextSharp.text.Paragraph pHeaderFloodingPoint1 = new iTextSharp.text.Paragraph("Flooding Point", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                    pHeaderFloodingPoint1.Alignment = Element.ALIGN_CENTER;
                    doc.Add(pHeaderFloodingPoint1);
                    doc.Add(new iTextSharp.text.Paragraph("  "));

                    PdfPTable tblFloodPoint1 = new PdfPTable(5);
                    tblFloodPoint1.WidthPercentage = 80;
                    float[] widthsFloodPoint1 = new float[] { 3f, 1f, 1f, 1f, 1f };
                    tblFloodPoint1.SetWidths(widthsFloodPoint1);

                    PdfPCell name1 = new PdfPCell(new Phrase("Name", fntHeader));
                    PdfPCell x1 = new PdfPCell(new Phrase("  X(M) ", fntHeader));
                    PdfPCell y1 = new PdfPCell(new Phrase(" Y(M) ", fntHeader));
                    PdfPCell z1 = new PdfPCell(new Phrase(" Z(M) ", fntHeader));
                    PdfPCell immersionAngle1 = new PdfPCell(new Phrase(" Immersion Angle ", fntHeader));

                    name1.HorizontalAlignment = Element.ALIGN_CENTER;
                    x1.HorizontalAlignment = Element.ALIGN_CENTER;
                    y1.HorizontalAlignment = Element.ALIGN_CENTER;
                    z1.HorizontalAlignment = Element.ALIGN_CENTER;
                    immersionAngle1.HorizontalAlignment = Element.ALIGN_CENTER;


                    tblFloodPoint1.AddCell(name1);
                    tblFloodPoint1.AddCell(x1);
                    tblFloodPoint1.AddCell(y1);
                    tblFloodPoint1.AddCell(z1);
                    tblFloodPoint1.AddCell(immersionAngle1);

                    DataTable dtFloodPoint1 = new DataTable();
                    dtFloodPoint1 = clsGlobVar.FloodingPoint_Damage.Clone();
                    foreach (DataRow dr in clsGlobVar.FloodingPoint_Damage.Rows)
                    {

                        dtFloodPoint1.Rows.Add(dr.ItemArray);
                    }

                    int columnCountFloodPoint1 = dtFloodPoint1.Columns.Count;
                    int rowCountFloodPoint1 = dtFloodPoint1.Rows.Count;
                    for (int rowCounter = 0; rowCounter < rowCountFloodPoint1; rowCounter++)
                    {
                        for (int columnCounter = 0; columnCounter < columnCountFloodPoint1; columnCounter++)
                        {

                            string strValue = (dtFloodPoint1.Rows[rowCounter][columnCounter].ToString());
                            PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                            if (columnCounter == 0)
                            {
                                pdf.HorizontalAlignment = Element.ALIGN_LEFT;
                            }
                            else
                            {
                                pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                            }
                            tblFloodPoint1.AddCell(pdf);
                        }
                    }
                    doc.Add(tblFloodPoint1);
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                }
                else
                {

                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    iTextSharp.text.Paragraph pHeaderFloodingPoint = new iTextSharp.text.Paragraph("Flooding Point", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                    pHeaderFloodingPoint.Alignment = Element.ALIGN_CENTER;
                    doc.Add(pHeaderFloodingPoint);
                    doc.Add(new iTextSharp.text.Paragraph("  "));

                    PdfPTable tblFloodPoint = new PdfPTable(5);
                    tblFloodPoint.WidthPercentage = 80;
                    float[] widthsFloodPoint = new float[] { 3f, 1f, 1f, 1f, 1f };
                    tblFloodPoint.SetWidths(widthsFloodPoint);

                    PdfPCell name = new PdfPCell(new Phrase("Name", fntHeader));
                    PdfPCell x = new PdfPCell(new Phrase("  X(M) ", fntHeader));
                    PdfPCell y = new PdfPCell(new Phrase(" Y(M) ", fntHeader));
                    PdfPCell z = new PdfPCell(new Phrase(" Z(M) ", fntHeader));
                    PdfPCell immersionAngle = new PdfPCell(new Phrase(" Immersion Angle ", fntHeader));

                    name.HorizontalAlignment = Element.ALIGN_CENTER;
                    x.HorizontalAlignment = Element.ALIGN_CENTER;
                    y.HorizontalAlignment = Element.ALIGN_CENTER;
                    z.HorizontalAlignment = Element.ALIGN_CENTER;
                    immersionAngle.HorizontalAlignment = Element.ALIGN_CENTER;


                    tblFloodPoint.AddCell(name);
                    tblFloodPoint.AddCell(x);
                    tblFloodPoint.AddCell(y);
                    tblFloodPoint.AddCell(z);
                    tblFloodPoint.AddCell(immersionAngle);

                    DataTable dtFloodPoint = new DataTable();
                    dtFloodPoint = clsGlobVar.FloodingPoint_Intact.Clone();
                    foreach (DataRow dr in clsGlobVar.FloodingPoint_Intact.Rows)
                    {

                        dtFloodPoint.Rows.Add(dr.ItemArray);
                    }

                    int columnCountFloodPoint = dtFloodPoint.Columns.Count;
                    int rowCountFloodPoint = dtFloodPoint.Rows.Count;
                    for (int rowCounter = 0; rowCounter < rowCountFloodPoint; rowCounter++)
                    {
                        for (int columnCounter = 0; columnCounter < columnCountFloodPoint; columnCounter++)
                        {

                            string strValue = (dtFloodPoint.Rows[rowCounter][columnCounter].ToString());
                            PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                            if (columnCounter == 0)
                            {
                                pdf.HorizontalAlignment = Element.ALIGN_LEFT;
                            }
                            else
                            {
                                pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                            }
                            tblFloodPoint.AddCell(pdf);
                        }
                    }
                    doc.Add(tblFloodPoint);
                }
                //..............................................................................................
                

                //..............................................................................................
                // ----------------------------------------GZ GRAPH------------------------------------------------------
                doc.NewPage();
                doc.Add(new iTextSharp.text.Paragraph("  "));
                iTextSharp.text.Paragraph pHeaderGZ = new iTextSharp.text.Paragraph("GZ Graph", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // validation if data not available
                pHeaderGZ.Alignment = Element.ALIGN_CENTER;
                doc.Add(pHeaderGZ);
                doc.Add(new iTextSharp.text.Paragraph("  "));

                iTextSharp.text.Image imgGZ = iTextSharp.text.Image.GetInstance(System.Windows.Forms.Application.StartupPath + "\\Images\\GZ_curve.png");
                imgGZ.Alignment = Element.ALIGN_CENTER;
                imgGZ.SpacingAfter = 20f;
                imgGZ.ScaleToFit(400, 300);
                doc.Add(imgGZ);



                //imgNet.SpacingAfter = 20f;
                //imgNet.ScaleToFit(500, 500);
                //doc.Add(imgNet);


                doc.Add(new iTextSharp.text.Paragraph("  "));
                PdfPTable pp1 = new PdfPTable(2);
                pp1.WidthPercentage = 30;
                float[] widthsGZ5 = new float[] { 2f, 2f };
                pp1.SetWidths(widthsGZ5);

                PdfPCell heel = new PdfPCell(new Phrase("Heel(Deg)", fntHeader));
                PdfPCell GZ = new PdfPCell(new Phrase("GZ(m)", fntHeader));
                heel.HorizontalAlignment = Element.ALIGN_CENTER;
                GZ.HorizontalAlignment = Element.ALIGN_CENTER;
                pp1.AddCell(heel);
                pp1.AddCell(GZ);
                DataSet dsGZData = new DataSet();

                command = Models.DAL.clsDBUtilityMethods.GetCommand();

                Err = "";
                cmd = "SELECT heelAng,heelGZ from GZDataSimulationMode_New where [User] = 'dbo'";
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                dsGZData = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                DataTable dtGZgraph = new DataTable();
                dtGZgraph = dsGZData.Tables[0];
                int columnCountGZ1 = dtGZgraph.Columns.Count;
                int rowCountGZ1 = dtGZgraph.Rows.Count;
                for (int rowCounter = 0; rowCounter < rowCountGZ1; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < 2; columnCounter++)
                    {

                        string temp;
                        object obj = dtGZgraph.Rows[rowCounter][columnCounter];
                        string strValue1 = (obj.ToString());
                        decimal d = Convert.ToDecimal(strValue1);
                        temp = Convert.ToString(Math.Round(d, 3));
                        PdfPCell cell1 = new PdfPCell(new Phrase(temp, FontFactory.GetFont("Times New Roman", 7)));

                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        pp1.AddCell(cell1);

                    }
                }
                doc.Add(pp1);

                //Start of Longitudinal Strength Data 1 to 31 rows
                if (lblCalculationMethod.Content.ToString() == "Intact")
                {
                    doc.NewPage();
                    //doc.Add(new iTextSharp.text.Paragraph("  "));
                    doc.Add(new iTextSharp.text.Paragraph("  "));

                    iTextSharp.text.Paragraph pHeaderNet = new iTextSharp.text.Paragraph("Longitudinal Strength Curves", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); //Intact Stability Table Name
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    pHeaderNet.Alignment = Element.ALIGN_CENTER;
                    doc.Add(pHeaderNet);
                    iTextSharp.text.Image imgNet = iTextSharp.text.Image.GetInstance(System.Windows.Forms.Application.StartupPath + "\\Images\\Longitudinal_curve.png");
                    imgNet.Alignment = Element.ALIGN_CENTER;
                    imgNet.SpacingAfter = 20f;
                    imgNet.ScaleToFit(500, 500);
                    doc.Add(imgNet);

                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    //doc.Add(new iTextSharp.text.Paragraph("  "));
                    iTextSharp.text.Paragraph pHeaderLongitudinal = new iTextSharp.text.Paragraph("Longitudinal Strength Data", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); //Intact Stability Table Name
                    pHeaderLongitudinal.Alignment = Element.ALIGN_CENTER;
                    doc.Add(pHeaderLongitudinal);
                    doc.Add(new iTextSharp.text.Paragraph("  "));
                    PdfPTable tblLongitudinal = new PdfPTable(8);
                    tblLongitudinal.WidthPercentage = 90;
                    float[] widthsLongitudinal = new float[] { 1f, 1f, 1f, 1f, 1f, 1f,1f, 1f };
                    tblLongitudinal.SetWidths(widthsLongitudinal);
                    PdfPCell positionFrame = new PdfPCell(new Phrase("Frame No.", fntHeader));
                    PdfPCell SF = new PdfPCell(new Phrase("Shear Force (T)", fntHeader));
                    PdfPCell SFPercentSEA = new PdfPCell(new Phrase("% SF@SEA", fntHeader));
                    PdfPCell SFPercentPort = new PdfPCell(new Phrase("% SF@PORT", fntHeader));
                    PdfPCell BM = new PdfPCell(new Phrase("Bending Moment   (T-m)", fntHeader));
                    PdfPCell BMPercentSEA = new PdfPCell(new Phrase("% BM@SEA", fntHeader));
                    PdfPCell BMPercentPORT = new PdfPCell(new Phrase("% BM@PORT", fntHeader));
                    PdfPCell Status = new PdfPCell(new Phrase("Status", fntHeader));
                    positionFrame.HorizontalAlignment = Element.ALIGN_CENTER;
                    SF.HorizontalAlignment = Element.ALIGN_CENTER;
                    SFPercentSEA.HorizontalAlignment = Element.ALIGN_CENTER;
                    SFPercentPort.HorizontalAlignment = Element.ALIGN_CENTER;
                    BM.HorizontalAlignment = Element.ALIGN_CENTER;
                    BMPercentSEA.HorizontalAlignment = Element.ALIGN_CENTER;
                    BMPercentPORT.HorizontalAlignment = Element.ALIGN_CENTER;
                    Status.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblLongitudinal.AddCell(positionFrame);
                    tblLongitudinal.AddCell(SF);
                    tblLongitudinal.AddCell(SFPercentSEA);
                    tblLongitudinal.AddCell(SFPercentPort);
                    tblLongitudinal.AddCell(BM);
                    tblLongitudinal.AddCell(BMPercentSEA);
                    tblLongitudinal.AddCell(BMPercentPORT);
                    tblLongitudinal.AddCell(Status);

                    DataSet dsLongitudinalFrame = new DataSet();
                    command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    Err = "";
                    cmd = "   select [Frame],[SF],[SF_Percentage_Diff_at_Sea],[SF_Percentage_Diff_at_Port],[BM],[BM_Percentage_Diff_at_Sea],[BM_Percentage_Diff_at_Port],[Status] FROM [Saushyant_Stability].[dbo].[tbl_SimulationMode_SFAndBM_New]";
                    command.CommandText = cmd;
                    command.CommandType = CommandType.Text;
                    dsLongitudinalFrame = Models.DAL.clsDBUtilityMethods.GetDataSet(command, Err);
                    DataTable dtLongitudinalFrame = new DataTable();
                    dtLongitudinalFrame = dsLongitudinalFrame.Tables[0];
                    dtfinal = dtLongitudinalFrame.Clone();
                    foreach (DataRow dr in dtLongitudinalFrame.Rows)
                    {
                        dtfinal.Rows.Add(dr.ItemArray);
                    }
                    dtfinal.Columns.Remove("Status");
                    dtfinal.Columns.Add("Status", typeof(string));

                    for (int i = 0; i < dtLongitudinalFrame.Rows.Count; i++)
                    {
                        if (dtLongitudinalFrame.Rows[i]["Status"].ToString() == "1")
                        {
                            dtfinal.Rows[i]["Status"] = "OK";
                        }
                        else
                        {
                            dtfinal.Rows[i]["Status"] = "NOT OK";
                        }
                    }
                    dtfinal.Columns["Status"].ReadOnly = true;
                    int columnCountLongitudinal = dtfinal.Columns.Count;
                    int rowCountLongitudinal = dtfinal.Rows.Count;
                    for (int rowCounter = 0; rowCounter < rowCountLongitudinal; rowCounter++)
                    {
                        for (int columnCounter = 0; columnCounter < columnCountLongitudinal; columnCounter++)
                        {
                            {
                                PdfPCell pdf;
                                string strValue = "";
                                if (columnCounter == 0)
                                {
                                    strValue = (Convert.ToDecimal((dtfinal.Rows[rowCounter][columnCounter]))).ToString();
                                    //strValue = Math.Round(Convert.ToDecimal((dtfinal.Rows[rowCounter][columnCounter]))).ToString();
                                }
                                else
                                {
                                    strValue = (dtfinal.Rows[rowCounter][columnCounter].ToString());
                                }

                                if (strValue == Convert.ToString(0))
                                {
                                    pdf = new PdfPCell(new iTextSharp.text.Paragraph(" ", fntBody));
                                }
                                else
                                {
                                    if (columnCounter == columnCountLongitudinal - 1)
                                    {
                                        if (strValue == "NOT OK")
                                        {
                                           // var red = new BaseColor(255, 0, 0);
                                            iTextSharp.text.Font fntBody1 = FontFactory.GetFont("Times New Roman", 6.5f, iTextSharp.text.Color.RED);
                                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody1));
                                        }
                                        else
                                        {
                                            pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                                        }
                                    }
                                    else
                                    {
                                        decimal d = Convert.ToDecimal(strValue);
                                        string temp = Convert.ToString(Math.Round(d, 2));
                                        pdf = new PdfPCell(new iTextSharp.text.Paragraph(temp, fntBody));
                                    }

                                }
                                pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                                tblLongitudinal.AddCell(pdf);
                            }
                        }
                    }
                    doc.Add(tblLongitudinal);
                }
                doc.Close();
                Mouse.OverrideCursor = null;

                if (DamageAll == 19)
                {

                    string st = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                    string rpath = st + "\\Reports\\AllDamageCases";
                    // var dir = Directory.GetFiles(rpath);
                    DirectoryInfo di = new DirectoryInfo(rpath);
                    FileInfo[] files = di.GetFiles();

                    if (files.Length > 0)
                    {

                        String[] source_files =  { Convert.ToString(rpath + "\\" + files[0]),
                                                   Convert.ToString(rpath + "\\" + files[1]),
                                                   Convert.ToString(rpath + "\\" + files[2]),
                                                   Convert.ToString(rpath + "\\" + files[3]),
                                                   Convert.ToString(rpath + "\\" + files[4]),
                                                   Convert.ToString(rpath + "\\" + files[5]),
                                                   Convert.ToString(rpath + "\\" + files[6]),
                                                   Convert.ToString(rpath + "\\" + files[7]),
                                                   Convert.ToString(rpath + "\\" + files[8]),
                                                   Convert.ToString(rpath + "\\" + files[9]),
                                                   Convert.ToString(rpath + "\\" + files[10]),
                                                   Convert.ToString(rpath + "\\" + files[11]),
                                                   Convert.ToString(rpath + "\\" + files[12]),
                                                   Convert.ToString(rpath + "\\" + files[13]),
                                                   Convert.ToString(rpath + "\\" + files[14]),
                                                   Convert.ToString(rpath + "\\" + files[15]),
                                                   Convert.ToString(rpath + "\\" + files[16]),
                                                   Convert.ToString(rpath + "\\" + files[17]),
                                                   Convert.ToString(rpath + "\\" + files[18]),
                                                  };
                        reportPath = System.Windows.Forms.Application.StartupPath + "\\Reports\\" + "AllDamageCases_" + ISO_Date() + "_Report.pdf";
                        Document document = new Document();
                        //create PdfCopy object
                        PdfCopy copy = new PdfCopy(document, new FileStream(reportPath, FileMode.Create));
                        //open the document
                        document.Open();
                        //PdfReader variable
                        PdfReader reader;
                        for (int i = 0; i < source_files.Length; i++)
                        {
                            //create PdfReader object
                            reader = new PdfReader(source_files[i]);
                            //merge combine pages
                            for (int page = 1; page <= reader.NumberOfPages; page++)
                                copy.AddPage(copy.GetImportedPage(reader, page));
                        }
                        //close the document object
                        string[] fileNames = Directory.GetFiles(rpath);
                        foreach (string fileName in fileNames)
                            //File.Delete(fileName);
                        document.Close();
                    }
                }
                if (DamageAll == 0)
                {
                    System.Windows.MessageBox.Show("PDF Created!");
                }

            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message.ToString());
            }
        }

        #endregion PDFWriter
        #endregion UserFunctions

        #region BackgroundWorker
        void bgWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            isCalculationRunning = false;

            //canvasTwoD.Children.RemoveRange(1, canvasTwoD.Children.Count - 1);


        }
        void bgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // pbCalculation.Value = e.ProgressPercentage;
            //pbCalculation.Value = e.ProgressPercentage;   commnetd by sachin for contaier             

        }
        private void bgWorker_Do_Work(object sender, DoWorkEventArgs e)
        {
            try
            {

                string user = "dbo";
                // int res;
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                command.CommandText = "spCal_SimulationMode_Stability";
                command.CommandType = CommandType.StoredProcedure;
                DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                param1.DbType = DbType.String;
                param1.ParameterName = "@User";
                command.Parameters.Add(param1);

                DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                param2.DbType = DbType.Int16;
                param2.Direction = ParameterDirection.Output;
                param2.ParameterName = "@Stability_Calculation_Result";
                command.Parameters.Add(param2);


                //DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                //param3.DbType = DbType.Double;
                //param3.Direction = ParameterDirection.Output;
                //param3.ParameterName = "@timetaken";
                //command.Parameters.Add(param3);

                param1.Value = user;
                //param2.Value = 0;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                //obj.CalculateSMStability("spCal_SimulationMode_Stability", user, out res);
                Models.DAL.clsSqlData.calculationResult = Convert.ToInt32(command.Parameters[1].Value);
                //Models.DAL.clsSqlData.calculationTimeTaken = Convert.ToInt32(command.Parameters[].Value);
                //bgWorker.ReportProgress(100);
                isCalculationRunning = false;
            }
            catch
            {
            }
        }
        #endregion BackgroundWorker

        private void btnGenerateReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //SpeechSynthesizer speechSynthesizer = new SpeechSynthesizer();
                //speechSynthesizer.Speak("Generate Report!");
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                printToPdf();
                if (DamageAll == 0)
                {
                    System.Diagnostics.Process.Start(reportPath);
                }
                Mouse.OverrideCursor = null;
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                System.Windows.MessageBox.Show(ex.Message.ToString());
            }
        }

        //private void dgFixedLoad_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)   commnetd by sachin for contaier             
        //{
        //    try
        //    {
        //        header = e.Column.Header.ToString();
        //        if (e.Column.GetType().ToString() == "System.Windows.Controls.DataGridTextColumn")
        //        {
        //            index = e.Row.GetIndex();

        //            TextBlock cbo = (System.Windows.Controls.TextBlock)e.Column.GetCellContent(e.Row);


        //        }
        //    }
        //    catch
        //    {

        //    }
        //}



        private void btnSaveLoadingCondition_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                string path = "";

                path = System.IO.Directory.GetCurrentDirectory() + "\\SMData\\" + DateTime.Now.ToString("dd_MM_yyyy_HH_mm") + "_"
                    + "Intact" + "_" + txtLoadingConditionName.Text.ToString();
                Directory.CreateDirectory(path);
                
                List<Tanks> liTanks = new List<Tanks>();
                Tanks objFresh = new Tanks();
                DataTable dt = new DataTable();
                dt = Models.clsGlobVar.dtSimulationAllTanks;
                try
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        int tank_ID = Convert.ToInt32(dr[0].ToString());
                        string group = dr[1].ToString();
                        string tank_Name = dr[2].ToString();
                        string weight = dr[8].ToString();
                        string volume = dr[6].ToString();
                        string percent_Full = dr[9].ToString();
                        string sG = dr[7].ToString();
                        string fSM = dr[13].ToString();
                        string isDamaged = dr[14].ToString();
                        string Max_1_act_0 = dr[4].ToString();
                        //string SoundingLevel = dr[10].ToString();
                        //string Ullage = dr[10].ToString();
                        //string Den@15Deg = dr[10].ToString();
                        //string Temperature = dr[11].ToString();
                        //string VCF = dr[12].ToString();
                        //string Volume_Corr = dr[13].ToString();
                        //string WCF = dr[14].ToString();
                        //string Weight_in_Air = dr[15].ToString();
                        liTanks.Add(new Tanks
                        {
                            Tank_ID = tank_ID,
                            Group = group,
                            Tank_Name = tank_Name,
                            Weight = Convert.ToDecimal(weight),
                            Volume = Convert.ToDecimal(volume),
                            Percent_Full = Convert.ToDecimal(percent_Full),
                            SG = Convert.ToDecimal(sG),
                            FSM = Convert.ToDecimal(fSM),
                            IsDamaged = Convert.ToBoolean(isDamaged),
                            max_1_act_0 = Convert.ToInt32(Max_1_act_0),
                            //SoundingLevel = SoundingLevel,
                            //Ullage=Ullage,
                            //Den@15Deg=Den@15Deg,
                            //Temperature = Temperature,
                            //VCF = VCF,
                            //Volume_Corr = Volume_Corr,
                            //WCF = WCF,
                            //Weight_in_Air = Weight_in_Air
                        });

                    }
                }
                catch { }
                string fn = path + "\\Tanks.cnd";
                FileStream fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                BinaryFormatter objFormat = new BinaryFormatter();
                objFormat.Serialize(fs, liTanks);
                fs.Close();

                try
                {
                    List<FixedItems> listFixedLoads = new List<FixedItems>();
                    FixedItems objDeck1 = new FixedItems();
                    Models.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
                    dt = Models.clsGlobVar.dtSimulationVariableItems;

                    foreach (DataRow dr in dt.Rows)
                    {
                        listFixedLoads.Add(new FixedItems
                        {
                            Tank_ID = Convert.ToInt32(dr[1].ToString()),
                            Tank_Name = dr[0].ToString(),
                            Weight = Convert.ToDecimal(dr[2].ToString()),
                            LCG = Convert.ToDecimal(dr[3].ToString()),
                            TCG = Convert.ToDecimal(dr[4].ToString()),
                            VCG = Convert.ToDecimal(dr[5].ToString()),
                            //FSM = Convert.ToDecimal(dr[6].ToString())
                        });
                    }
                    fn = path + "\\FixedLoads.cnd";

                    fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                    objFormat = new BinaryFormatter();
                    objFormat.Serialize(fs, listFixedLoads);
                    fs.Close();
                }
                catch { }
                //code for container 20 inhold and ondeck
                try
                {
                    List<Bays> listContainerInHold20Loads = new List<Bays>();
                    Bays bays1 = new Bays();
                    dt = Models.clsGlobVar.dtFinalLoadingCondition1;

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (1 == Convert.ToInt32(dr["cmbselected"]))
                        {
                            listContainerInHold20Loads.Add(new Bays
                            {
                                Group = Convert.ToString(dr["location"]),
                                CMBSELECTED = Convert.ToInt32(dr["cmbselected"]),
                                Container_No = Convert.ToInt32(dr["Container_No"]),
                                Container_Count = Convert.ToInt32(dr["Container_Count"]),
                                Bay = dr["BAY"].ToString(),//ADDED BY SACHIN DUE TO NEW COLUMN
                                Weight = Convert.ToDecimal(dr["Weight"]),
                                LCG = Convert.ToDecimal(dr["LCG"]),
                                VCG = Convert.ToDecimal(dr["VCG"]),
                                TCG = Convert.ToDecimal(dr["TCG"]),

                                Container_ID = Convert.ToInt32(dr["Container_ID"]),

                                // Count = Convert.ToInt32(dr["Container_Count"]),


                                //        private int _Container_No=;
                                //        private int _tankid;
                                //        private int _count;
                                //        private int _containerid;
                                //        private string _group;
                                //        private string _bay;

                                //private decimal _weight;
                                //private decimal _lcg;
                                //private decimal _vcg;
                                //private decimal _tcg;

                                //Tank_ID = Convert.ToInt32(dr[0].ToString()),
                                //Tank_Name = dr[2].ToString(),
                                //Weight = Convert.ToDecimal(dr[3].ToString()),
                                //LCG = Convert.ToDecimal(dr[4].ToString()),
                                //TCG = Convert.ToDecimal(dr[5].ToString()),
                                //VCG = Convert.ToDecimal(dr[6].ToString()),
                                //FSM = Convert.ToDecimal(dr[6].ToString())
                            });
                        }
                    }
                    fn = path + "\\bays.cnd";

                    fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                    objFormat = new BinaryFormatter();
                    objFormat.Serialize(fs, listContainerInHold20Loads);
                    fs.Close();
                }
                catch { }
                //end
                //------------//------------------------------------------------------------------------------------------------------------
                try
                {
                    //40ft container in hold and ondeck
                    List<Bays> listContainerInHold40Loads = new List<Bays>();
                    Bays bays2 = new Bays();
                    dt = Models.clsGlobVar.dtFinalLoadingCondition2;

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (1 == Convert.ToInt32(dr["cmbselected"]))
                        {
                            listContainerInHold40Loads.Add(new Bays
                            {
                                Group = Convert.ToString(dr["location"]),
                                CMBSELECTED = Convert.ToInt32(dr["cmbselected"]),
                                Container_No = Convert.ToInt32(dr["Container_No"]),
                                Container_Count = Convert.ToInt32(dr["Container_Count"]),
                                Bay = dr["BAY"].ToString(),//ADDED BY SACHIN DUE TO NEW COLUMN
                                Weight = Convert.ToDecimal(dr["Weight"]),
                                LCG = Convert.ToDecimal(dr["LCG"]),
                                VCG = Convert.ToDecimal(dr["VCG"]),
                                TCG = Convert.ToDecimal(dr["TCG"]),

                                Container_ID = Convert.ToInt32(dr["Container_ID"]),

                                // Count = Convert.ToInt32(dr["Container_Count"]),


                                //        private int _Container_No=;
                                //        private int _tankid;
                                //        private int _count;
                                //        private int _containerid;
                                //        private string _group;
                                //        private string _bay;

                                //private decimal _weight;
                                //private decimal _lcg;
                                //private decimal _vcg;
                                //private decimal _tcg;

                                //Tank_ID = Convert.ToInt32(dr[0].ToString()),
                                //Tank_Name = dr[2].ToString(),
                                //Weight = Convert.ToDecimal(dr[3].ToString()),
                                //LCG = Convert.ToDecimal(dr[4].ToString()),
                                //TCG = Convert.ToDecimal(dr[5].ToString()),
                                //VCG = Convert.ToDecimal(dr[6].ToString()),
                                //FSM = Convert.ToDecimal(dr[6].ToString())
                            });
                        }
                    }
                    fn = path + "\\bays40.cnd";

                    fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                    objFormat = new BinaryFormatter();
                    objFormat.Serialize(fs, listContainerInHold40Loads);
                    fs.Close();
                }
                catch { }
                //end
                //20showbay
                //code for showbay 20 inhold and ondeck
                try
                {
                    List<Bays> listbayInHold20Loads = new List<Bays>();
                    Bays bays3 = new Bays();
                    dt = Models.clsGlobVar.dtshowbay20;

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (1 == Convert.ToInt32(dr["cmbselected"]))
                        {
                            listbayInHold20Loads.Add(new Bays
                            {
                                Group = Convert.ToString(dr["location"]),
                                CMBSELECTED = Convert.ToInt32(dr["cmbselected"]),
                                Container_No = Convert.ToInt32(dr["Container_No"]),
                                Bay = dr["BAY"].ToString(),//ADDED BY SACHIN DUE TO NEW COLUMN
                                Weight = Convert.ToDecimal(dr["Weight"]),
                                LCG = Convert.ToDecimal(dr["LCG"]),
                                VCG = Convert.ToDecimal(dr["VCG"]),
                                TCG = Convert.ToDecimal(dr["TCG"]),

                                //Container_ID = Convert.ToInt32(dr["Container_ID"]),

                                // Count = Convert.ToInt32(dr["Container_Count"]),


                                //        private int _Container_No=;
                                //        private int _tankid;
                                //        private int _count;
                                //        private int _containerid;
                                //        private string _group;
                                //        private string _bay;

                                //private decimal _weight;
                                //private decimal _lcg;
                                //private decimal _vcg;
                                //private decimal _tcg;

                                //Tank_ID = Convert.ToInt32(dr[0].ToString()),
                                //Tank_Name = dr[2].ToString(),
                                //Weight = Convert.ToDecimal(dr[3].ToString()),
                                //LCG = Convert.ToDecimal(dr[4].ToString()),
                                //TCG = Convert.ToDecimal(dr[5].ToString()),
                                //VCG = Convert.ToDecimal(dr[6].ToString()),
                                //FSM = Convert.ToDecimal(dr[6].ToString())
                            });
                        }
                    }
                    fn = path + "\\showbays20.cnd";

                    fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                    objFormat = new BinaryFormatter();
                    objFormat.Serialize(fs, listbayInHold20Loads);
                    fs.Close();
                    //end
                    //end 

                }
                catch { }

                try
                {
                    List<Bays> listbayInHold40Loads = new List<Bays>(); //code for showbay 40 inhold and ondeck
                    Bays bays4 = new Bays();
                    dt = Models.clsGlobVar.dtshowbay40;

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (1 == Convert.ToInt32(dr["cmbselected"]))
                        {
                            listbayInHold40Loads.Add(new Bays
                            {
                                Group = Convert.ToString(dr["location"]),
                                CMBSELECTED = Convert.ToInt32(dr["cmbselected"]),
                                Container_No = Convert.ToInt32(dr["Container_No"]),
                                Bay = dr["BAY"].ToString(),//ADDED BY SACHIN DUE TO NEW COLUMN
                                Weight = Convert.ToDecimal(dr["Weight"]),
                                LCG = Convert.ToDecimal(dr["LCG"]),
                                VCG = Convert.ToDecimal(dr["VCG"]),
                                TCG = Convert.ToDecimal(dr["TCG"]),

                                //Container_ID = Convert.ToInt32(dr["Container_ID"]),

                                // Count = Convert.ToInt32(dr["Container_Count"]),


                                //        private int _Container_No=;
                                //        private int _tankid;
                                //        private int _count;
                                //        private int _containerid;
                                //        private string _group;
                                //        private string _bay;

                                //private decimal _weight;
                                //private decimal _lcg;
                                //private decimal _vcg;
                                //private decimal _tcg;

                                //Tank_ID = Convert.ToInt32(dr[0].ToString()),
                                //Tank_Name = dr[2].ToString(),
                                //Weight = Convert.ToDecimal(dr[3].ToString()),
                                //LCG = Convert.ToDecimal(dr[4].ToString()),
                                //TCG = Convert.ToDecimal(dr[5].ToString()),
                                //VCG = Convert.ToDecimal(dr[6].ToString()),
                                //FSM = Convert.ToDecimal(dr[6].ToString())
                            });
                        }
                    }
                    fn = path + "\\showbays40.cnd";

                    fs = new FileStream(fn, FileMode.Create, FileAccess.Write, FileShare.None);
                    objFormat = new BinaryFormatter();
                    objFormat.Serialize(fs, listbayInHold40Loads);
                    fs.Close();
                    //end
                    //end 

                }
                catch { }






                Mouse.OverrideCursor = null;
                System.Windows.MessageBox.Show("Loading Condition Saved Successfully");
                (window as MainWindow).txtLoadingConditionName.Text = "";
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
                Mouse.OverrideCursor = null;
            }
        }

        private void ReportInPDF_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start("explorer.exe", System.Windows.Forms.Application.StartupPath + @"\Reports");
        }

        private void SavedLoadingCondition_Click(object sender, RoutedEventArgs e)
        {
            LoadingCondition objLoadingCondition = new LoadingCondition("\\SMData");
            objLoadingCondition.ShowDialog();
        }

        private void StandardLoadingCondition_Click(object sender, RoutedEventArgs e)
        {
            LoadingCondition objLoadingCondition = new LoadingCondition("\\StandardData\\");
            objLoadingCondition.ShowDialog();
        }

        private void dgTanks_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            System.Windows.Input.Key k = e.Key;
            bool controlKeyIsDown = Keyboard.IsKeyDown(Key.LeftShift);
            if (!controlKeyIsDown &&
               Key.D0 <= k && k <= Key.D9 ||
                 Key.NumPad0 <= k && k <= Key.NumPad9 ||
                 k == Key.Decimal || k == Key.OemPeriod)
            {
                //e.Handled = false;

            }
            else
            {
                e.Handled = true;

            }
        }

        private void dgTanks_CurrentCellChanged(object sender, EventArgs e)
        {
            try
            {
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                int TankId, fsmType;
                decimal percentfill;
                decimal sounding;

                TankId = Convert.ToInt16((dgTanks.Items[index] as DataRowView)["Tank_ID"]);

                if (header == "Volume" || header == "% Fill" || header == "S.G." || header == "Weight" || header == "Sounding" || header == "Temp" || header == "Ullage"|| header=="Den@15Deg")
                {
                    decimal volume = 0, sg, weight = 0, VCF = 0, WCF = 0, WtInAir = 0, VolumeCor = 0;
                    decimal minsounding = 0;
                    decimal temp = 0;
                    string Grp = (dgTanks.Items[index] as DataRowView)["Group"].ToString();
                    weight = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Weight"]);
                    volume = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Volume"]);
                    sg = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["SG"]);
                    percentfill = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Percent_Full"]);
                    //sounding = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Sounding_Level"]);
                    //Ullage = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Ullage"]);
                    //Den@15Deg = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Den@15Deg"]);
                    //temp = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Temperature"]);
                    //VCF = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["VCF"]);
                    //VolumeCor = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Volume_Corr"]);
                    //WCF= Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["WCF"]);
                    //WtInAir = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Weight_in_Air"]);
                    decimal maxsounding = maxVolume[TankId];

                    if (header == "Volume")
                    {



                        //command.CommandText = "SPChangeVolume";
                        //command.CommandType = CommandType.StoredProcedure;

                        //DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param1.DbType = DbType.Decimal;
                        //param1.ParameterName = "@Volume";
                        //command.Parameters.Add(param1);

                        //DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param2.DbType = DbType.Int32;
                        //param2.ParameterName = "@TankId";
                        //command.Parameters.Add(param2);

                        //DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param3.DbType = DbType.Double;
                        //param3.Direction = ParameterDirection.Output;
                        //param3.ParameterName = "@Sounding";
                        //command.Parameters.Add(param3);

                        //DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param4.DbType = DbType.Double;
                        //param4.Direction = ParameterDirection.Output;
                        //param4.ParameterName = "@Percent";
                        //command.Parameters.Add(param4);

                        ////DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        ////param5.DbType = DbType.Double;
                        ////param5.Direction = ParameterDirection.Output;
                        ////param5.ParameterName = "@Ullage";
                        ////command.Parameters.Add(param5);


                        //param1.Value = volume;
                        //param2.Value = TankId;
                        //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                        //sounding =  Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
                        //percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
                        ////Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
                        
                        //volume = Convert.ToDecimal(((sender as DataGrid).Items[index] as DataRowView)["Volume"]);
                        percentfill = Convert.ToDecimal((volume * 100) / maxsounding);
                        weight = volume * sg;
                    }
                    if (header == "% Fill")
                    {
                        //command.CommandText = "SPChangePercentFill";
                        //command.CommandType = CommandType.StoredProcedure;

                        //DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param1.DbType = DbType.Decimal;
                        //param1.ParameterName = "@Percent";
                        //command.Parameters.Add(param1);

                        //DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param2.DbType = DbType.Int32;
                        //param2.ParameterName = "@TankId";
                        //command.Parameters.Add(param2);

                        ////DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        ////param3.DbType = DbType.Double;
                        ////param3.Direction = ParameterDirection.Output;
                        ////param3.ParameterName = "@Sounding";
                        ////command.Parameters.Add(param3);

                        //DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param4.DbType = DbType.Double;
                        //param4.Direction = ParameterDirection.Output;
                        //param4.ParameterName = "@Volume";
                        //command.Parameters.Add(param4);

                        //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param5.DbType = DbType.Double;
                        //param5.Direction = ParameterDirection.Output;
                        //param5.ParameterName = "@Ullage";
                        //command.Parameters.Add(param5);

                        //param1.Value = percentfill;
                        //param2.Value = TankId;
                        //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                        //sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
                        //volume = Math.Round(Convert.ToDecimal(command.Parameters["@Volume"].Value), 3);
                        //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
                        volume = (percentfill * maxsounding) / 100;
                        weight = volume * sg;
                    }
                    if (header == "S.G.")
                    {
                        volume = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["Volume"]);

                        weight = volume * sg;
                    }
                    if (header == "Weight")
                    {
                        //command.CommandText = "SPChangeVolume";
                        //command.CommandType = CommandType.StoredProcedure;

                        //DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param1.DbType = DbType.Decimal;
                        //param1.ParameterName = "@Volume";
                        //command.Parameters.Add(param1);

                        //DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param2.DbType = DbType.Int32;
                        //param2.ParameterName = "@TankId";
                        //command.Parameters.Add(param2);

                        //DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param3.DbType = DbType.Double;
                        //param3.Direction = ParameterDirection.Output;
                        //param3.ParameterName = "@Sounding";
                        //command.Parameters.Add(param3);

                        //DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        //param4.DbType = DbType.Double;
                        //param4.Direction = ParameterDirection.Output;
                        //param4.ParameterName = "@Percent";
                        //command.Parameters.Add(param4);

                        ////DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
                        ////param5.DbType = DbType.Double;
                        ////param5.Direction = ParameterDirection.Output;
                        ////param5.ParameterName = "@Ullage";
                        ////command.Parameters.Add(param5);

                        //param1.Value = weight/sg;
                        //param2.Value = TankId;
                        //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                        //sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
                        //percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
                        //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
                        //volume = Convert.ToDecimal(((sender as DataGrid).Items[index] as DataRowView)["Weight"]) / sg;
                        
                        volume = weight/sg;
                        percentfill = Convert.ToDecimal((volume * 100) / maxsounding);
                    }
                    //if(header == "Sounding")
                    //{
                        
                    //        command.CommandText = "SPChangeSounding";
                    //        command.CommandType = CommandType.StoredProcedure;

                    //        DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //        param1.DbType = DbType.Decimal;
                    //        param1.ParameterName = "@Sounding";
                    //        command.Parameters.Add(param1);

                    //        DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //        param2.DbType = DbType.Int32;
                    //        param2.ParameterName = "@TankId";
                    //        command.Parameters.Add(param2);

                    //        DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //        param3.DbType = DbType.Double;
                    //        param3.Direction = ParameterDirection.Output;
                    //        param3.ParameterName = "@Percent";
                    //        command.Parameters.Add(param3);

                    //        DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //        param4.DbType = DbType.Double;
                    //        param4.Direction = ParameterDirection.Output;
                    //        param4.ParameterName = "@Volume";
                    //        command.Parameters.Add(param4);

                    //        //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //        //param5.DbType = DbType.Double;
                    //        //param5.Direction = ParameterDirection.Output;
                    //        //param5.ParameterName = "@Ullage";
                    //        //command.Parameters.Add(param5);

                    //        param1.Value = sounding;
                    //        param2.Value = TankId;
                    //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                    //        percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
                    //        volume = Math.Round(Convert.ToDecimal(command.Parameters["@Volume"].Value), 3);
                    //        //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
                    //        weight = volume * sg;
                    
                    //}20.11.22

                    //if (header == "Ullage")
                    //{

                    //    command.CommandText = "SPChangeUllage";
                    //    command.CommandType = CommandType.StoredProcedure;

                    //    DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //    param1.DbType = DbType.Decimal;
                    //    param1.ParameterName = "@Ullage";
                    //    command.Parameters.Add(param1);

                    //    DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //    param2.DbType = DbType.Int32;
                    //    param2.ParameterName = "@TankId";
                    //    command.Parameters.Add(param2);

                    //    DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //    param3.DbType = DbType.Double;
                    //    param3.Direction = ParameterDirection.Output;
                    //    param3.ParameterName = "@Percent";
                    //    command.Parameters.Add(param3);

                    //    DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //    param4.DbType = DbType.Double;
                    //    param4.Direction = ParameterDirection.Output;
                    //    param4.ParameterName = "@Volume";
                    //    command.Parameters.Add(param4);

                    //    //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
                    //    //param5.DbType = DbType.Double;
                    //    //param5.Direction = ParameterDirection.Output;
                    //    //param5.ParameterName = "@Sounding";
                    //    //command.Parameters.Add(param5);

                    //    param1.Value = Ullage;
                    //    param2.Value = TankId;
                    //    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                    //    percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
                    //    volume = Math.Round(Convert.ToDecimal(command.Parameters["@Volume"].Value), 3);
                    //    Sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
                    //    weight = volume * sg;

                    //}




                    //if (header == "Temp" && Grp == "CARGO_TANK" && cbDensity.IsChecked == true)
                    //{
                    //    double DensityValue = Convert.ToDouble(txtDensity.Text);
                    //    if (DensityValue <= 0.770)
                    //    {

                    //        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((346.422 + 0.438 * DensityValue * 1000) / (DensityValue * 1000 * DensityValue * 1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((346.422 + 0.438 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));


                    //    }
                    //    if (DensityValue >= 0.839)
                    //    {

                    //        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((594.5418 + 0 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((594.5418 + 0 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
                    //    }
                    //    if (DensityValue >= 0.778 && DensityValue < 0.839)
                    //    {

                    //        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((186.9696 + 0.4861 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((186.9696 + 0.4861 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
                    //    }
                    //    if (DensityValue > 0.770 && DensityValue < 0.778)
                    //    {

                    //        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((-0.003361 + 2680.32) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((-0.003361 + 2680.32) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
                    //    }



                    //    WCF = Convert.ToDecimal((DensityValue) - 0.0011);
                    //    VolumeCor = VCF * volume;
                    //    WtInAir = VolumeCor * WCF;
                    //}
                    else
                    {
                        temp = 0;
                    }
                   
                    weight = volume * sg;
                    (dgTanks.Items[index] as DataRowView)["Volume"] = Math.Round(volume, 3);
                    (dgTanks.Items[index] as DataRowView)["Weight"] = Math.Round(weight, 3);
                    (dgTanks.Items[index] as DataRowView)["Percent_Full"] = Math.Round(percentfill, 3);
                    //(dgTanks.Items[index] as DataRowView)["Sounding_Level"] = Math.Round(sounding, 3);
                    //(dgTanks.Items[index] as DataRowView)["Ullage"] = Math.Round(Ullage, 3);
                   //(dgTanks.Items[index] as DataRowView)["Den@15Deg"] = Math.Round(Den@15Deg, 3);
                    //(dgTanks.Items[index] as DataRowView)["Temperature"] = Math.Round(temp, 3);
                    //(dgTanks.Items[index] as DataRowView)["VCF"] = Math.Round(VCF, 3);
                    //(dgTanks.Items[index] as DataRowView)["Volume_Corr"] = Math.Round(VolumeCor, 3);
                    //(dgTanks.Items[index] as DataRowView)["WCF"] = Math.Round(WCF, 3);
                    //(dgTanks.Items[index] as DataRowView)["Weight_in_Air"] = Math.Round(WtInAir, 3);
                    (dgTanks.Items[index] as DataRowView)["SG"] = Math.Round(sg, 3);
            
                    decimal res1 = decimal.Compare(minsounding, volume);
                    decimal res2 = decimal.Compare(volume, maxsounding);
                    int result1 = (int)res1;
                    int result2 = (int)res2;
                    if (result1 > 0 || result2 > 0)
                    {
                        string error = "Volume should be between " + minsounding + " and " + maxsounding;
                        System.Windows.MessageBox.Show(error);
                        // e.Cancel = true;
                        return;
                    }
                    else
                    {
                        //string query = "update tblSimulationMode_Tank_Status set [Volume]=" + volume + " ,[Sounding_Level]=" + sounding + ",[SG]=" + sg + ",";
                        //query += "[Temperature]=" + temp + " ,[VCF]=" + VCF + ",[Volume_Corr]=" + VolumeCor + ",[WCF]=" + WCF + ",[Weight_in_Air]=" + WtInAir + "" ;
                        //query += " where Tank_ID=" + TankId + " ";
                        string query = "update tblSimulationMode_Tank_Status set [Volume]=" + Math.Round(volume, 3) + " ,[SG]=" + sg + ",";
                        query += "[weight]="+ Math.Round(weight,3)+"";
                        query += " where Tank_ID=" + TankId + " ";
                        query += "update tblSimulationMode_Loading_Condition set [Percent_Full]=" + percentfill+" ";
                        query += " where Tank_ID=" + TankId + " ";
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                    }
                    index = -1;
                    TankId = 0;
                }

                if (header == "FSM")
                {
                    decimal fsm;
                    fsm = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["FSM"]);
                    fsmType = Convert.ToInt16((dgTanks.Items[index] as DataRowView)["max_1_act_0"]);

                    if (fsmType == 2)
                    {
                        string query1 = "update tblSimulationMode_Loading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
                        command.CommandText = query1;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                    }
                }

            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.ToString());
            }

        }

        //private void dgFixedLoad_CurrentCellChanged(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //        string Err = "";
        //        int TankId;
        //        decimal weight, vcg, lcg, tcg, fsm;
        //        TankId = Convert.ToInt16((dgFixedLoad.Items[index] as DataRowView)["Tank_ID"]);
        //        weight = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["Weight"]);
        //        vcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["VCG"]);
        //        lcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["LCG"]);
        //        tcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["TCG"]);
        //        fsm = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["FSM"]);

        //        string query = "update tblSimulationMode_Tank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
        //        query += " update tblSimulationMode_Loading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
        //        query += " update tblTank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
        //        query += " update  tblLoading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
        //        query += " update  tblLoading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
        //        command.CommandText = query;
        //        command.CommandType = CommandType.Text;
        //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //    }
        //    catch
        //    {
        //    }
        //}


        //private void dgFixedLoad_CurrentCellChanged(object sender, EventArgs e)   commnetd by sachin for contaier             
        //{
        //    try
        //    {
        //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //        string Err = "", TankName = "";
        //        int TankId;
        //        decimal weight, vcg, lcg, tcg, fsm;
        //        TankId = Convert.ToInt16((dgFixedLoad.Items[index] as DataRowView)["Tank_ID"]);
        //        weight = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["Weight"]);
        //        vcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["VCG"]);
        //        lcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["LCG"]);
        //        tcg = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["TCG"]);
        //        fsm = Convert.ToDecimal((dgFixedLoad.Items[index] as DataRowView)["FSM"]);
        //        TankName = ((dgFixedLoad.Items[index] as DataRowView)["Tank_Name"]).ToString();

        //        string query = "update tblSimulationMode_Tank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";

        //        query += "update tblSimulationMode_Loading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
        //        query += "update tblSimulationMode_Loading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
        //        query += " update tblSimulationMode_Loading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;

        //        query += " update tblTank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
        //        query += " update  tblLoading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
        //        query += " update  tblLoading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
        //        query += " update tblLoading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
        //        query += " update [tblMaster_Tank] set [Tank_Name]='" + TankName + "' where Tank_ID=" + TankId;
        //        command.CommandText = query;
        //        command.CommandType = CommandType.Text;
        //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //    }
        //    catch
        //    {
        //    }
        //}
        #region 2D
        private Bounds3D bounds;
        //DxfModel model;
        private WpfWireframeGraphics3DUsingDrawingVisual wpfGraphics;
        private WireframeGraphics2Cache graphicsCache;
        private GraphicsConfig graphicsConfig;
        private System.Windows.Media.Media3D.Vector3D translation;
        //private Vector3D translationAtMouseClick;
        private double scaling = 1d;
        //private Point2D mouseDownLocation;
        //private bool mouseDown;
        //private Point _initialPoint;
        Assembly assembly = Assembly.GetExecutingAssembly();
        //private System.Windows.Point startPt;
        //private int wid;
        //private int hei;
        //private System.Windows.Point lastLoc;
        //private double CanvasLeft, CanvasTop;
        public void Model(DxfModel model)
        {
            if (model != null)
            {
                DxfLayout paperSpaceLayout = model.ActiveLayout;
                if (model.Header.ShowModelSpace)
                {
                    paperSpaceLayout = null;
                }

                #region calculate the model's bounds to determine a proper dots per inch

                // The dots per inch value is important because it determines the eventual pen thickness.
                graphicsConfig = (GraphicsConfig)GraphicsConfig.WhiteBackgroundCorrectForBackColor.Clone();
                //GraphicsConfig.
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                if (model.ActiveLayout == null || model.Header.ShowModelSpace)
                {
                    boundsCalculator.GetBounds(model);
                }
                else
                {
                    boundsCalculator.GetBounds(model, model.ActiveLayout);
                }
                bounds = boundsCalculator.Bounds;
                WW.Math.Vector3D delta = bounds.Delta;
                System.Windows.Size estimatedCanvasSize = new System.Windows.Size(200d, 200d);
                double estimatedScale = Math.Min(estimatedCanvasSize.Width / delta.X, estimatedCanvasSize.Height / delta.Y);
                graphicsConfig.DotsPerInch = 30d / estimatedScale;
                BoundsCalculator boundsCalculator1 = new BoundsCalculator();
                //boundsCalculator1.GetBounds(model, model.Entities[20]);

                boundsCalculator1.GetBounds(model, model.Entities[19]);
                #endregion

                graphicsCache = new WireframeGraphics2Cache(false, false);
                graphicsCache.Config = graphicsConfig;
                if (model.ActiveLayout == null || model.Header.ShowModelSpace)
                {
                    graphicsCache.CreateDrawables(model, Matrix4D.Identity);

                }
                else
                {
                    graphicsCache.CreateDrawables(model, model.ActiveLayout);
                }

                wpfGraphics = new WpfWireframeGraphics3DUsingDrawingVisual();
                wpfGraphics.Config = graphicsConfig;

                canvasTwoD.Children.Add(wpfGraphics.Canvas);

                UpdateWpfGraphics();

                canvasTwoD.SizeChanged += canvas_SizeChanged;

            }

        }

        private static Bitmap CreateOneUnitToOnePixelBitmap(
        DxfModel model,
        Matrix4D transform,
        GraphicsConfig graphicsConfig,
        SmoothingMode smoothingMode)
        {

            System.Drawing.Size maxSize = new System.Drawing.Size(1000, 600);
            return ImageExporter.CreateAutoSizedBitmap(model, Matrix4D.Identity,
                                GraphicsConfig.WhiteBackgroundCorrectForBackColor,
                                SmoothingMode.HighQuality,
                                maxSize);

        }
        private void UpdateWpfGraphics()
        {
            wpfGraphics.DrawingVisuals.Clear();
            IWireframeGraphicsFactory2 graphicsFactory = wpfGraphics.CreateGraphicsFactory();
            foreach (IWireframeDrawable2 drawable in graphicsCache.Drawables)
            {
                drawable.Draw(graphicsFactory);

            }
        }
        private void UpdateRenderTransform()
        {
            double canvasWidth = canvasTwoD.ActualWidth;
            double canvasHeight = canvasTwoD.ActualHeight;
            MatrixTransform baseTransform = DxfUtil.GetScaleWMMatrixTransform(
                (Point2D)bounds.Corner1,
                (Point2D)bounds.Corner2,
                (Point2D)bounds.Center,
                new Point2D(1d, canvasHeight),
                new Point2D(canvasWidth, 1d),
                new Point2D(0.5d * (canvasWidth + 1d), 0.5d * (canvasHeight + 1d))
                );

            TransformGroup transformGroup = new TransformGroup();
            transformGroup.Children.Add(baseTransform);
            transformGroup.Children.Add(new TranslateTransform()
            {
                X = -canvasWidth / 2d,
                Y = -canvasHeight / 2d
            });
            transformGroup.Children.Add(new ScaleTransform()
            {
                ScaleX = scaling,
                ScaleY = scaling
            });
            transformGroup.Children.Add(new TranslateTransform()
            {
                X = canvasWidth / 2d,
                Y = canvasHeight / 2d
            });
            transformGroup.Children.Add(new TranslateTransform()
            {
                X = translation.X * canvasWidth / 2d,
                Y = -translation.Y * canvasHeight / 2d
            });

            canvasTwoD.RenderTransform = transformGroup;
        }

        public void AddHatchProfile()
        {
            try
            {
                // Cargo TANK
                //DrawHatchCT1PS(canvasTwoD, 1, clsGlobVar.Tank1_PercentFill, clsGlobVar.ProfileCoordinate.Tank1x, clsGlobVar.ProfileCoordinate.Tank1y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
               // DrawHatchCT1PS(canvasTwoD, 2, clsGlobVar.Tank2_PercentFill, clsGlobVar.ProfileCoordinate.Tank2x, clsGlobVar.ProfileCoordinate.Tank2y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchCT3PS(canvasTwoD, 3, clsGlobVar.Tank3_PercentFill, clsGlobVar.ProfileCoordinate.Tank3x, clsGlobVar.ProfileCoordinate.Tank3y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchCT3PS(canvasTwoD, 4, clsGlobVar.Tank4_PercentFill, clsGlobVar.ProfileCoordinate.Tank4x, clsGlobVar.ProfileCoordinate.Tank4y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT5PS(canvasTwoD, 5, clsGlobVar.Tank5_PercentFill, clsGlobVar.ProfileCoordinate.Tank5x, clsGlobVar.ProfileCoordinate.Tank5y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT5PS(canvasTwoD, 6, clsGlobVar.Tank6_PercentFill, clsGlobVar.ProfileCoordinate.Tank6x, clsGlobVar.ProfileCoordinate.Tank6y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT7PS(canvasTwoD, 7, clsGlobVar.Tank7_PercentFill, clsGlobVar.ProfileCoordinate.Tank7x, clsGlobVar.ProfileCoordinate.Tank7y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT7PS(canvasTwoD, 8, clsGlobVar.Tank8_PercentFill, clsGlobVar.ProfileCoordinate.Tank8x, clsGlobVar.ProfileCoordinate.Tank8y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT9PS(canvasTwoD, 9, clsGlobVar.Tank9_PercentFill, clsGlobVar.ProfileCoordinate.Tank9x, clsGlobVar.ProfileCoordinate.Tank9y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT9PS(canvasTwoD, 10, clsGlobVar.Tank10_PercentFill, clsGlobVar.ProfileCoordinate.Tank10x, clsGlobVar.ProfileCoordinate.Tank10y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchCT11PS(canvasTwoD, 11, clsGlobVar.Tank11_PercentFill, clsGlobVar.ProfileCoordinate.Tank11x, clsGlobVar.ProfileCoordinate.Tank11y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                ////DrawHatchCT11PS(canvasTwoD, 12, clsGlobVar.Tank12_PercentFill, clsGlobVar.ProfileCoordinate.Tank12x, clsGlobVar.ProfileCoordinate.Tank12y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchSlopTk13PS(canvasTwoD, 13, clsGlobVar.Tank13_PercentFill, clsGlobVar.ProfileCoordinate.Tank13x, clsGlobVar.ProfileCoordinate.Tank13y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                //DrawHatchSlopTk13PS(canvasTwoD, 14, clsGlobVar.Tank14_PercentFill, clsGlobVar.ProfileCoordinate.Tank14x, clsGlobVar.ProfileCoordinate.Tank14y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));

                //////BALLAST_TANK

                //DrawHatchFPTK(canvasTwoD, 15, clsGlobVar.Tank15_PercentFill, clsGlobVar.ProfileCoordinate.Tank15x, clsGlobVar.ProfileCoordinate.Tank15y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK1(canvasTwoD, 16, clsGlobVar.Tank16_PercentFill, clsGlobVar.ProfileCoordinate.Tank16x, clsGlobVar.ProfileCoordinate.Tank16y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK1(canvasTwoD, 17, clsGlobVar.Tank17_PercentFill, clsGlobVar.ProfileCoordinate.Tank17x, clsGlobVar.ProfileCoordinate.Tank17y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK2(canvasTwoD, 18, clsGlobVar.Tank18_PercentFill, clsGlobVar.ProfileCoordinate.Tank18x, clsGlobVar.ProfileCoordinate.Tank18y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK2(canvasTwoD, 19, clsGlobVar.Tank19_PercentFill, clsGlobVar.ProfileCoordinate.Tank19x, clsGlobVar.ProfileCoordinate.Tank19y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK3(canvasTwoD, 20, clsGlobVar.Tank20_PercentFill, clsGlobVar.ProfileCoordinate.Tank20x, clsGlobVar.ProfileCoordinate.Tank20y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK3(canvasTwoD, 21, clsGlobVar.Tank21_PercentFill, clsGlobVar.ProfileCoordinate.Tank21x, clsGlobVar.ProfileCoordinate.Tank21y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK4(canvasTwoD, 22, clsGlobVar.Tank22_PercentFill, clsGlobVar.ProfileCoordinate.Tank22x, clsGlobVar.ProfileCoordinate.Tank22y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK4(canvasTwoD, 23, clsGlobVar.Tank23_PercentFill, clsGlobVar.ProfileCoordinate.Tank23x, clsGlobVar.ProfileCoordinate.Tank23y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK5(canvasTwoD, 24, clsGlobVar.Tank24_PercentFill, clsGlobVar.ProfileCoordinate.Tank24x, clsGlobVar.ProfileCoordinate.Tank24y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                ////DrawHatchWBTK5(canvasTwoD, 25, clsGlobVar.Tank25_PercentFill, clsGlobVar.ProfileCoordinate.Tank25x, clsGlobVar.ProfileCoordinate.Tank25y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                ////DrawHatchWBTK6(canvasTwoD, 26, clsGlobVar.Tank26_PercentFill, clsGlobVar.ProfileCoordinate.Tank26x, clsGlobVar.ProfileCoordinate.Tank26y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchWBTK6(canvasTwoD, 27, clsGlobVar.Tank27_PercentFill, clsGlobVar.ProfileCoordinate.Tank27x, clsGlobVar.ProfileCoordinate.Tank27y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchAPTK28(canvasTwoD, 28, clsGlobVar.Tank28_PercentFill, clsGlobVar.ProfileCoordinate.Tank28x, clsGlobVar.ProfileCoordinate.Tank28y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));

                ////FUEL_OIL_TANK
                ////DrawHatchHFOTK(canvasTwoD, 29, clsGlobVar.Tank29_PercentFill, clsGlobVar.ProfileCoordinate.Tank29x, clsGlobVar.ProfileCoordinate.Tank29y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                ////DrawHatchHFOTK(canvasTwoD, 30, clsGlobVar.Tank30_PercentFill, clsGlobVar.ProfileCoordinate.Tank30x, clsGlobVar.ProfileCoordinate.Tank30y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                ////DrawHatchHFOTK31(canvasTwoD, 31, clsGlobVar.Tank31_PercentFill, clsGlobVar.ProfileCoordinate.Tank31x, clsGlobVar.ProfileCoordinate.Tank31y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchHFOSETTTK32(canvasTwoD, 32, clsGlobVar.Tank32_PercentFill, clsGlobVar.ProfileCoordinate.Tank32x, clsGlobVar.ProfileCoordinate.Tank32y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchHFOSERVTK33(canvasTwoD, 33, clsGlobVar.Tank33_PercentFill, clsGlobVar.ProfileCoordinate.Tank33x, clsGlobVar.ProfileCoordinate.Tank33y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));


                ////FRESHWATER_TANK

                //DrawHatchFWTK34(canvasTwoD, 34, clsGlobVar.Tank34_PercentFill, clsGlobVar.ProfileCoordinate.Tank34x, clsGlobVar.ProfileCoordinate.Tank34y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));
                //DrawHatchFWTK34(canvasTwoD, 35, clsGlobVar.Tank35_PercentFill, clsGlobVar.ProfileCoordinate.Tank35x, clsGlobVar.ProfileCoordinate.Tank35y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));

                ////DIESEL_OIL_TANK
                //DrawHatchDOSTORTK36(canvasTwoD, 36, clsGlobVar.Tank36_PercentFill, clsGlobVar.ProfileCoordinate.Tank36x, clsGlobVar.ProfileCoordinate.Tank36y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDOSTORTK36(canvasTwoD, 37, clsGlobVar.Tank37_PercentFill, clsGlobVar.ProfileCoordinate.Tank37x, clsGlobVar.ProfileCoordinate.Tank37y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                ////DrawHatchDOSETTTK38(canvasTwoD, 38, clsGlobVar.Tank38_PercentFill, clsGlobVar.ProfileCoordinate.Tank38x, clsGlobVar.ProfileCoordinate.Tank38y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //////DrawHatchProfile(canvasTwoD, 39, clsGlobVar.Tank39_PercentFill, clsGlobVar.ProfileCoordinate.Tank39x, clsGlobVar.ProfileCoordinate.Tank39y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));

                
                

                //DrawTrimLine();
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }
        }

        
        public void AddHatchDeckPlan()
        {
            try
            {


                // Cargo TANK
                DrawHatchDeckPlan(canvasTwoD, 1, clsGlobVar.Tank1_PercentFill, clsGlobVar.Tank1x, clsGlobVar.Tank1y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //// DrawHatchDeckPlan(canvasTwoD, 2, clsGlobVar.Tank2_PercentFill, clsGlobVar.Tank1x, clsGlobVar.Tank1y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 3, clsGlobVar.Tank2_PercentFill, clsGlobVar.Tank2x, clsGlobVar.Tank2y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 4, clsGlobVar.Tank3_PercentFill, clsGlobVar.Tank3x, clsGlobVar.Tank3y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 5, clsGlobVar.Tank4_PercentFill, clsGlobVar.Tank4x, clsGlobVar.Tank4y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 6, clsGlobVar.Tank5_PercentFill, clsGlobVar.Tank5x, clsGlobVar.Tank5y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 7, clsGlobVar.Tank6_PercentFill, clsGlobVar.Tank6x, clsGlobVar.Tank6y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 8, clsGlobVar.Tank7_PercentFill, clsGlobVar.Tank7x, clsGlobVar.Tank7y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 9, clsGlobVar.Tank8_PercentFill, clsGlobVar.Tank8x, clsGlobVar.Tank8y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 10, clsGlobVar.Tank9_PercentFill, clsGlobVar.Tank9x, clsGlobVar.Tank9y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 11, clsGlobVar.Tank10_PercentFill, clsGlobVar.Tank10x, clsGlobVar.Tank10y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 12, clsGlobVar.Tank11_PercentFill, clsGlobVar.Tank11x, clsGlobVar.Tank11y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 13, clsGlobVar.Tank12_PercentFill, clsGlobVar.Tank12x, clsGlobVar.Tank12y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 14, clsGlobVar.Tank13_PercentFill, clsGlobVar.Tank13x, clsGlobVar.Tank13y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                // DrawHatchDeckPlan(canvasTwoD, 15, clsGlobVar.Tank14_PercentFill, clsGlobVar.Tank14x, clsGlobVar.Tank14y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));

                //BALLAST_TANK
                DrawHatchDeckPlan(canvasTwoD, 16, clsGlobVar.Tank16_PercentFill, clsGlobVar.Tank16x, clsGlobVar.Tank16y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 17, clsGlobVar.Tank17_PercentFill, clsGlobVar.Tank17x, clsGlobVar.Tank17y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 18, clsGlobVar.Tank18_PercentFill, clsGlobVar.Tank18x, clsGlobVar.Tank18y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 19, clsGlobVar.Tank19_PercentFill, clsGlobVar.Tank19x, clsGlobVar.Tank19y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 20, clsGlobVar.Tank20_PercentFill, clsGlobVar.Tank20x, clsGlobVar.Tank20y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 21, clsGlobVar.Tank21_PercentFill, clsGlobVar.Tank21x, clsGlobVar.Tank21y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 22, clsGlobVar.Tank22_PercentFill, clsGlobVar.Tank22x, clsGlobVar.Tank22y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 23, clsGlobVar.Tank23_PercentFill, clsGlobVar.Tank23x, clsGlobVar.Tank23y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 24, clsGlobVar.Tank24_PercentFill, clsGlobVar.Tank24x, clsGlobVar.Tank24y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 25, clsGlobVar.Tank25_PercentFill, clsGlobVar.Tank25x, clsGlobVar.Tank25y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
               // DrawHatchDeckPlan(canvasTwoD, 26, clsGlobVar.Tank24_PercentFill, clsGlobVar.Tank24x, clsGlobVar.Tank24y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 27, clsGlobVar.Tank27_PercentFill, clsGlobVar.Tank27x, clsGlobVar.Tank27y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 28, clsGlobVar.Tank28_PercentFill, clsGlobVar.Tank28x, clsGlobVar.Tank28y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                //DrawHatchDeckPlan(canvasTwoD, 29, clsGlobVar.Tank27_PercentFill, clsGlobVar.Tank27x, clsGlobVar.Tank27y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlan(canvasTwoD, 30, clsGlobVar.Tank30_PercentFill, clsGlobVar.Tank30x, clsGlobVar.Tank30y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));

                //FUEL_OIL_TANK
                //DrawHatchDeckPlan(canvasTwoD, 32, clsGlobVar.Tank29_PercentFill, clsGlobVar.Tank29x, clsGlobVar.Tank29y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlan(canvasTwoD, 33, clsGlobVar.Tank33_PercentFill, clsGlobVar.Tank33x, clsGlobVar.Tank33y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 34, clsGlobVar.Tank31_PercentFill, clsGlobVar.Tank31x, clsGlobVar.Tank31y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 35, clsGlobVar.Tank32_PercentFill, clsGlobVar.Tank32x, clsGlobVar.Tank32y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 36, clsGlobVar.Tank33_PercentFill, clsGlobVar.Tank33x, clsGlobVar.Tank33y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));


                //FRESHWATER_TANK

                //DrawHatchDeckPlan(canvasTwoD, 38, clsGlobVar.Tank34_PercentFill, clsGlobVar.Tank34x, clsGlobVar.Tank34y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));
                //DrawHatchDeckPlan(canvasTwoD, 39, clsGlobVar.Tank35_PercentFill, clsGlobVar.Tank35x, clsGlobVar.Tank35y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));

                ////DIESEL_OIL_TANK
                //DrawHatchDeckPlan(canvasTwoD, 41, clsGlobVar.Tank36_PercentFill, clsGlobVar.Tank36x, clsGlobVar.Tank36y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 42, clsGlobVar.Tank37_PercentFill, clsGlobVar.Tank37x, clsGlobVar.Tank37y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 43, clsGlobVar.Tank38_PercentFill, clsGlobVar.Tank38x, clsGlobVar.Tank38y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                //DrawHatchDeckPlan(canvasTwoD, 44, clsGlobVar.Tank39_PercentFill, clsGlobVar.Tank39x, clsGlobVar.Tank39y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));

                ////LUB_OIL_TANK
                //DrawHatchDeckPlan(canvasTwoD, 46, clsGlobVar.Tank40_PercentFill, clsGlobVar.Tank40x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                //DrawHatchDeckPlan(canvasTwoD, 48, clsGlobVar.Tank41_PercentFill, clsGlobVar.Tank41x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                //DrawHatchDeckPlan(canvasTwoD, 49, clsGlobVar.Tank42_PercentFill, clsGlobVar.Tank42x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                //DrawHatchDeckPlan(canvasTwoD, 50, clsGlobVar.Tank43_PercentFill, clsGlobVar.Tank43x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));

                ////MISC_TANK
                //DrawHatchDeckPlan(canvasTwoD, 52, clsGlobVar.Tank44_PercentFill, clsGlobVar.Tank44x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 53, clsGlobVar.Tank45_PercentFill, clsGlobVar.Tank45x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 54, clsGlobVar.Tank46_PercentFill, clsGlobVar.Tank46x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 55, clsGlobVar.Tank47_PercentFill, clsGlobVar.Tank47x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 56, clsGlobVar.Tank48_PercentFill, clsGlobVar.Tank48x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 57, clsGlobVar.Tank49_PercentFill, clsGlobVar.Tank49x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));

                ////COMPARTMENT
                //DrawHatchDeckPlan(canvasTwoD, 59, clsGlobVar.Tank50_PercentFill, clsGlobVar.Tank50x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 60, clsGlobVar.Tank51_PercentFill, clsGlobVar.Tank51x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 61, clsGlobVar.Tank52_PercentFill, clsGlobVar.Tank52x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                //DrawHatchDeckPlan(canvasTwoD, 62, clsGlobVar.Tank53_PercentFill, clsGlobVar.Tank53x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));


            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message);
            }
        }

        public void AddHatchDeckPlanReal()
        {
            try
            {

                // Cargo TANK
                DrawHatchDeckPlanReal(canvasTwoD, 2, clsGlobVar.Tank1_PercentFillReal, clsGlobVar.Tank1x, clsGlobVar.Tank1y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 3, clsGlobVar.Tank2_PercentFillReal, clsGlobVar.Tank2x, clsGlobVar.Tank2y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 4, clsGlobVar.Tank3_PercentFillReal, clsGlobVar.Tank3x, clsGlobVar.Tank3y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 5, clsGlobVar.Tank4_PercentFillReal, clsGlobVar.Tank4x, clsGlobVar.Tank4y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 6, clsGlobVar.Tank5_PercentFillReal, clsGlobVar.Tank5x, clsGlobVar.Tank5y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 7, clsGlobVar.Tank6_PercentFillReal, clsGlobVar.Tank6x, clsGlobVar.Tank6y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 8, clsGlobVar.Tank7_PercentFillReal, clsGlobVar.Tank7x, clsGlobVar.Tank7y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 9, clsGlobVar.Tank8_PercentFillReal, clsGlobVar.Tank8x, clsGlobVar.Tank8y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 10, clsGlobVar.Tank9_PercentFillReal, clsGlobVar.Tank9x, clsGlobVar.Tank9y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 11, clsGlobVar.Tank10_PercentFillReal, clsGlobVar.Tank10x, clsGlobVar.Tank10y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 12, clsGlobVar.Tank11_PercentFillReal, clsGlobVar.Tank11x, clsGlobVar.Tank11y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 13, clsGlobVar.Tank12_PercentFillReal, clsGlobVar.Tank12x, clsGlobVar.Tank12y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 14, clsGlobVar.Tank13_PercentFillReal, clsGlobVar.Tank13x, clsGlobVar.Tank13y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));
                DrawHatchDeckPlanReal(canvasTwoD, 15, clsGlobVar.Tank14_PercentFillReal, clsGlobVar.Tank14x, clsGlobVar.Tank14y, System.Windows.Media.Color.FromArgb(180, 151, 72, 7));

                //BALLAST_TANK

                DrawHatchDeckPlanReal(canvasTwoD, 17, clsGlobVar.Tank15_PercentFillReal, clsGlobVar.Tank15x, clsGlobVar.Tank15y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 18, clsGlobVar.Tank16_PercentFillReal, clsGlobVar.Tank16x, clsGlobVar.Tank16y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 19, clsGlobVar.Tank17_PercentFillReal, clsGlobVar.Tank17x, clsGlobVar.Tank17y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 20, clsGlobVar.Tank18_PercentFillReal, clsGlobVar.Tank18x, clsGlobVar.Tank18y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 21, clsGlobVar.Tank19_PercentFillReal, clsGlobVar.Tank19x, clsGlobVar.Tank19y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 22, clsGlobVar.Tank20_PercentFillReal, clsGlobVar.Tank20x, clsGlobVar.Tank20y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 23, clsGlobVar.Tank21_PercentFillReal, clsGlobVar.Tank21x, clsGlobVar.Tank21y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 24, clsGlobVar.Tank22_PercentFillReal, clsGlobVar.Tank22x, clsGlobVar.Tank22y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 25, clsGlobVar.Tank23_PercentFillReal, clsGlobVar.Tank23x, clsGlobVar.Tank23y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 26, clsGlobVar.Tank24_PercentFillReal, clsGlobVar.Tank24x, clsGlobVar.Tank24y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 27, clsGlobVar.Tank25_PercentFillReal, clsGlobVar.Tank25x, clsGlobVar.Tank25y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 28, clsGlobVar.Tank26_PercentFillReal, clsGlobVar.Tank26x, clsGlobVar.Tank26y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 29, clsGlobVar.Tank27_PercentFillReal, clsGlobVar.Tank27x, clsGlobVar.Tank27y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));
                DrawHatchDeckPlanReal(canvasTwoD, 30, clsGlobVar.Tank28_PercentFillReal, clsGlobVar.Tank28x, clsGlobVar.Tank28y, System.Windows.Media.Color.FromArgb(180, 194, 214, 154));

                //FUEL_OIL_TANK
                DrawHatchDeckPlanReal(canvasTwoD, 32, clsGlobVar.Tank29_PercentFillReal, clsGlobVar.Tank29x, clsGlobVar.Tank29y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 33, clsGlobVar.Tank30_PercentFillReal, clsGlobVar.Tank30x, clsGlobVar.Tank30y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 34, clsGlobVar.Tank31_PercentFillReal, clsGlobVar.Tank31x, clsGlobVar.Tank31y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 35, clsGlobVar.Tank32_PercentFillReal, clsGlobVar.Tank32x, clsGlobVar.Tank32y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 36, clsGlobVar.Tank33_PercentFillReal, clsGlobVar.Tank33x, clsGlobVar.Tank33y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));


                //FRESHWATER_TANK

                DrawHatchDeckPlanReal(canvasTwoD, 38, clsGlobVar.Tank34_PercentFillReal, clsGlobVar.Tank34x, clsGlobVar.Tank34y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));
                DrawHatchDeckPlanReal(canvasTwoD, 39, clsGlobVar.Tank35_PercentFillReal, clsGlobVar.Tank35x, clsGlobVar.Tank35y, System.Windows.Media.Color.FromArgb(180, 135, 206, 250));

                //DIESEL_OIL_TANK
                DrawHatchDeckPlanReal(canvasTwoD, 41, clsGlobVar.Tank36_PercentFillReal, clsGlobVar.Tank36x, clsGlobVar.Tank36y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 42, clsGlobVar.Tank37_PercentFillReal, clsGlobVar.Tank37x, clsGlobVar.Tank37y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 43, clsGlobVar.Tank38_PercentFillReal, clsGlobVar.Tank38x, clsGlobVar.Tank38y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));
                DrawHatchDeckPlanReal(canvasTwoD, 44, clsGlobVar.Tank39_PercentFillReal, clsGlobVar.Tank39x, clsGlobVar.Tank39y, System.Windows.Media.Color.FromArgb(180, 228, 109, 10));

                //LUB_OIL_TANK
                DrawHatchDeckPlanReal(canvasTwoD, 46, clsGlobVar.Tank40_PercentFillReal, clsGlobVar.Tank40x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                DrawHatchDeckPlanReal(canvasTwoD, 48, clsGlobVar.Tank41_PercentFillReal, clsGlobVar.Tank41x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                DrawHatchDeckPlanReal(canvasTwoD, 49, clsGlobVar.Tank42_PercentFillReal, clsGlobVar.Tank42x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));
                DrawHatchDeckPlanReal(canvasTwoD, 50, clsGlobVar.Tank43_PercentFillReal, clsGlobVar.Tank43x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 165, 42, 42));

                //MISC_TANK
                DrawHatchDeckPlanReal(canvasTwoD, 52, clsGlobVar.Tank44_PercentFillReal, clsGlobVar.Tank44x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 53, clsGlobVar.Tank45_PercentFillReal, clsGlobVar.Tank45x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 54, clsGlobVar.Tank46_PercentFillReal, clsGlobVar.Tank46x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 55, clsGlobVar.Tank47_PercentFillReal, clsGlobVar.Tank47x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 56, clsGlobVar.Tank48_PercentFillReal, clsGlobVar.Tank48x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 57, clsGlobVar.Tank49_PercentFillReal, clsGlobVar.Tank49x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));

                //COMPARTMENT
                DrawHatchDeckPlanReal(canvasTwoD, 59, clsGlobVar.Tank50_PercentFillReal, clsGlobVar.Tank50x, clsGlobVar.Tank40y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 60, clsGlobVar.Tank51_PercentFillReal, clsGlobVar.Tank51x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 61, clsGlobVar.Tank52_PercentFillReal, clsGlobVar.Tank52x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));
                DrawHatchDeckPlanReal(canvasTwoD, 62, clsGlobVar.Tank53_PercentFillReal, clsGlobVar.Tank53x, clsGlobVar.Tank41y, System.Windows.Media.Color.FromArgb(180, 255, 192, 203));

            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.Message);
            }
        }

        public void DrawTrimLine()
        {
            //47303.5814
            double xAP, yAP, xFP, yFP;
            xAP = 0;
            yAP = 46626.3 + (Convert.ToDouble(lblDraftAP.Content)) * 1000;
            xFP = 169660;
            yFP = 46626.3 + Convert.ToDouble(lblDraftFP.Content) * 1000;
            System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
            p.Stroke = System.Windows.Media.Brushes.Black;

            SolidColorBrush mySolidColorBrush = new SolidColorBrush();
            mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(255, 0, 0, 255);
            p.Fill = mySolidColorBrush;

            System.Windows.Point[] point = new System.Windows.Point[5];
            PointCollection pointCollection = new PointCollection();
            pointCollection.Add(new System.Windows.Point(xAP * 3, yAP - 400));
            pointCollection.Add(new System.Windows.Point(xFP + 15000, yFP - 400));
            pointCollection.Add(new System.Windows.Point(xFP + 15000, yFP));
            pointCollection.Add(new System.Windows.Point(xAP * 3, yAP));

            p.Points = pointCollection;
            canvasTwoD.Children.Add(p);
        }
        public void DrawHatchDeckPlan(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                double[] Tankx = new double[45];
                double[] Tanky = new double[45];

                
                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID - 1]["IsDamaged"]) == true)
                //{
                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;

                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int index = 1; index <= 13; index++)
                //    {
                       
                //        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                //    }
                   
                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);


                //}
                //else
                    if (percent > 0 && percent <= 100)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;

                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int index = 1; index <= 11; index++)
                        {
                            //pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                            pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                        }
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;

                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int index = 1; index <= 11; index++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                        }
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }
        }

        public void DrawHatchDeckPlanReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                double[] Tankx = new double[45];
                double[] Tanky = new double[45];

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID - 1]["IsDamaged"]) == true)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;

                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int index = 1; index <= 13; index++)
                    {
                        //pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                    }
                    //for (int i = 1; i <= 24; i++)
                    //{
                    //    string sc = Convert.ToString("X" + i);
                    //    string sr = Convert.ToString("Y" + i);
                    //    Tankx[i] = Convert.ToDouble(Models.clsGlobVar.dsCoordinates.Tables[0].Rows[Tank_ID][sc]);
                    //    Tanky[i] = Convert.ToDouble(Models.clsGlobVar.dsCoordinates.Tables[0].Rows[Tank_ID][sr]);
                    //    pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //}
                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);


                }
                else
                    if (percent > 0 && percent <= 100)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;

                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int index = 1; index <= 13; index++)
                        {
                            //pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                            pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                        }
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;

                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int index = 1; index <= 13; index++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                        }
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
            }
            catch
            {
            }
        }

        public void DrawHatchProfile(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(180, 255, 0, 0);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[50];
                    PointCollection pointCollection = new PointCollection();
                    for (int index = 1; index <= 20; index++)
                    {
                        //pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                    }
                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);



                }
                else if (percent > 0 && percent <= 100)
                {
                    if (xx[4] == xx[3] && yy[4] == yy[3])
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;
                        double d = yy[4] - yy[2];
                        double Fill = Convert.ToInt32(percent) * (d / 100);
                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        pointCollection.Add(new System.Windows.Point(xx[1], yy[1]));
                        pointCollection.Add(new System.Windows.Point(xx[2], yy[2]));
                        pointCollection.Add(new System.Windows.Point(xx[2], yy[2] + Fill));
                        pointCollection.Add(new System.Windows.Point(xx[1], yy[1] + Fill));
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
                    else
                    {

                    }
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;

                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[50];
                    PointCollection pointCollection = new PointCollection();
                    for (int index = 1; index <= 21; index++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                    }
                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    percent = 0;
                }


            }
            catch (Exception ex)
            {

            }


        }

        public void DrawHatchProfileReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID - 1]["IsDamaged"]) == true)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(180, 255, 0, 0);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[50];
                    PointCollection pointCollection = new PointCollection();
                    for (int index = 1; index <= 21; index++)
                    {
                        //pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));

                    }
                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);



                }
                else if (percent > 0 && percent <= 100)
                {
                    if (xx[4] == xx[3] && yy[4] == yy[3])
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;
                        double d = yy[4] - yy[2];
                        double Fill = Convert.ToInt32(percent) * (d / 100);
                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        pointCollection.Add(new System.Windows.Point(xx[1], yy[1]));
                        pointCollection.Add(new System.Windows.Point(xx[2], yy[2]));
                        pointCollection.Add(new System.Windows.Point(xx[2], yy[2] + Fill));
                        pointCollection.Add(new System.Windows.Point(xx[1], yy[1] + Fill));
                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        percent = 0;
                    }
                    else
                    {

                    }
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;

                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[50];
                    PointCollection pointCollection = new PointCollection();
                    for (int index = 1; index <= 21; index++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[index], yy[index]));
                    }
                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    percent = 0;
                }


            }
            catch (Exception ex)
            {

            }


        }





        public void DrawHatchCT1PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Tank_ID == 1 || Tank_ID == 2)//NO.8  C.O. TK(P) & S
                {

                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };



                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length-1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}

                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };




                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.9913, 43352.9913 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent >= 0 && percent <= 100)
                    {

                        //xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        //xx = new double[] { 159528.0156, 169660.9026, 171219.8083, 173028.8827 };
                        //yy = new double[] { 46626.3463, 46626.3463, 46875.4129, 47798.4313 }; updated 

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= 4; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 1000)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());            }

        }

        public void DrawHatchCT3PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 3 || Tank_ID == 4)//NO.8  C.O. TK(P) & S
                {
                //    if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                //    {

                //        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                //        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                //        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //        p.Stroke = System.Windows.Media.Brushes.Black;
                //        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //        p.Fill = mySolidColorBrush;

                //        System.Windows.Point[] point = new System.Windows.Point[25];
                //        PointCollection pointCollection = new PointCollection();
                //        for (int i = 1; i <= xx.Length - 1; i++)
                //        {
                //            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //        }

                //        p.Points = pointCollection;
                //        canvasTwoD.Children.Add(p);

                //    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        //xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= 4; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT5PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 5 || Tank_ID == 6)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 101800.63, 123019.23, 144139.026, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        //xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT7PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 7 || Tank_ID == 8)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        //xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT9PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 9 || Tank_ID == 10)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID ]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        //xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT11PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 11 || Tank_ID == 12)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchSlopTk13PS(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 13 || Tank_ID == 14)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID ]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                    //    yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        //yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchFPTK(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
               
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 176403.0177, 165169.86, 165169.9 };
                    //    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 47831.084, 47670.7, 27843.37 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 173070.57,174485.77,175056.73,176563.17,177381.933,177951.608,178293.47,178405.99,173070.57};
                        yy = new double[] { 0, 27843.37,28033.53,28158.97,28875.25,29600.067,30464.38,31385.19,32187.185,32187.185 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 173070.57,174485.77,175056.73,176563.17,177381.933,177951.608,178293.47,178405.99,178396.36,173070.57, };
                        yy = new double[] { 0,27843.37,28033.53,28158.97,28875.25,29600.067,30464.38,31385.19,32187.185,36184.43,36184.43};



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 173070.57,174485.77,175056.73,176563.17,177381.933,177951.608,178293.47,178405.99,178396.36,178040.27,177310.39,175610.68,173609.4,173314.19,173113.203,173040.57,173012.38,173087.19,173070.57};
                        yy = new double[] { 0, 27843.37,28033.53,28158.97,28875.25,29600.067,30464.38,31385.19,32187.185,36184.43,37032.5,37768.74,38415.8,39014.51,39252.39,39527.6969,39758.71,40315.335,40803.53,40803.53};



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 176403.0177, 165169.86 };
                        //yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 47831.084, 47670.7 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            
            catch
            {

            }
        }

        public void DrawHatchWBTK1(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 16 || Tank_ID == 17)//NO.8  C.O. TK(P) & S
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026};
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026};
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK2(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 18 || Tank_ID == 19)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID -+1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK3(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 20 || Tank_ID == 21)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK4(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 22 || Tank_ID == 23)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK5(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 24 || Tank_ID == 25)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.72725, 42798.72725 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK6(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 26 || Tank_ID == 27)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                    //    yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        //yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchAPTK28(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +1]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, -4569.7144,-4569.7144,1787.56,3638.58,4419.81,4907.51,5350.396,5492.38,7234.6765,7234.6765, };
                    //    yy = new double[] { 0, 42337.114,38690.69,37080.72,36490.23,36038.122,35565.58,34796.889,33924.81,33924.81,42337.114, };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 3638.58,4419.81,4907.51,5350.396,5492.38,7234.6765,7234.6765};
                        yy = new double[] { 0, 36490.23,36038.122,35565.58,34796.889,33924.81,33924.81,36490.23, };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0,-4569.7144,1787.56,3638.58,4419.81,4907.51,5350.396,5492.38,7234.6765,7234.6765, };
                        yy = new double[] { 0,38690.69,37080.72,36490.23,36038.122,35565.58,34796.889,33924.81,33924.81,38690.69,};



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, -4569.7144,-4569.7144,1787.56,3638.58,4419.81,4907.51,5350.396,5492.38,7234.6765,7234.6765,};
                        yy = new double[] { 0, 40624.52,38690.69,37080.72,36490.23,36038.122,35565.58,34796.889,33924.81,33924.81,40624.52, };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, -4569.7144, -4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765, };
                        //yy = new double[] { 0, 42337.114, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 42337.114, };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            
            catch
            {

            }
        }

        public void DrawHatchHFOTK(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 29 || Tank_ID == 30)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +2]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                    //    yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 37158.038, 35172.65, 33956.93, 33956.94, 37158.038 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74};
                        yy = new double[] { 0, 40713.58, 35172.65, 33956.93, 33956.94, 40713.59};



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74};
                        yy = new double[] { 0, 44129.69, 35172.65, 33956.93, 33956.94, 44129.69};



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                        yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchHFOTK31(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +2]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                    //    yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 37158.038, 35172.65, 33956.93, 33956.94, 37158.038 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 40713.58, 35172.65, 33956.93, 33956.94, 40713.59 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 44129.69, 35172.65, 33956.93, 33956.94, 44129.69 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                        yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            
            catch
            {

            }
        }

        public void DrawHatchHFOSETTTK32(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 24960.49, 28212.68, 28221.68, 24960.5};
                //    yy = new double[] { 0, 38939.8, 38939.8, 45136.29, 45136.29,};

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= 4; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5};
                    yy = new double[] { 0, 38939.8, 38939.8, 40488.9225, 40488.9225};



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5};
                    yy = new double[] { 0, 38939.8, 38939.8, 42038.045, 42038.045};



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5};
                    yy = new double[] { 0, 38939.8, 38939.8, 43587.1675, 43587.1675};



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    //xx = new double[] { 0, 24960.49, 28212.68, 28221.68, 24960.5 };
                    //yy = new double[] { 0, 38939.8, 38939.8, 45136.29, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 6; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchHFOSERVTK33(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                //    yy = new double[] { 0, 38939.8, 38930.1, 45131.25, 45136.29, };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 40477.9625, 40477.9625 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 42025.825, 42025.825 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 43573.6875, 43573.6875 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    //xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    //yy = new double[] { 0, 38939.8, 38930.1, 45131.25, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchFWTK34(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 34 || Tank_ID == 35)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 3]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                    //    yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5, };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 43657.9875, 43657.9875 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 44978.825, 44978.825 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 46299.6625, 46299.6625 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        //yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5, };
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchDOSTORTK36(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 36 || Tank_ID == 37)
                {
                    //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 4]["IsDamaged"]) == true)
                    //{

                    //    xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                    //    yy = new double[] { 0, 27843.37, 27843.37, 30300.81, 30300.81, };

                    //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    //    p.Stroke = System.Windows.Media.Brushes.Black;
                    //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    //    p.Fill = mySolidColorBrush;

                    //    System.Windows.Point[] point = new System.Windows.Point[25];
                    //    PointCollection pointCollection = new PointCollection();
                    //    for (int i = 1; i <= xx.Length - 1; i++)
                    //    {
                    //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    //    }

                    //    p.Points = pointCollection;
                    //    canvasTwoD.Children.Add(p);

                    //}
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 28457.73, 28457.73 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 29072.09, 29072.09 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 29686.45, 29686.45 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        //xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        //yy = new double[] { 0, 27843.37, 27843.37, 30300.81, 30300.81, };
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchDOSETTTK38(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 4]["IsDamaged"]) == true)
                //    {

                //        xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                //        yy = new double[] { 0, 43251.84, 43251.84, 46642.03, 46642.03, };

                //        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //        p.Stroke = System.Windows.Media.Brushes.Black;
                //        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //        p.Fill = mySolidColorBrush;

                //        System.Windows.Point[] point = new System.Windows.Point[25];
                //        PointCollection pointCollection = new PointCollection();
                //        for (int i = 1; i <= xx.Length - 1; i++)
                //        {
                //            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //        }

                //        p.Points = pointCollection;
                //        canvasTwoD.Children.Add(p);

                //    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                        yy = new double[] { 0, 43251.84, 43251.84, 44099.3875, 44099.3875 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                        yy = new double[] { 0, 43251.84, 43251.84, 44946.935, 44946.935 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                        yy = new double[] { 0, 43251.84, 43251.84, 45794.4825, 45794.4825 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                        yy = new double[] { 0, 43251.84, 43251.84, 46642.03, 46642.03, };
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
           
            catch
            {

            }
        }

        public void DrawHatchMESYSOILSUMPTK40(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 5]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8, 15983.22, 15983.22, 15203.67};
                //    yy = new double[] { 0, 28627.5, 28627.5, 28810.37, 28810.37, 29738.02, 29738.02, 30300.81, 30300.81 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29046.61, 28627.5, 28627.5, 28810.37, 28810.37, 29046.61 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29302.11, 28627.5, 28627.5, 28810.37, 28810.37, 29302.11 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29559.88, 28627.5, 28627.5, 28810.37, 28810.37, 29559.88 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8, 15983.22, 15983.22, 15203.67 };
                    yy = new double[] { 0, 28627.5, 28627.5, 28810.37, 28810.37, 29738.02, 29738.02, 30300.81, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSTCWTK44(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 5492.38,5354.09,5097.14,4562.606,3613.306,3613.3069,4344.471,4691.1784,5182.8374,5641.86,6335.55,7234.68,7234.68, };
                //    yy = new double[] { 0, 33924.81,33225.78,32792.43,32365.806,31980.76,30897.6856,30643.679,30352.638,29852.28,29418.88,28941.38,28491.38,33924.81};

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length-1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68 };
                    yy = new double[] { 0, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 30352.638 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 3613.31,3613.3069,4344.471,4691.1784,5182.8374,5641.86,	6335.55,7234.68,7234.68};
                    yy = new double[] { 0, 31461.23,30897.6856,30643.679,30352.638,29852.28,29418.88,28941.38,28491.38,31461.23 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 5097.14,4562.606,3613.306,3613.3069,4344.471,4691.1784,5182.8374,5641.86,6335.55,7234.68,7234.68, };
                    yy = new double[] { 0, 32792.43,32365.806,31980.76,30897.6856,30643.679,30352.638,29852.28,29418.88,28941.38,28491.38,32792.43, };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 5492.38, 5354.09, 5097.14, 4562.606, 3613.306, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68, };
                    yy = new double[] { 0, 33924.81, 33225.78, 32792.43, 32365.806, 31980.76, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 33924.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchFOOVERFLOW45(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                //    yy = new double[] { 0, 27843.3738, 27843.37, 30300.81, 30300.81 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 28457.72905, 28457.72905 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 29072.0881, 29072.0881 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 29686.44715, 29686.44715 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 30300.81, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length-1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }


        public void DrawHatchSLUDGE46(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                //    yy = new double[] { 0, 37498.9, 37498.9, 38484.53, 38484.53 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 37745.3075, 37745.3075 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 37991.715, 37991.715 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 38238.1225, 38238.1225 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 38484.53, 38484.53 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchBILGE47(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                //    yy = new double[] { 0, 30300.81, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 30300.81 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 28491.38 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 29189.1, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 29189.1 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 29858.63, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 29858.63 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 30300.81, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSTLO48(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                //    yy = new double[] { 0, 29416.47, 29416.47, 30300.81, 30300.81 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 29637.555, 29637.555 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 29858.64, 29858.64 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 30079.725, 30079.725 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchWASTE49(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +6]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                //    yy = new double[] { 0, 27843.38, 27843.38, 30300.81, 30300.81 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 28457.7375, 28457.7375 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 29072.095, 29072.095 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 29686.4525, 29686.4525 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchEROOM50(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID+7]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 28191.28, 28191.28, 24960.49, 24960.49 };
                //    yy = new double[] { 0, 47620.49, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 27843.37, 33956.93, 35172.65, 47620.49 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}
                
                 if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchPROOM51(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +7]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 28191.28, 35142.74, 35142.74, 28191.28};
                //    yy = new double[] { 0, 27843.37, 27843.3738, 33956.94, 33956.94};

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}

                 if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchBOSUN52(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +7]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, 165169.87, 176403.017, 177784.59, 165169.87 };
                //    yy = new double[] { 0, 47783.843, 47831.084, 50567.005, 50536.7593 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}

                 if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSGROOM53(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                //if (Convert.ToBoolean(clsGlobVar.dtSimulationAllTanks.Rows[Tank_ID +7]["IsDamaged"]) == true)
                //{

                //    xx = new double[] { 0, -4569.7144, 1440.58, 1440.58, -4569.7144 };
                //    yy = new double[] { 0, 42337.114, 42337.114, 47685.412, 47751.73 };

                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                //    p.Fill = mySolidColorBrush;

                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);

                //}

                 if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }




        /// <summary>
        /// ////////////////////////////////////////////////////////////
        /// 
        ///                         REAL 
        /// 
        /// ///////////////////////////////////////////////////////////
        /// </summary>


        public void DrawHatchCT1PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Tank_ID == 1 || Tank_ID == 2)//NO.8  C.O. TK(P) & S
                {

                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }

                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };




                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.9913, 43352.9913 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }

        }

        public void DrawHatchCT3PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 3 || Tank_ID == 4)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT5PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 5 || Tank_ID == 6)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 101800.63, 123019.23, 144139.026, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT7PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 7 || Tank_ID == 8)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT9PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 9 || Tank_ID == 10)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchCT11PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 11 || Tank_ID == 12)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchSlopTk13PSReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 13 || Tank_ID == 14)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 34491.287975, 34491.287975 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 38922.13965, 38922.13965 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 43352.991325, 43352.991325 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                        yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchFPTKReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 176403.0177, 165169.86, 165169.9 };
                    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 47831.084, 47670.7, 27843.37 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 173070.57 };
                    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 32187.185 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 173070.57, };
                    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 36184.43 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 173070.57 };
                    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 40803.53 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 176403.0177, 165169.86 };
                    yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 47831.084, 47670.7 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchWBTK1Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 16 || Tank_ID == 17)//NO.8  C.O. TK(P) & S
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK2Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 18 || Tank_ID == 19)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID - +1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK3Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 20 || Tank_ID == 21)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK4Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 22 || Tank_ID == 23)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK5Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 24 || Tank_ID == 25)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.72725, 42798.72725 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchWBTK6Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 26 || Tank_ID == 27)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74, };
                        yy = new double[] { 0, 27843.38, 27843.38, 32828.49575, 32828.49575 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 37813.6115, 37813.6115 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 42798.7272499999, 42798.7272499999 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                        yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchAPTK28Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 1]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, -4569.7144, -4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765, };
                    yy = new double[] { 0, 42337.114, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 42337.114, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765 };
                    yy = new double[] { 0, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 36490.23, };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, -4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765, };
                    yy = new double[] { 0, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 38690.69, };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, -4569.7144, -4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765, };
                    yy = new double[] { 0, 40624.52, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 40624.52, };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, -4569.7144, -4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765, };
                    yy = new double[] { 0, 42337.114, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81, 42337.114, };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchHFOTKReal(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 29 || Tank_ID == 30)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                        yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 37158.038, 35172.65, 33956.93, 33956.94, 37158.038 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 40713.58, 35172.65, 33956.93, 33956.94, 40713.59 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                        yy = new double[] { 0, 44129.69, 35172.65, 33956.93, 33956.94, 44129.69 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                        yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchHFOTK31Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                    yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                    yy = new double[] { 0, 37158.038, 35172.65, 33956.93, 33956.94, 37158.038 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                    yy = new double[] { 0, 40713.58, 35172.65, 33956.93, 33956.94, 40713.59 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 24960.49, 24960.49, 28191.28, 35142.74, 35142.74 };
                    yy = new double[] { 0, 44129.69, 35172.65, 33956.93, 33956.94, 44129.69 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                    yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchHFOSETTTK32Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 24960.49, 28212.68, 28221.68, 24960.5 };
                    yy = new double[] { 0, 38939.8, 38939.8, 45136.29, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5 };
                    yy = new double[] { 0, 38939.8, 38939.8, 40488.9225, 40488.9225 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5 };
                    yy = new double[] { 0, 38939.8, 38939.8, 42038.045, 42038.045 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5 };
                    yy = new double[] { 0, 38939.8, 38939.8, 43587.1675, 43587.1675 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 24960.49, 28212.68, 28221.68, 24960.5 };
                    yy = new double[] { 0, 38939.8, 38939.8, 45136.29, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= 4; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 6; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchHFOSERVTK33Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 2]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 45131.25, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 40477.9625, 40477.9625 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 42025.825, 42025.825 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 43573.6875, 43573.6875 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    yy = new double[] { 0, 38939.8, 38930.1, 45131.25, 45136.29, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchFWTK34Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 34 || Tank_ID == 35)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 3]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5, };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 43657.9875, 43657.9875 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 44978.825, 44978.825 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 46299.6625, 46299.6625 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                        yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5, };
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchDOSTORTK36Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {
                if (Tank_ID == 36 || Tank_ID == 37)
                {
                    if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 4]["IsDamaged"]) == true)
                    {

                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 30300.81, 30300.81, };

                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                    }
                    if (percent > 0 && percent <= 25)
                    {


                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 28457.73, 28457.73 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent > 25 && percent <= 50)
                    {

                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 29072.09, 29072.09 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }

                    else if (percent > 50 && percent <= 75)
                    {

                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 29686.45, 29686.45 };



                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }


                    else if (percent > 75 && percent <= 100)
                    {
                        xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };
                        yy = new double[] { 0, 27843.37, 27843.37, 30300.81, 30300.81, };
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = color;
                        p.Fill = mySolidColorBrush;


                        System.Windows.Point[] point = new System.Windows.Point[25];
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= xx.Length - 1; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);

                        percent = 0;
                    }
                    else if (percent == 0)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                        p.Fill = mySolidColorBrush;

                        System.Windows.Point[] point = new System.Windows.Point[23];
                        PointCollection pointCollection = new PointCollection();

                        for (int i = 1; i < 21; i++)
                        {
                            pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                    }
                }
            }
            catch
            {

            }
        }

        public void DrawHatchDOSETTTK38Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 4]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    yy = new double[] { 0, 43251.84, 43251.84, 46642.03, 46642.03, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    yy = new double[] { 0, 43251.84, 43251.84, 44099.3875, 44099.3875 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    yy = new double[] { 0, 43251.84, 43251.84, 44946.935, 44946.935 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    yy = new double[] { 0, 43251.84, 43251.84, 45794.4825, 45794.4825 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    yy = new double[] { 0, 43251.84, 43251.84, 46642.03, 46642.03, };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchMESYSOILSUMPTK40Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 5]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8, 15983.22, 15983.22, 15203.67 };
                    yy = new double[] { 0, 28627.5, 28627.5, 28810.37, 28810.37, 29738.02, 29738.02, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29046.61, 28627.5, 28627.5, 28810.37, 28810.37, 29046.61 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29302.11, 28627.5, 28627.5, 28810.37, 28810.37, 29302.11 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 15203.67, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8 };
                    yy = new double[] { 0, 29559.88, 28627.5, 28627.5, 28810.37, 28810.37, 29559.88 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8, 15983.22, 15983.22, 15203.67 };
                    yy = new double[] { 0, 28627.5, 28627.5, 28810.37, 28810.37, 29738.02, 29738.02, 30300.81, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSTCWTK44Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 5492.38, 5354.09, 5097.14, 4562.606, 3613.306, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68, };
                    yy = new double[] { 0, 33924.81, 33225.78, 32792.43, 32365.806, 31980.76, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 33924.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {


                    xx = new double[] { 0, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68 };
                    yy = new double[] { 0, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 30352.638 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 3613.31, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68 };
                    yy = new double[] { 0, 31461.23, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 31461.23 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 5097.14, 4562.606, 3613.306, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68, };
                    yy = new double[] { 0, 32792.43, 32365.806, 31980.76, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 32792.43, };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 5492.38, 5354.09, 5097.14, 4562.606, 3613.306, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68, };
                    yy = new double[] { 0, 33924.81, 33225.78, 32792.43, 32365.806, 31980.76, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 33924.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchFOOVERFLOW45Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 28457.72905, 28457.72905 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 29072.0881, 29072.0881 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 29686.44715, 29686.44715 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503 };
                    yy = new double[] { 0, 27843.3738, 27843.37, 30300.81, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }


        public void DrawHatchSLUDGE46Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 38484.53, 38484.53 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 37745.3075, 37745.3075 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 37991.715, 37991.715 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 38238.1225, 38238.1225 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95 };
                    yy = new double[] { 0, 37498.9, 37498.9, 38484.53, 38484.53 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchBILGE47Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 30300.81, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 28491.38 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 29189.1, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 29189.1 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 29858.63, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 29858.63 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    yy = new double[] { 0, 30300.81, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 30300.81 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSTLO48Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 29637.555, 29637.555 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 29858.64, 29858.64 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 30079.725, 30079.725 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06 };
                    yy = new double[] { 0, 29416.47, 29416.47, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchWASTE49Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 6]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }
                if (percent > 0 && percent <= 25)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 28457.7375, 28457.7375 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent > 25 && percent <= 50)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 29072.095, 29072.095 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }

                else if (percent > 50 && percent <= 75)
                {

                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 29686.4525, 29686.4525 };



                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }


                else if (percent > 75 && percent <= 100)
                {
                    xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063 };
                    yy = new double[] { 0, 27843.38, 27843.38, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = color;
                    p.Fill = mySolidColorBrush;


                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                    percent = 0;
                }
                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchEROOM50Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 7]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 28191.28, 28191.28, 24960.49, 24960.49 };
                    yy = new double[] { 0, 47620.49, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 27843.37, 33956.93, 35172.65, 47620.49 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }

                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchPROOM51Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 7]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 28191.28, 35142.74, 35142.74, 28191.28 };
                    yy = new double[] { 0, 27843.37, 27843.3738, 33956.94, 33956.94 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }

                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchBOSUN52Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 7]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, 165169.87, 176403.017, 177784.59, 165169.87 };
                    yy = new double[] { 0, 47783.843, 47831.084, 50567.005, 50536.7593 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }

                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }

        public void DrawHatchSGROOM53Real(Canvas canvasTwoD, int Tank_ID, decimal percent, double[] xx, double[] yy, System.Windows.Media.Color color)
        {
            try
            {

                if (Convert.ToBoolean(clsGlobVar.dtRealAllTanks.Rows[Tank_ID + 7]["IsDamaged"]) == true)
                {

                    xx = new double[] { 0, -4569.7144, 1440.58, 1440.58, -4569.7144 };
                    yy = new double[] { 0, 42337.114, 42337.114, 47685.412, 47751.73 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(220, 255, 0, 0);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);

                }

                else if (percent == 0)
                {
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(0, 255, 255, 255);
                    p.Fill = mySolidColorBrush;

                    System.Windows.Point[] point = new System.Windows.Point[23];
                    PointCollection pointCollection = new PointCollection();

                    for (int i = 1; i < 21; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
            }

            catch
            {

            }
        }


        private void DrawHatchDeckPlanSelection()
        {
            try
            {
                

                System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                p.Stroke = System.Windows.Media.Brushes.Black;
                SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 255, 120, 120);
                p.Fill = mySolidColorBrush;
                p.UseLayoutRounding = true;
                p.StrokeThickness = 1;
                if (isHatchSelectionProfile == true && canvasTwoD.Children.Count > 1)
                {
                    canvasTwoD.Children.RemoveRange(canvasTwoD.Children.Count - 2, 3);
                }
                double[] Tankx = new double[45];
                double[] Tanky = new double[45];
                var currentRowIndex = 0;
                if (Mode == 0)
                {
                    currentRowIndex = dgTanks.Items.IndexOf(dgTanks.CurrentItem);
                }
                else
                {
                    //currentRowIndex = dgRealTanks.Items.IndexOf(dgRealTanks.CurrentItem); comented by sachin for container
                }
                PointCollection pointCollection = new PointCollection();

                if (currentRowIndex != -1)
                {
                    if (currentRowIndex >= 1 && currentRowIndex <= 14)
                    for (int i = 1; i <= 10; i++)
                    {
                        string sc = Convert.ToString("X" + i);
                        string sr = Convert.ToString("Y" + i);
                        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex-1][sc]);
                        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex-1][sr]);
                        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    }

                    if (currentRowIndex >= 16 && currentRowIndex <= 29)
                        for (int i = 1; i <= 10; i++)
                        {
                            string sc = Convert.ToString("X" + i);
                            string sr = Convert.ToString("Y" + i);
                            Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 2][sc]);
                            Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex-2][sr]);
                            pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                        }


                    //if (currentRowIndex >= 31 && currentRowIndex <= 35)
                    //    for (int i = 1; i <= 13; i++)
                    //    {
                    //        string sc = Convert.ToString("X" + i);
                    //        string sr = Convert.ToString("Y" + i);
                    //        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 3][sc]);
                    //        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 3][sr]);
                    //        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //    }

                    //if (currentRowIndex >= 37 && currentRowIndex <= 43)
                    //    for (int i = 1; i <= 13; i++)
                    //    {
                    //        string sc = Convert.ToString("X" + i);
                    //        string sr = Convert.ToString("Y" + i);
                    //        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 4][sc]);
                    //        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 4][sr]);
                    //        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //    }
                    //if (currentRowIndex >= 45 && currentRowIndex <= 48)
                    //    for (int i = 1; i <= 13; i++)
                    //    {
                    //        string sc = Convert.ToString("X" + i);
                    //        string sr = Convert.ToString("Y" + i);
                    //        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 5][sc]);
                    //        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 5][sr]);
                    //        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //    }

                    //if (currentRowIndex >= 50 && currentRowIndex <= 55)
                    //    for (int i = 1; i <= 13; i++)
                    //    {
                    //        string sc = Convert.ToString("X" + i);
                    //        string sr = Convert.ToString("Y" + i);
                    //        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 6][sc]);
                    //        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 6][sr]);
                    //        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //    }

                    //if (currentRowIndex >= 57 && currentRowIndex <= 59)
                    //    for (int i = 1; i <= 13; i++)
                    //    {
                    //        string sc = Convert.ToString("X" + i);
                    //        string sr = Convert.ToString("Y" + i);
                    //        Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 8][sc]);
                    //        Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[0].Rows[currentRowIndex - 8][sr]);
                    //        pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                    //    }


                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                }
                // isHatchSelection = true;
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
                    }
        }
        private void DrawHatchProfileSelection()
        {
            try
            {
                double[] Tankx = new double[10];
                double[] Tanky = new double[10];
                var currentRowIndex = 0;
                if (Mode == 0)
                {
                    currentRowIndex = dgTanks.Items.IndexOf(dgTanks.CurrentItem);
                }
                else
                {
                    //currentRowIndex = dgRealTanks.Items.IndexOf(dgRealTanks.CurrentItem); comented by sachin for container
                }

                if (currentRowIndex == 1)
                {
                    double[] xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;

                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }

                else if (currentRowIndex == 2)
                {
                    double[] xx = new double[] { 0, 144139.026, 165169.8647, 165169.8647, 144139.026 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1 ; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 3)
                {
                    double[] xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 4)
                {
                    double[] xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 5)
                {
                    double[] xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 6)
                {
                    double[] xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 7)
                {
                    double[] xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 8)
                {
                    double[] xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 9)
                {
                    double[] xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }

                else if (currentRowIndex == 10)
                {
                    double[] xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };
                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;

                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 11)
                {
                    double[] xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 12)
                {
                    double[] xx = new double[] { 0, 38304.54, 59773.057, 59773.057, 38304.54 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 13)
                {
                    double[] xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 14)
                {
                    double[] xx = new double[] { 0, 35142.74, 38304.54, 38304.54, 35142.74 };
                    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 16)
                {
                    double[] xx = new double[] { 0, 173070.57, 174485.77, 175056.73, 176563.17, 177381.933, 177951.608, 178293.47, 178405.99, 178396.36, 178040.27, 177310.39, 175610.68, 173609.4, 173314.19, 173113.203, 173040.57, 173012.38, 173087.19, 176403.0177, 165169.86, 165169.9 };
                    double[] yy = new double[] { 0, 27843.37, 28033.53, 28158.97, 28875.25, 29600.067, 30464.38, 31385.19, 32187.185, 36184.43, 37032.5, 37768.74, 38415.8, 39014.51, 39252.39, 39527.6969, 39758.71, 40315.335, 40803.53, 47831.084, 47670.7, 27843.37 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }

                else if (currentRowIndex == 17)
                {
                    double[] xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 18)
                {
                    double[] xx = new double[] { 0, 144154.95, 165169.8647, 165169.8647, 144139.026 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 19)
                {
                    double[] xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 20)
                {
                    double[] xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 21)
                {
                    double[] xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 22)
                {
                    double[] xx = new double[] { 0, 101800.63, 123019.23, 123019.23, 101800.63 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 23)
                {
                    double[] xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 24)
                {
                    double[] xx = new double[] { 0, 80663.61, 101800.63, 101800.63, 80663.61 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 25)
                {
                    double[] xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 26)
                {
                    double[] xx = new double[] { 0, 59773.057, 80663.61, 80663.61, 59773.057 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 27)
                {
                    double[] xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 28)
                {
                    double[] xx = new double[] { 0, 35142.74, 59773.057, 59773.057, 35142.74 };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 29)
                {
                    double[] xx = new double[] { 0, -4569.7144,-4569.7144, 1787.56, 3638.58, 4419.81, 4907.51, 5350.396, 5492.38, 7234.6765, 7234.6765 };
                    double[] yy = new double[] { 0, 42337.114, 38690.69, 37080.72, 36490.23, 36038.122, 35565.58, 34796.889, 33924.81, 33924.81,42337.114 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                //else if (currentRowIndex == 31)
                //{
                //    double[] xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                //    double[] yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };


                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                //    p.Fill = mySolidColorBrush;
                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);
                //    isHatchSelectionProfile = true;

                //}
                else if (currentRowIndex == 32)
                {
                    double[] xx = new double[] { 0, 31667.1, 35142.74, 35142.74, 31667.1 };
                    double[] yy = new double[] { 0, 33956.94, 33956.94, 47620.5, 47620.5 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 31)
                {
                    double[] xx = new double[] { 0, 24960.49, 28191.28, 35142.74, 35142.74, 24960.49 };
                    double[] yy = new double[] { 0, 35172.65, 33956.93, 33956.94, 47783.843, 47783.843 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 35)
                {
                    double[] xx = new double[] { 0, 24960.5, 28212.68, 28221.68, 24960.5 };
                    double[] yy = new double[] { 0, 38939.8, 38939.8, 45136.29, 45136.29 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 34)
                {
                    double[] xx = new double[] { 0, 28212.68, 31667.1, 31683.25, 28221.68 };
                    double[] yy = new double[] { 0, 38939.8, 38930.1, 45131.25, 45136.29 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 37)
                {
                    double[] xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                    double[] yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 3)
                {
                    double[] xx = new double[] { 0, 1440.58, 7234.68, 7234.68, 1440.58 };
                    double[] yy = new double[] { 0, 42337.15, 42337.15, 47620.5, 47620.5 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 35)
                {
                    double[] xx = new double[] { 0, 17562.6098, 28191.28, 30300.81, 17562.6098 };
                    double[] yy = new double[] { 0, 27843.37, 27843.37, 47783.843, 30300.81 };


                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;

                }
                else if (currentRowIndex == 36)
                {
                    double[] xx = new double[] { 0, 17562.6098, 28191.28, 28191.28, 17562.6098 };

                    double[] yy = new double[] { 0, 27843.37, 27843.37, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 37)
                {
                    double[] xx = new double[] { 0, 31680.52, 33900.3, 33900.3, 31680.52 };
                    double[] yy = new double[] { 0, 43251.84, 43251.84, 46642.03, 46642.03 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                //else if (currentRowIndex == 38)
                //{
                //    double[] xx = new double[] { 0, 123019.23, 144139.026, 144139.026, 123019.23 };
                //    double[] yy = new double[] { 0, 30060.4363, 30060.4363, 47783.843, 47783.843 };


                //    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                //    p.Stroke = System.Windows.Media.Brushes.Black;
                //    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                //    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                //    p.Fill = mySolidColorBrush;
                //    System.Windows.Point[] point = new System.Windows.Point[25];
                //    PointCollection pointCollection = new PointCollection();
                //    for (int i = 1; i <= xx.Length - 1; i++)
                //    {
                //        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                //    }

                //    p.Points = pointCollection;
                //    canvasTwoD.Children.Add(p);
                //    isHatchSelectionProfile = true;

                //}
                else if (currentRowIndex == 43)
                {
                    double[] xx = new double[] { 0, 15203.67, 15983.22, 15983.22, 23339.8, 23339.8, 15983.22, 15983.22, 30300.81 };
                    double[] yy = new double[] { 0, 28627.5, 28627.5, 28810.37, 28810.37, 29738.02, 29738.02, 30300.81, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }

                else if (currentRowIndex == 45)
                {

                    double[] xx = new double[] { 0, 5492.38, 5354.09, 5097.14, 4562.606, 3613.306, 3613.3069, 4344.471, 4691.1784, 5182.8374, 5641.86, 6335.55, 7234.68, 7234.68, 7234.68 };
                    double[] yy = new double[] { 0, 33924.81, 33225.78, 32792.43, 32365.806, 31980.76, 30897.6856, 30643.679, 30352.638, 29852.28, 29418.88, 28941.38, 28491.38, 33924.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 50)
                {

                    double[] xx = new double[] { 0, 26565.503, 28191.28, 28191.28, 26565.503, };
                    double[] yy = new double[] { 0, 27843.3738, 27843.37, 30300.81, 30300.81, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 51)
                {

                    double[] xx = new double[] { 0, 22518.95, 30835.39, 30835.39, 22518.95, };
                    double[] yy = new double[] { 0, 37498.9, 37498.9, 38484.53, 38484.53, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 52)
                {

                    double[] xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 12828.0063 };
                    double[] yy = new double[] { 0, 30300.81, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 30300.81 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 53)
                {

                    double[] xx = new double[] { 0, 11249.06, 12828.006, 12828.006, 11249.06, };
                    double[] yy = new double[] { 0, 29416.47, 29416.47, 30300.81, 30300.81, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 54)
                {

                    double[] xx = new double[] { 0, 12828.0063, 14438.18, 14438.18, 12828.0063, };
                    double[] yy = new double[] { 0, 27843.38, 27843.38, 30300.81, 30300.81, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 57)
                {

                    double[] xx = new double[] { 0, 7234.68, 7234.68, 7612.78, 8065.29, 8405.08, 8869.38, 9670.52, 9956.13, 12828.0063, 28191.28, 28191.28, 24960.49, 24960.49 };
                    double[] yy = new double[] { 0, 47620.49, 28491.38, 28340.82, 28186.49, 28088.25, 27979.73, 27863.65, 27843.38, 27843.38, 27843.37, 33956.93, 35172.65, 47620.49 };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 58)
                {

                    double[] xx = new double[] { 0, 28191.28, 35142.74, 35142.74, 28191.28, };
                    double[] yy = new double[] { 0, 27843.37, 27843.3738, 33956.94, 33956.94, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 59)
                {

                    double[] xx = new double[] { 0, 165169.87, 176403.017, 177784.59, 165169.87, };
                    double[] yy = new double[] { 0, 47783.843, 47831.084, 50567.005, 50536.7593, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else if (currentRowIndex == 60)
                {

                    double[] xx = new double[] { 0, -4569.7144, 1440.58, 1440.58, -4569.7144, };
                    double[] yy = new double[] { 0, 42337.114, 42337.114, 47685.412, 47751.73, };

                    System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                    p.Stroke = System.Windows.Media.Brushes.Black;
                    SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                    mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                    p.Fill = mySolidColorBrush;
                    System.Windows.Point[] point = new System.Windows.Point[25];
                    PointCollection pointCollection = new PointCollection();
                    for (int i = 1; i <= xx.Length - 1; i++)
                    {
                        pointCollection.Add(new System.Windows.Point(xx[i], yy[i]));
                    }

                    p.Points = pointCollection;
                    canvasTwoD.Children.Add(p);
                    isHatchSelectionProfile = true;
                }
                else
                {
                    if (currentRowIndex != -1)
                    {
                        System.Windows.Shapes.Polygon p = new System.Windows.Shapes.Polygon();
                        p.Stroke = System.Windows.Media.Brushes.Black;
                        SolidColorBrush mySolidColorBrush = new SolidColorBrush();
                        mySolidColorBrush.Color = System.Windows.Media.Color.FromArgb(160, 120, 120, 120);
                        p.Fill = mySolidColorBrush;
                        p.UseLayoutRounding = true;
                        p.StrokeThickness = 1;
                        PointCollection pointCollection = new PointCollection();
                        for (int i = 1; i <= 21; i++)
                        {
                            string sc = Convert.ToString("X" + i);
                            string sr = Convert.ToString("Y" + i);
                            Tankx[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[1].Rows[currentRowIndex][sc]);
                            Tanky[i] = Convert.ToDouble(clsGlobVar.dsCoordinates.Tables[1].Rows[currentRowIndex][sr]);
                            pointCollection.Add(new System.Windows.Point(Tankx[i], Tanky[i]));
                        }

                        p.Points = pointCollection;
                        canvasTwoD.Children.Add(p);
                        isHatchSelectionProfile = true;
                    }
                }
            }
            catch
            {

            }
        }

        private void canvas_SizeChanged(object sender, SizeChangedEventArgs e)
        {

            UpdateRenderTransform();
        }

        public static void CreateBitmapFromVisual(Visual target, string fileName)
        {
            try
            {
                if (target == null || string.IsNullOrEmpty(fileName))
                {
                    return;
                }

                Rect bounds = VisualTreeHelper.GetDescendantBounds(target);
                bounds.Width = bounds.Width;
                bounds.Height = bounds.Height;
                //RenderTargetBitmap renderTarget = new RenderTargetBitmap((Int32)bounds.Width / 40, (Int32)bounds.Height / 40, 96, 96, PixelFormats.Pbgra32);
                RenderTargetBitmap renderTarget = new RenderTargetBitmap((Int32)bounds.Width / 160, (Int32)bounds.Height / 160, 120, 120, PixelFormats.Pbgra32);

                DrawingVisual visual = new DrawingVisual();

                using (DrawingContext context = visual.RenderOpen())
                {
                    VisualBrush visualBrush = new VisualBrush(target);
                    context.DrawRectangle(visualBrush, null, new Rect(0, 0, bounds.Width / 40, bounds.Height / 40));
                }

                renderTarget.Render(visual);

                PngBitmapEncoder bitmapEncoder = new PngBitmapEncoder();

                bitmapEncoder.Frames.Add(BitmapFrame.Create(renderTarget));
                using (Stream stm = File.Create(fileName))
                {
                    bitmapEncoder.Save(stm);
                }

            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }

        }
        #endregion 2D

        private void DataGrid_GotFocus(object sender, RoutedEventArgs e)
        {
            // Lookup for the source to be DataGridCell
            if (e.OriginalSource.GetType() == typeof(System.Windows.Controls.DataGridCell))
            {
                // Starts the Edit on the row;
                System.Windows.Controls.DataGrid grd = (System.Windows.Controls.DataGrid)sender;
                grd.BeginEdit(e);
            }
        }


        //private void dgFixedLoad_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)   commnetd by sachin for contaier             
        //{
        //    System.Windows.Input.Key k = e.Key;

        //    bool controlKeyIsDown = Keyboard.IsKeyDown(Key.LeftShift);
        //    if (!controlKeyIsDown &&
        //        Key.D0 <= k && k <= Key.D9 ||
        //        Key.NumPad0 <= k && k <= Key.NumPad9 ||
        //        k == Key.Decimal || k == Key.OemPeriod || k == Key.OemMinus)
        //    {
        //    }

        //    else
        //    {
        //        e.Handled = true;
        //    }

        //}

        private void OpenUserManual_Click(object sender, RoutedEventArgs e)
        {
            string path = System.Windows.Forms.Application.StartupPath + "\\User Manual_ZebecLoadMaster_Saushyant.pdf";
            System.Diagnostics.Process.Start(path);
        }

        private void dgLongitudinal_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {


        }




        private void CheckBox_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                object a = e.Source;
                System.Windows.Controls.CheckBox chk = (System.Windows.Controls.CheckBox)sender;
                chk1 = chk;

                DataGridRow row = FindAncestor<DataGridRow>(chk);
                if (chk.IsChecked == true) { CheckNCheckOutCount++; } else { CheckNCheckOutCount--; }
                if (row != null)
                {
                    DataRowView rv = (DataRowView)row.Item;

                    string Err = "";
                    string query;
                    query = "update [tblSimulationMode_Tank_Status] set [IsDamaged]='" + (bool)chk.IsChecked + "' where Tank_ID=" + rv["Tank_ID"];
                    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    command.CommandText = query;
                    command.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                    Models.TableModel.SimulationModeData();
                    dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                 
                }
            }

            catch
            {
            }
        }

        public static T FindAncestor<T>(DependencyObject current) where T : DependencyObject
        {
            current = VisualTreeHelper.GetParent(current);
            while (current != null)
            {
                if (current is T)
                {
                    return (T)current;
                }

                current = VisualTreeHelper.GetParent(current);
            };
            return null;
        }

        public void printToPdf_DamageCases()
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                Document doc = new Document(iTextSharp.text.PageSize.A4, 30, 30, 30, 20);
                reportPath = System.Windows.Forms.Application.StartupPath + "\\Reports\\Damage Cases\\" + ISO_Date() + "_Report.pdf";
                PdfWriter wri = PdfWriter.GetInstance(doc, new FileStream(reportPath, FileMode.Create));

                doc.Open();//Open Document to write
                wri.PageEvent = new pdfFormating();

                iTextSharp.text.Paragraph projecttit = new iTextSharp.text.Paragraph("ETISALAT : LoadMaster Report ", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // Project  Name
                projecttit.Alignment = Element.ALIGN_CENTER;
                doc.Add(projecttit);
                iTextSharp.text.Paragraph projecttitl = new iTextSharp.text.Paragraph("Damage Stability Summary Report ", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD));
                projecttitl.Alignment = Element.ALIGN_CENTER;
                doc.Add(projecttitl);

                //...........StartOFLogo.........................................
                iTextSharp.text.Image LogoWatermark = iTextSharp.text.Image.GetInstance(System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\Images\\Watermark.jpg");
                iTextSharp.text.Image pic = iTextSharp.text.Image.GetInstance(LogoWatermark);
                pic.Alignment = Element.ALIGN_LEFT;
                pic.ScaleToFit(70, 40);
                doc.Add(pic);

                //iTextSharp.text.Image logoMdl = iTextSharp.text.Image.GetInstance(System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\Images\\Integrity Logo.PNG");
                //iTextSharp.text.Image pic1 = iTextSharp.text.Image.GetInstance(logoMdl);
                //pic1.Alignment = Element.ALIGN_RIGHT;
                //pic1.ScaleToFit(70, 50);
                //pic1.SetAbsolutePosition(485, 740);  //Sangita
                //doc.Add(pic1);
                iTextSharp.text.Paragraph p3 = new iTextSharp.text.Paragraph("Stability Status", FontFactory.GetFont(FontFactory.TIMES, 12, iTextSharp.text.Font.BOLD)); // Loading Summary Table Name
                p3.Alignment = Element.ALIGN_CENTER;
                doc.Add(p3);
                doc.Add(new iTextSharp.text.Paragraph("  "));
                doc.Add(new iTextSharp.text.Paragraph("  "));
               // var red = new BaseColor(255, 0, 0);

                iTextSharp.text.Font fntHeader = FontFactory.GetFont("Times New Roman", 7, iTextSharp.text.Color.RED);   //Header
                iTextSharp.text.Font fntBody = FontFactory.GetFont("Times New Roman", 6f);   // Body
                //..........StartofLoadingSummaryPart1..............................

                doc.Add(new iTextSharp.text.Paragraph("  "));
                doc.Add(new iTextSharp.text.Paragraph("  "));
                PdfPTable tbldamageSummary = new PdfPTable(2);
                tbldamageSummary.DefaultCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                tbldamageSummary.WidthPercentage = 50;
                float[] widthsLoading = new float[] { 2.5f, 1.8f };      //in case nishant decide to incorporate again add 2nd and 3rd column as 1f  
                tbldamageSummary.SetWidths(widthsLoading);
                tbldamageSummary.HorizontalAlignment = Element.ALIGN_CENTER;
                //var orage = new BaseColor(255, 165, 0);

                iTextSharp.text.Font fntRedColor = FontFactory.GetFont("Times New Roman", 1, iTextSharp.text.Color.ORANGE);// Body

                PdfPCell dmgcases = new PdfPCell(new Phrase("Damage Cases", fntHeader));
                dmgcases.HorizontalAlignment = Element.ALIGN_CENTER;
                PdfPCell criteria = new PdfPCell(new Phrase("Status", fntHeader));
                criteria.HorizontalAlignment = Element.ALIGN_CENTER;

                //Add header to table
                tbldamageSummary.AddCell(dmgcases);
                tbldamageSummary.AddCell(criteria);

                DataTable dtDamageSummary = clsGlobVar.dtDamageCriteria.Clone();
                foreach (DataRow dr in clsGlobVar.dtDamageCriteria.Rows)
                {

                    dtDamageSummary.Rows.Add(dr.ItemArray);
                }
                int columnCountFloodPoint = dtDamageSummary.Columns.Count;
                int rowCountFloodPoint = dtDamageSummary.Rows.Count;
                for (int rowCounter = 0; rowCounter < rowCountFloodPoint; rowCounter++)
                {
                    for (int columnCounter = 0; columnCounter < columnCountFloodPoint; columnCounter++)
                    {

                        string strValue = (dtDamageSummary.Rows[rowCounter][columnCounter].ToString());
                        PdfPCell pdf = new PdfPCell(new iTextSharp.text.Paragraph(strValue, fntBody));
                        pdf.HorizontalAlignment = Element.ALIGN_CENTER;
                        tbldamageSummary.AddCell(pdf);
                    }
                }
                doc.Add(tbldamageSummary);

                doc.Close();
                Mouse.OverrideCursor = null;
                System.Windows.MessageBox.Show("PDF Created!");

            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message.ToString());
            }
        }

        private void btnAldamage_Click(object sender, RoutedEventArgs e)
        {
            _DamageStabilityCnt = 0;
            //  cmbDamageCases.Text = "Select damage Case";
            string st = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string rpath = st + "\\Reports\\AllDamageCases";
            //  string[] fileNames = Directory.GetFiles(rpath);

            DirectoryInfo di = new DirectoryInfo(rpath);
            FileInfo[] files = di.GetFiles();
            string hh = string.Empty;
            if (files.Length > 0)
            {
                for (int i = 0; i < files.Length; i++)
                {
                    hh = Convert.ToString(files[i]);
                    //File.Delete(rpath + "\\" + hh);
                }
            }

            var result = System.Windows.MessageBox.Show("Do You Want To start Calculation of All Damage Cases ?", " ", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                #region
                {
                    Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                    btnGenerateReport.IsEnabled = false;
                    btnSaveLoadingCondition.IsEnabled = false;
                    clsGlobVar.FlagDamageCases = true;
                    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string Err = "", cmd = " ";
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 1(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,18,20) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;

                        DamageAll = 1;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 2(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,1) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 2;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 3(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,18,1,3)";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 3;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 4(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,20,3,5) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 4;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 5(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (20,22,5,7) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 5;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 6(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (24,26,9,11) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 6;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);

                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 7(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (26,11,13,31,51) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 7;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);

                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 8(P)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (50,53,31,51,36,37,45,40,49,48,47)";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 8;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);

                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 9";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,17,1,2) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 9;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);

                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 10";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,17,18,19,1,2,3,4) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 10;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);

                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 11";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,19,20,21,3,4,5,6) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 11;
                        _DamageStabilityCnt ++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 1(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,17,19,21) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 12;
                        _DamageStabilityCnt++; ;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 2(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,17,2) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 13;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 3(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (17,19,2,4) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 14;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 4(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (19,21,4,6) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 15;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 5(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (21,23,6,8) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 16;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 6(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (25,27,10,12) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 17;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 7(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (27,12,14,29,51) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 18;
                        _DamageStabilityCnt++;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }
                    {
                        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53 ";
                        for (int i = 0; i < 53; i++)
                        {
                            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                        }
                        clsGlobVar.DamageCase = "Case 8(S)";
                        txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                        cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (50,53,29,51,36,37,45,40,49,48,47) ";
                        command.CommandText = cmd;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                        TableModel.SimulationModeData();
                        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                        DamageAll = 19;
                        _DamageStabilityCnt=0;
                        CmprItem = "All Damage Cases";
                        this.btnCalculate_Click(sender, e);
                        this.btnGenerateReport_Click(sender, e);
                    }

                }
                #endregion
                DamageAll = 0;
                //  pbCalculation.Value = 0;   commnetd by sachin for contaier             
                clsGlobVar.FlagDamageCases = false;
                CmprItem = "";

                DataTable _myDataTable = new DataTable();
                for (int i = 0; i < 2; i++)
                {
                    _myDataTable.Columns.Add();
                }
                for (int i = 0; i < 6; i++)
                {
                    DataRow row = _myDataTable.NewRow();
                    for (int j = 0; j < 2; j++)
                    {
                        row[j] = _statusOKnNotOK[i, j];
                    }
                    _myDataTable.Rows.Add(row);
                    clsGlobVar.dtDamageCriteria = _myDataTable;
                    Mouse.OverrideCursor = null;
                }
                dtStabilityStatus.ItemsSource = clsGlobVar.dtDamageCriteria.DefaultView;
                printToPdf_DamageCases();
                dt1StabilityStatus.IsEnabled = true;
                dt1StabilityStatus.IsSelected = true;
                dt1StabilityStatus.Focus();
            }

        }

        private void canvasTwoD_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            double IDSelect = 0;
            double[] ShadeX;
            double[] ShadeY;
            if (canvasTwoD.IsLoaded == true)
            {
                System.Windows.Point tp = e.GetPosition(this.canvasTwoD);
                double xx = tp.X;
                double yy = tp.Y;
                canvasTwoD.Children.RemoveRange(1, canvasTwoD.Children.Count - 1);
                AddHatchProfile();
                AddHatchDeckPlan();
                ShadeX = new double[5];
                ShadeY = new double[5];

                for (int i = 0; i <= 68; i++)
                {
                    for (int j = 1; j < 2; j++)

                        if ((xx <= clsGlobVar.ProfileCoordinate.mul[i, j]) && (xx >= clsGlobVar.ProfileCoordinate.mul[i, j + 1]))
                        {
                            IDSelect = clsGlobVar.ProfileCoordinate.mul[i, j - 1];

                            for (int p = 0; p <= 68; p++)
                            {
                                for (int n = 1; n < 2; n++)
                                {
                                    if ((yy <= clsGlobVar.ProfileCoordinate.mul[p, n + 2]) && (yy >= clsGlobVar.ProfileCoordinate.mul[p, n + 3]) && (clsGlobVar.ProfileCoordinate.mul[p, n - 1] == IDSelect))
                                    {
                                        IDSelect = clsGlobVar.ProfileCoordinate.mul[i, j - 1];
                                        string sCmd = "Select * from [Profile_View] where Tank_ID='" + IDSelect + "'";
                                        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                                        command.CommandText = sCmd;
                                        command.CommandType = CommandType.Text;
                                        string Err = "";
                                        DataTable dtcoordinateProfile = new DataTable();
                                        dtcoordinateProfile = Models.DAL.clsDBUtilityMethods.GetTable(command, Err);
                                        for (int o = 1; o <= 2; o++)
                                        {
                                            string sc = Convert.ToString("X" + o);
                                            string sr = Convert.ToString("Y" + o);
                                            ShadeX[o] = Convert.ToDouble(dtcoordinateProfile.Rows[0][sc]);
                                            ShadeY[o] = Convert.ToDouble(dtcoordinateProfile.Rows[0][sr]);
                                        }
                                        TankID = Convert.ToInt16(IDSelect);
                                        DrawHatchProfile(canvasTwoD, Convert.ToInt32(IDSelect), 100, ShadeX, ShadeY, System.Windows.Media.Color.FromArgb(180, 255, 255, 128));

                                        Selection();
                                        p = 69;
                                        i = 69;
                                        break;
                                    }
                                }
                            }
                        }
                }

                for (int ii = 0; ii < 18; ii++)
                {

                    for (int jj = 0; jj < 1; jj++)
                    {
                        if ((xx <= clsGlobVar.ProfileCoordinate.MxMnCurved[ii, jj + 1]) && (xx >= clsGlobVar.ProfileCoordinate.MxMnCurved[ii, jj + 2]))
                        {
                            int id = Convert.ToInt16(clsGlobVar.ProfileCoordinate.MxMnCurved[ii, 0]);

                            for (int pp = 0; pp < 18; pp++)
                            {
                                for (int np = 0; np < 1; np++)
                                {
                                    if ((yy <= clsGlobVar.ProfileCoordinate.MxMnCurved[pp, np + 3]) && (yy >= clsGlobVar.ProfileCoordinate.MxMnCurved[pp, np + 4]) && (clsGlobVar.ProfileCoordinate.MxMnCurved[pp, np] == id))
                                    {
                                        TankID = Convert.ToInt16(id);
                                        if (TankID == 11)
                                        {
                                            DrawHatchProfile(canvasTwoD, id, 100, ShadeX, ShadeY, System.Windows.Media.Color.FromArgb(180, 255, 255, 128));
                                        }
                                        else if (TankID == 26)
                                        {
                                            DrawHatchProfile(canvasTwoD, id, 100, ShadeX, ShadeY, System.Windows.Media.Color.FromArgb(180, 255, 255, 128));
                                        }
                                        else if (TankID == 16)
                                        {
                                            //DrawHatchFP(canvasTwoD, id, 100, ShadeX, ShadeY, System.Windows.Media.Color.FromArgb(180, 255, 255, 128));
                                        }
                                        Selection();
                                        pp = 12;
                                        ii = 12;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                //Deck plan
                ShadeX = new double[18];
                ShadeY = new double[18];

                for (int i = 0; i <= 68; i++)
                {
                    for (int j = 1; j < 2; j++)

                        if ((xx <= clsGlobVar.mulDeckPlan[i, j]) && (xx >= clsGlobVar.mulDeckPlan[i, j + 1]))
                        {
                            IDSelect = clsGlobVar.mulDeckPlan[i, j - 1];

                            for (int p = 0; p <= 68; p++)
                            {
                                for (int n = 1; n < 2; n++)
                                {
                                    if ((yy <= clsGlobVar.mulDeckPlan[p, n + 2]) && (yy >= clsGlobVar.mulDeckPlan[p, n + 3]) && (clsGlobVar.mulDeckPlan[p, n - 1] == IDSelect))
                                    {
                                        IDSelect = clsGlobVar.mulDeckPlan[i, j - 1];
                                        string sCmd = "Select * from [DeckPlan] where Tank_ID='" + IDSelect + "'";
                                        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                                        command.CommandText = sCmd;
                                        command.CommandType = CommandType.Text;
                                        string Err = "";
                                        DataTable dtCoordinatesDeckPlan = new DataTable();
                                        dtCoordinatesDeckPlan = Models.DAL.clsDBUtilityMethods.GetTable(command, Err);
                                        for (int o = 1; o <= 17; o++)
                                        {
                                            string sc = Convert.ToString("X" + o);
                                            string sr = Convert.ToString("Y" + o);
                                            ShadeX[o] = Convert.ToDouble(dtCoordinatesDeckPlan.Rows[0][sc]);
                                            ShadeY[o] = Convert.ToDouble(dtCoordinatesDeckPlan.Rows[0][sr]);
                                        }
                                        TankID = Convert.ToInt16(IDSelect);
                                        DrawHatchDeckPlan(canvasTwoD, Convert.ToInt32(IDSelect), 100, ShadeX, ShadeY, System.Windows.Media.Color.FromArgb(180, 255, 255, 128));
                                        Selection();
                                        p = 69;
                                        i = 69;
                                        break;
                                    }
                                }
                            }
                        }
                }
            }

        }

        public void Selection()
        {
            if (TankID >= 1 && TankID <= 49)
            {
                dgTanks.SelectedIndex = TankID - 1;

            }
        }

        private void window_Closed(object sender, EventArgs e)
        {
            GC.Collect();
            System.Windows.Application.Current.Shutdown();

            //updated on 09032019
        }

        private void btnToggle_Click(object sender, RoutedEventArgs e)
        {

        }

        private void lighshipdata_Click(object sender, RoutedEventArgs e)
        {
            LoginWindow objlogin = new LoginWindow();
            objlogin.Show();
        }

        private void checkBox1_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                for (int i = 0; i <= 60; i++)
                {


                    if (i == 0 || i == 15 || i == 30 || i == 36 || i == 39 || i == 44 || i == 49 || i == 56)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 3;
                    }
                    else if (i == 57 || i == 58 || i == 59 || i == 60)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 0;
                    }
                    else
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 1;

                    }
                    //checkBox2.IsChecked = false;   commnetd by sachin for contaier             
                }
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err, query;
                Err = "";
                query = "update tblFSM_max_act set [max_1_act_0]=1 WHERE Tank_ID IN (SELECT Tank_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('COMPARTMENT','FIXED_WEIGHT','LIGHTSHIP','HEADER'))";
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.Message);

            }
        }

        private void checkBox1_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                for (int i = 0; i <= 60; i++)
                {


                    if (i == 0 || i == 15 || i == 30 || i == 36 || i == 39 || i == 44 || i == 49 || i == 56)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 3;
                    }
                    else
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 0;
                    }

                }
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err, query;
                Err = "";
                query = "update tblFSM_max_act set [max_1_act_0]=0 WHERE Tank_ID IN (SELECT Tank_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('COMPARTMENT','FIXED_WEIGHT','LIGHTSHIP','HEADER'))";
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
            }
            catch (Exception ex)
            {

                //System.Windows.MessageBox.Show(ex.Message);  
            }
        }

        private static readonly Regex _regex = new Regex("[^0.]");
        private static bool IsTextAllowed(String text)
        {
            return !_regex.IsMatch(text);
        }

        private void dgTanks_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                if (index != -1)
                {

                    int TankId = Convert.ToInt16((dgTanks.Items[index] as DataRowView)["Tank_ID"]);

                    if (header == "Volume" || header == "% Fill" || header == "Weight" || header == "FSM Type" || header == "FSM" || header == "Temp")// || header == "Ullage" || header == "Den@15Deg")
                    {
                        if (TankId == 53 || TankId == 50 || TankId == 51 || TankId == 52)
                        {
                            e.Handled = !IsTextAllowed(e.Text);
                            ((dgTanks.Items[index] as DataRowView)["max_1_act_0"]) = 0;
                            System.Windows.MessageBox.Show("Manual input in compartment is not allowed ");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                
            }
        }

        private void viewPort3d_Loaded(object sender, RoutedEventArgs e)
        {
            if (_servername != "")
            {
                dispatcherTimer = new System.Windows.Threading.DispatcherTimer();
                dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
                dispatcherTimer.Start();
                dispatcherTimer.Interval = new TimeSpan(0, 0, 0);
            }
        }

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {


            if (_servername != "")
            {
                //viewPort3d.ZoomExtents(new Rect3D(new System.Windows.Media.Media3D.Point3D(35000, -10000, -30000), new Size3D(0, 0, 50000)));
                dispatcherTimer.Stop();
            }
        }


        private void dispatcherTimer_Tick1(object sender, EventArgs e)
        {
            //Checking whether background worker IsBusy
            if (!worker.IsBusy)
                worker.RunWorkerAsync();
        }

        private void checkBox2_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                //checkBox1.IsChecked = false;   commnetd by sachin for contaier             
                for (int i = 0; i <= 60; i++)
                {

                     if (i == 0 || i == 15 || i == 30 || i == 36 || i == 39 || i == 44 || i == 49 || i == 56)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 3;
                    }
                    else if (i == 57 || i == 58 || i == 59 || i == 60)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 0;
                    }
                    else
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 2;

                    }

                }
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err, query;
                Err = "";
                query = "update tblFSM_max_act set [max_1_act_0]=2 WHERE Tank_ID IN (SELECT Tank_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('COMPARTMENT','FIXED_WEIGHT','LIGHTSHIP','HEADER'))";
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.Message);

            }
        }

        private void checkBox2_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                for (int i = 0; i <= 60; i++)
                {

                    if (i == 0 || i == 15 || i == 30 || i == 36 || i == 39 || i == 44 || i == 49 || i == 56)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 3;
                    }
                    else if (i == 57 || i == 58 || i == 59 || i == 60)
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 0;
                    }
                    else
                    {
                        ((dgTanks.Items[i] as DataRowView)["max_1_act_0"]) = 0;

                    }

                }
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err, query;
                Err = "";
                query = "update tblFSM_max_act set [max_1_act_0]=0 WHERE Tank_ID IN (SELECT Tank_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('COMPARTMENT','FIXED_WEIGHT','LIGHTSHIP','HEADER'))";
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
            }
            catch (Exception ex)
            {

                //System.Windows.MessageBox.Show(ex.Message);  
            }
        }

        private void SMMode_Click(object sender, RoutedEventArgs e)
        {
            lblRealheel.Visibility = System.Windows.Visibility.Hidden;
            lblRealtrim.Visibility = System.Windows.Visibility.Hidden;
            Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;

            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
            string Err, query;
            Err = "";
            query = " UPDATE A  SET A.Weight=B.Weight,A.Volume=B.Volume,A.Percent_Full=B.Percent_Full,A.SG=B.SG,A.FSM=B.FSM  " +
                    " FROM tblSimulationMode_Loading_Condition A   " +
                    " INNER JOIN tblLoading_Condition B ON  A.Tank_ID=B.Tank_ID WHERE A.TANK_ID IN (SELECT TANK_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('FIXED_WEIGHT','LIGHTSHIP'))";

            query += " UPDATE A SET A.Volume=B.Volume,A.SG=B.SG " +
                     " FROM tblSimulationMode_Tank_Status A " +
                     " INNER JOIN tblLoading_Condition B ON  A.Tank_ID=B.Tank_ID WHERE A.TANK_ID IN (SELECT TANK_ID FROM tblMaster_Tank WHERE [GROUP] NOT IN ('FIXED_WEIGHT','LIGHTSHIP')) ";
            command.CommandText = query;
            command.CommandType = CommandType.Text;
            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);


            SMMode.Visibility = Visibility.Hidden;
            ReMode.Visibility = Visibility.Visible;
            btnGenerateReport.IsEnabled = false;
            dispatcherTimer1.Stop();
            if (worker != null)
            {
                worker.CancelAsync();
            }
            //lblmode.Content = "Simulation Mode";   commnetd by sachin for contaier             
            Mode = 0;
            dgTanks.Visibility = Visibility.Visible;
            // dgRealTanks.Visibility = Visibility.Hidden; comented by sachin for container
            RefreshScreen();
            dockPanel3.IsEnabled = true;
            dockPanel2.IsEnabled = true;
            txtLoadingConditionName.Text = "";
            Mouse.OverrideCursor = null;

        }

        private void cmbDamageCases_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                //if (cmbDamageCases.SelectedIndex >= 0)
                //{
                //    string cmbSelected = cmbDamageCases.SelectedItem.ToString();
                //    CmprItem = Convert.ToString(cmbSelected.Split(':')[1]);
                //    {
                //        Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                //        btnGenerateReport.IsEnabled = false;
                //        btnSaveLoadingCondition.IsEnabled = false;
                //        clsGlobVar.FlagDamageCases = true;
                //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                //        string Err = "", cmd = "";
                //        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53";
                //        for (int i = 0; i < 61; i++)
                //        {
                //            if (Convert.ToInt16(dtIntactCondition.Rows[i]["Tank_ID"]) >0)
                            
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                //        }

                //        if (CmprItem.Trim() == "Case 1(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 1(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,17,19,21)";
                //        }
                //        else if (CmprItem.Trim() == "Case 2(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 2(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,17,2) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 3(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 3(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (17,19,2,4)";
                //        }
                //        else if (CmprItem.Trim() == "Case 4(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 4(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (19,21,4,6) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 5(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 5(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (21,23,6,8) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 6(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 6(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (25,27,10,12) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 7(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 7(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (27,12,14,29,51) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 8(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 8(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (50,53,29,51,36,37,45,40,49,48,47)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 1(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 1(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,18,20)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 2(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 2(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,1)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 3(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 3(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,18,1,3)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 4(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 4(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,20,3,5)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 5(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 5(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (20,22,5,7)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 6(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 6(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (24,26,9,11)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 7(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 7(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (26,11,13,31,51)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 8(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 8(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (50,53,31,51,36,37,45,40,49,48,47)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 12(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 12(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,52,17) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 13(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 13(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (17)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 14(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 14(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (17,19)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 15(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 15(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (19)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 16(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 16(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (19,4)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 17(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 17(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (19,21)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 18(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 18(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (21,6)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 19(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 19(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (21)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 20(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 20(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (21,23)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 21(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 21(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (23)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 22(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 22(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (23,8)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 23(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 23(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (23,25)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 24(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 24(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (25)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 25(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 25(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (25,10)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 26(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 26(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (25,27)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 27(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 27(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (27)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 28(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 28(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (27,12)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 29(S)")
                //        {
                //            clsGlobVar.DamageCase = "Case 29(S)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (28,53,35)  ";
                //        }
                //        else if (CmprItem.Trim() == "Case 9")
                //        {
                //            clsGlobVar.DamageCase = "Case 9";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,17,1,2) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 10")
                //        {
                //            clsGlobVar.DamageCase = "Case 10";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,17,18,19,1,2,3,4) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 11")
                //        {
                //            clsGlobVar.DamageCase = "Case 11";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,19,20,21,3,4,5,6) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 12(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 12(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,52,16) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 13(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 13(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 14(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 14(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,18) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 15(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 15(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 16(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 16(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,3) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 17(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 17(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (18,20) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 18(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 18(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (20,5) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 19(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 19(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (20) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 20(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 20(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (20,22) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 21(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 21(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (22) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 22(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 22(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (22,7) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 23(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 23(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (22,24) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 24(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 24(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (24) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 25(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 25(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (24,9) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 26(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 26(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (24,26) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 27(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 27(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (26) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 28(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 28(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (26,11) ";
                //        }
                //        else if (CmprItem.Trim() == "Case 29(P)")
                //        {
                //            clsGlobVar.DamageCase = "Case 29(P)";
                //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (28,53,34) ";
                //        }
                //        command.CommandText = cmd;
                //        command.CommandType = CommandType.Text;
                //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                //        Models.TableModel.SimulationModeData();
                //        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                //        clsGlobVar.FlagDamageCases = false;
                //        Mouse.OverrideCursor = null;
                //    }
                //}
            }
            catch
            {
                Mouse.OverrideCursor = null;
            }
        }


        private void ReMode_Click(object sender, RoutedEventArgs e)
        {
            lblRealheel.Visibility = System.Windows.Visibility.Visible;
            lblRealtrim.Visibility = System.Windows.Visibility.Visible;
            Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
            SMMode.Visibility = Visibility.Visible;
            ReMode.Visibility = Visibility.Hidden;
            btnGenerateReport.IsEnabled = false;
            //if (bgWorker != null)
            //{
            //    bgWorker.RunWorkerAsync();
            //    bgWorker.CancelAsync();
            //}
            worker = new BackgroundWorker();
            worker.WorkerSupportsCancellation = true;
            worker.WorkerReportsProgress = true;
            worker.DoWork += worker_DoWork;
            //  worker.ProgressChanged += worker_ProgressChanged;
            worker.RunWorkerCompleted += worker_RunWorkerCompleted;


            dispatcherTimer1.Tick += new EventHandler(dispatcherTimer_Tick1);
            dispatcherTimer1.Start();
            dispatcherTimer1.Interval = new TimeSpan(0, 0, 10);

            worker.RunWorkerAsync();
            //lblmode.Content = "Real Mode";   commnetd by sachin for contaier             
            Mode = 1;
            dgTanks.Visibility = Visibility.Hidden;
            // dgRealTanks.Visibility = Visibility.Visible; comented by sachin for container

            dockPanel3.IsEnabled = false;
            dockPanel2.IsEnabled = false;
            lblCalculationMethod.Content = "Intact";
            lblCalculationMethod.Background = System.Windows.Media.Brushes.LimeGreen;

            Mouse.OverrideCursor = null;


        }

        private void dgRealTanks_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            try
            {
                header = e.Column.Header.ToString();
                if (e.Column.GetType().ToString() == "System.Windows.Controls.DataGridTextColumn")
                {
                    index = e.Row.GetIndex();
                    dgRow = e.Row;
                    TextBlock cbo = (System.Windows.Controls.TextBlock)e.Column.GetCellContent(e.Row);
                    if (index > 41 && clsGlobVar.FlagDamageCases == false)
                    {
                        dgRow.IsEnabled = false;
                    }

                }

            }
            catch
            {

            }
        }

        //private void dgRealTanks_CurrentCellChanged(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        try
        //        {
        //            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string Err = "";
        //            int TankId, fsmType;
        //            decimal percentfill;
        //            decimal sounding;

        //            TankId = Convert.ToInt16((dgRealTanks.Items[index] as DataRowView)["Tank_ID"]);

        //            if (header == "Volume" || header == "% Fill" || header == "S.G." || header == "Weight" || header == "Sounding" || header == "Temp" || header == "Ullage" || header == "Den@15Deg")
        //            {
        //                decimal volume = 0, sg, weight = 0, VCF = 0, WCF = 0, WtInAir = 0, VolumeCor = 0;
        //                decimal minsounding = 0;
        //                decimal temp = 0;
        //                string Grp = (dgRealTanks.Items[index] as DataRowView)["Group"].ToString();
        //                weight = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Weight"]);
        //                volume = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Volume"]);
        //                sg = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["SG"]);
        //                percentfill = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Percent_Full"]);
        //                sounding = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Sounding_Level"]);
        //                // Ullage = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Ullage"]);
        //                // Den@15Deg = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Den@15Deg"]);
        //                temp = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Temperature"]);
        //                VCF = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["VCF"]);
        //                VolumeCor = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Volume_Corr"]);
        //                WCF = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["WCF"]);
        //                WtInAir = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Weight_in_Air"]);
        //                decimal maxsounding = maxVolume[TankId];

        //                if (header == "Volume")
        //                {


        //                    command.CommandText = "SPChangeVolume";
        //                    command.CommandType = CommandType.StoredProcedure;

        //                    DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param1.DbType = DbType.Decimal;
        //                    param1.ParameterName = "@Volume";
        //                    command.Parameters.Add(param1);

        //                    DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param2.DbType = DbType.Int32;
        //                    param2.ParameterName = "@TankId";
        //                    command.Parameters.Add(param2);

        //                    DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param3.DbType = DbType.Double;
        //                    param3.Direction = ParameterDirection.Output;
        //                    param3.ParameterName = "@Sounding";
        //                    command.Parameters.Add(param3);

        //                    DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param4.DbType = DbType.Double;
        //                    param4.Direction = ParameterDirection.Output;
        //                    param4.ParameterName = "@Percent";
        //                    command.Parameters.Add(param4);

        //                    //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    //param5.DbType = DbType.Double;
        //                    //param5.Direction = ParameterDirection.Output;
        //                    //param5.ParameterName = "@Ullage";
        //                    //command.Parameters.Add(param5);


        //                    param1.Value = volume;
        //                    param2.Value = TankId;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //                    sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
        //                    percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
        //                    //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
        //                    weight = volume * sg;

        //                }
        //                if (header == "% Fill")
        //                {
        //                    command.CommandText = "SPChangePercentFill";
        //                    command.CommandType = CommandType.StoredProcedure;

        //                    DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param1.DbType = DbType.Decimal;
        //                    param1.ParameterName = "@Percent";
        //                    command.Parameters.Add(param1);

        //                    DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param2.DbType = DbType.Int32;
        //                    param2.ParameterName = "@TankId";
        //                    command.Parameters.Add(param2);

        //                    DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param3.DbType = DbType.Double;
        //                    param3.Direction = ParameterDirection.Output;
        //                    param3.ParameterName = "@Sounding";
        //                    command.Parameters.Add(param3);

        //                    DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param4.DbType = DbType.Double;
        //                    param4.Direction = ParameterDirection.Output;
        //                    param4.ParameterName = "@Volume";
        //                    command.Parameters.Add(param4);

        //                    //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    //param5.DbType = DbType.Double;
        //                    //param5.Direction = ParameterDirection.Output;
        //                    //param5.ParameterName = "@Ullage";
        //                    //command.Parameters.Add(param5);


        //                    param1.Value = percentfill;
        //                    param2.Value = TankId;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //                    sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
        //                    volume = Math.Round(Convert.ToDecimal(command.Parameters["@Volume"].Value), 3);
        //                    //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);

        //                    weight = volume * sg;
        //                }
        //                if (header == "S.G.")
        //                {
        //                    volume = Convert.ToDecimal((dgRealTanks.Items[index] as DataRowView)["Volume"]);

        //                    weight = volume * sg;
        //                }
        //                if (header == "Weight")
        //                {
        //                    command.CommandText = "SPChangeVolume";
        //                    command.CommandType = CommandType.StoredProcedure;

        //                    DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param1.DbType = DbType.Decimal;
        //                    param1.ParameterName = "@Volume";
        //                    command.Parameters.Add(param1);

        //                    DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param2.DbType = DbType.Int32;
        //                    param2.ParameterName = "@TankId";
        //                    command.Parameters.Add(param2);

        //                    DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param3.DbType = DbType.Double;
        //                    param3.Direction = ParameterDirection.Output;
        //                    param3.ParameterName = "@Sounding";
        //                    command.Parameters.Add(param3);

        //                    DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param4.DbType = DbType.Double;
        //                    param4.Direction = ParameterDirection.Output;
        //                    param4.ParameterName = "@Percent";
        //                    command.Parameters.Add(param4);

        //                    //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    //param5.DbType = DbType.Double;
        //                    //param5.Direction = ParameterDirection.Output;
        //                    //param5.ParameterName = "@Ullage";
        //                    //command.Parameters.Add(param5);


        //                    param1.Value = weight / sg;
        //                    param2.Value = TankId;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //                    sounding = Math.Round(Convert.ToDecimal(command.Parameters["@Sounding"].Value), 3);
        //                    percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
        //                    //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
        //                    volume = weight / sg;
        //                }
        //                if (header == "Sounding")
        //                {
                           

        //                    command.CommandText = "SPChangeSounding";
        //                    command.CommandType = CommandType.StoredProcedure;

        //                    DbParameter param1 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param1.DbType = DbType.Decimal;
        //                    param1.ParameterName = "@Sounding";
        //                    command.Parameters.Add(param1);

        //                    DbParameter param2 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param2.DbType = DbType.Int32;
        //                    param2.ParameterName = "@TankId";
        //                    command.Parameters.Add(param2);

        //                    DbParameter param3 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param3.DbType = DbType.Double;
        //                    param3.Direction = ParameterDirection.Output;
        //                    param3.ParameterName = "@Percent";
        //                    command.Parameters.Add(param3);

        //                    DbParameter param4 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    param4.DbType = DbType.Double;
        //                    param4.Direction = ParameterDirection.Output;
        //                    param4.ParameterName = "@Volume";
        //                    command.Parameters.Add(param4);

        //                    //DbParameter param5 = Models.DAL.clsDBUtilityMethods.GetParameter();
        //                    //param5.DbType = DbType.Double;
        //                    //param5.Direction = ParameterDirection.Output;
        //                    //param5.ParameterName = "@Ullage";
        //                    //command.Parameters.Add(param5);

        //                    param1.Value = sounding;
        //                    param2.Value = TankId;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //                    percentfill = Math.Round(Convert.ToDecimal(command.Parameters["@Percent"].Value), 2);
        //                    volume = Math.Round(Convert.ToDecimal(command.Parameters["@Volume"].Value), 3);
        //                    //Ullage = Math.Round(Convert.ToDecimal(command.Parameters["@Ullage"].Value), 3);
        //                    weight = volume * sg;

        //                }

        //                if (header == "Temp" && Grp == "CARGO_TANK" && cbDensity.IsChecked == true)
        //                {
        //                    double DensityValue = Convert.ToDouble(txtDensity.Text);
        //                    if (DensityValue <= 0.770)
        //                    {

        //                        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((346.422 + 0.438 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((346.422 + 0.438 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));


        //                    }
        //                    if (DensityValue >=0.839)
        //                    {

        //                        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((594.5418 + 0 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((594.5418 + 0 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
        //                    }
        //                    if (DensityValue >= 0.778 && DensityValue < 0.839)
        //                    {

        //                        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((186.9696 + 0.4861 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((186.9696 + 0.4861 * DensityValue*1000) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
        //                    }
        //                    if (DensityValue > 0.770 && DensityValue < 0.778)
        //                    {

        //                        VCF = Convert.ToDecimal(Math.Pow(2.7182, -((-0.003361 + 2680.32) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15) * (1 + 0.8 * ((-0.003361 + 2680.32) / (DensityValue*1000 * DensityValue*1000)) * (Convert.ToDouble(temp) - 15))));
        //                    }



        //                    WCF = Convert.ToDecimal((DensityValue) - 0.0011);
        //                    VolumeCor = VCF * volume;
        //                    WtInAir = VolumeCor * WCF;
        //                }
        //                else
        //                {
        //                    temp = 0;
        //                }

        //                weight = volume * sg;
        //                (dgRealTanks.Items[index] as DataRowView)["Volume"] = Math.Round(volume, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Weight"] = Math.Round(weight, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Percent_Full"] = Math.Round(percentfill, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Sounding_Level"] = Math.Round(sounding, 3);
        //                // (dgRealTanks.Items[index] as DataRowView)["Ullage"] = Math.Round(Ullage, 3);
        //                // (dgRealTanks.Items[index] as DataRowView)["Den@15Deg"] = Math.Round(Den@15Deg, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Temperature"] = Math.Round(temp, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["VCF"] = Math.Round(VCF, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Volume_Corr"] = Math.Round(VolumeCor, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["WCF"] = Math.Round(WCF, 3);
        //                (dgRealTanks.Items[index] as DataRowView)["Weight_in_Air"] = Math.Round(WtInAir, 3);

        //                decimal res1 = decimal.Compare(minsounding, volume);
        //                decimal res2 = decimal.Compare(volume, maxsounding);
        //                int result1 = (int)res1;
        //                int result2 = (int)res2;
        //                if (result1 > 0 || result2 > 0)
        //                {
        //                    string error = "Volume should be between " + minsounding + " and " + maxsounding;
        //                    System.Windows.MessageBox.Show(error);
        //                    // e.Cancel = true;
        //                    return;
        //                }
        //                else
        //                {
        //                    string query = "update tblTank_Status set [Volume]=" + volume + " ,[Sounding_Level]=" + sounding + ",";
        //                    query += "[Temperature]=" + temp + " ,[VCF]=" + VCF + ",[Volume_Corr]=" + VolumeCor + ",[WCF]=" + WCF + ",[Weight_in_Air]=" + WtInAir + "";
        //                    query += " where Tank_ID=" + TankId + " ";

        //                    command.CommandText = query;
        //                    command.CommandType = CommandType.Text;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        //                }
        //                index = -1;
        //                TankId = 0;
        //            }

        //            if (header == "FSM")
        //            {
        //                decimal fsm;
        //                fsm = Convert.ToDecimal((dgTanks.Items[index] as DataRowView)["FSM"]);
        //                fsmType = Convert.ToInt16((dgTanks.Items[index] as DataRowView)["max_1_act_0"]);

        //                if (fsmType == 2)
        //                {
        //                    string query1 = "update tblLoading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
        //                    command.CommandText = query1;
        //                    command.CommandType = CommandType.Text;
        //                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        //                }
        //            }

        //        }
        //        catch (Exception ex)
        //        {

        //        }
        //    }
        //    catch (Exception)
        //    {

        //    }
        //}

        

        private void dgRealTanks_Selected(object sender, RoutedEventArgs e)
        {
            // Lookup for the source to be DataGridCell
            if (e.OriginalSource.GetType() == typeof(System.Windows.Controls.DataGridCell))
            {
                // Starts the Edit on the row;
                System.Windows.Controls.DataGrid grd = (System.Windows.Controls.DataGrid)sender;
                grd.BeginEdit(e);
            }
        }

        private void dgRealTanks_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            System.Windows.Input.Key k = e.Key;
            bool controlKeyIsDown = Keyboard.IsKeyDown(Key.LeftShift);
            if (!controlKeyIsDown &&
               Key.D0 <= k && k <= Key.D9 ||
                 Key.NumPad0 <= k && k <= Key.NumPad9 ||
                 k == Key.Decimal || k == Key.OemPeriod)
            {
                //e.Handled = false;

            }
            else
            {
                e.Handled = true;

            }
        }

        private void dgRealTanks_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;

                DrawHatchDeckPlanSelection();
                DrawHatchProfileSelection();
                Mouse.OverrideCursor = null;


                ///////////////////////////////////

                int TankId;
                string volume, percentfill;
                string TankName, Status;

                //if (dgRealTanks.SelectedIndex != -1)
                //{

                //    TankId = Convert.ToInt16((dgRealTanks.Items[dgRealTanks.SelectedIndex] as DataRowView)["Tank_ID"]);
                //    volume = Convert.ToString((dgRealTanks.Items[dgRealTanks.SelectedIndex] as DataRowView)["Volume"]);
                //    percentfill = Convert.ToString((dgRealTanks.Items[dgRealTanks.SelectedIndex] as DataRowView)["Percent_Full"]);
                //    TankName = Convert.ToString((dgRealTanks.Items[dgRealTanks.SelectedIndex] as DataRowView)["Tank_Name"]);
                //    Status = "False";
                //    if (Status == "True")
                //    {
                //        this.status = "Damaged";
                //        this.volume = Convert.ToString("NA");
                //        this.percent = Convert.ToString("NA");

                //    }
                //    else
                //    {
                //        this.status = "Intact";
                //        this.volume = volume;
                //        this.percent = percentfill;
                //    }
                //}
            }
            catch
            {
                Mouse.OverrideCursor = null;
            }
        }
        private void HandleExpandCollapseForRow(object sender, RoutedEventArgs e)
        {
           
            System.Windows.Controls.Button expandCollapseButton = (System.Windows.Controls.Button)sender;
            DataGridRow selectedRow = DataGridRow.GetRowContainingElement(expandCollapseButton);

            if (null != expandCollapseButton && "+" == expandCollapseButton.Content.ToString())
            {
                selectedRow.DetailsVisibility = Visibility.Visible;
                expandCollapseButton.Content = "-";
            }
            else
            {
                selectedRow.DetailsVisibility = Visibility.Collapsed;
                expandCollapseButton.Content = "+";
            }

      
        }
        //private void dgRealTanks_PreviewTextInput(object sender, TextCompositionEventArgs e)   commnetd by sachin for contaier             
        //{
        //    if (index != -1)
        //    {
        //        int TankId = Convert.ToInt16((dgRealTanks.Items[index] as DataRowView)["Tank_ID"]);
        //        if (header == "Volume" || header == "% Fill" || header == "Weight" || header == "FSM Type" || header == "FSM")
        //        {
        //            if (TankId == 53 || TankId == 50 || TankId == 51 || TankId == 52)
        //            {
        //                e.Handled = !IsTextAllowed(e.Text);
        //                System.Windows.MessageBox.Show("Manual input in compartment is not allowed ");
        //                return;
        //            }

        //            if (TankId >= 1 && TankId <= 31)
        //            {
        //                e.Handled = !IsTextAllowed(e.Text);

        //                System.Windows.MessageBox.Show("Manual input is not allowed beacause its real time data ");
        //                return;
        //            }
        //        }
        //    }
        //}

        private void dgRealTanks_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {

        }

        private void dgContainers20FootInHold_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            try
            {
                header = e.Column.Header.ToString();
                if (e.Column.GetType().ToString() == "System.Windows.Controls.DataGridTextColumn")
                {
                    index = e.Row.GetIndex();

                    TextBlock cbo = (System.Windows.Controls.TextBlock)e.Column.GetCellContent(e.Row);


                }
            }
            catch
            {

            }
        }
        //private void update40Container(int TankId)
        //{
        //    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //    string Err = "", updateText = "";
        //    if (TankId == 30 || TankId == 31)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 62 ";
        //        updateText += " update tblSimulationMode_Condition set [Weight]=0 where Tank_ID= 62 ";
        //    }
        //    else if (TankId == 32 || TankId == 33)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 63 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 63 ";
        //    }
        //    else if (TankId == 34 || TankId == 35)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 64 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 64 ";
        //    }
        //    else if (TankId == 36 || TankId == 37)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 65 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 65 ";
        //    }

        //    else if (TankId == 38 || TankId == 39)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 66 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 66 ";
        //    }
        //    else if (TankId == 40 || TankId == 41)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 67 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 67 ";

        //    }
        //    else if (TankId == 42 || TankId == 43)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 68 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 68 ";

        //    }

        //    else if (TankId == 48 || TankId == 49)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 69 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 69 ";
        //    }
        //    else if (TankId == 50 || TankId == 51)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 70 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 70 ";
        //    }
        //    else if (TankId == 52 || TankId == 53)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 71 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 71 ";
        //    }
        //    else if (TankId == 54 || TankId == 55)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 72 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 72 ";
        //    }

        //    else if (TankId == 56 || TankId == 57)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 73 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 73 ";
        //    }
        //    else if (TankId == 58 || TankId == 59)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 74 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 74 ";

        //    }
        //    else if (TankId == 60 || TankId == 61)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID= 75 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID= 75 ";

        //    }
        //    else if (TankId == 62)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 30 and 31 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 30 and 31 ";
        //    }
        //    else if (TankId == 63)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 32 and 33 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 32 and 33 ";
        //    }
        //    else if (TankId == 64)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 34 and 35 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 34 and 35 ";
        //    }
        //    else if (TankId == 65)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 36 and 37 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 36 and 37 ";
        //    }

        //    else if (TankId == 66)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 38 and 39 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 38 and 39 ";
        //    }

        //    else if (TankId == 67)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 40 and 41 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 40 and 41 ";
        //    }

        //    else if (TankId == 68)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 42 and 43 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 42 and 43 ";
        //    }

        //    else if (TankId == 69)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 48 and 49 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 48 and 49 ";
        //    }

        //    else if (TankId == 70)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 50 and 51 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 50 and 51 ";
        //    }

        //    else if (TankId == 71)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 52 and 53 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 52 and 53 ";
        //    }
        //    else if (TankId == 72)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 54 and 55 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 54 and 55 ";
        //    }
        //    else if (TankId == 73)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 56 and 57 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 56 and 57 ";
        //    }
        //    else if (TankId == 74)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 58 and 59 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 58 and 59 ";
        //    }
        //    else if (TankId == 75)
        //    {
        //        updateText = "Update tblSimulationMode_Tank_Status set [Weight]=0 where Tank_ID between 60 and 61 ";
        //        updateText += " update tblSimulationMode_Loading_Condition set [Weight]=0 where Tank_ID between 60 and 61 ";
        //    }
        //    try
        //    {
        //        command.CommandText = updateText;
        //        command.CommandType = CommandType.Text;
        //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

        //    }
        //    catch
        //    {

        //    }

        //}
        private void dgContainers20FootInHold_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            try
            {
                

                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "", updateText = "",group=" ";
                int TankId, containercount, Container_No;
                decimal weight, vcg, lcg, tcg;
               
                    //TankId = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Tank_Id);
                    Container_No = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Container_No);
                    string TankName = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Bay.ToString();
                    weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Weight);
                    vcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).VCG);
                    lcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).LCG);
                    tcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).TCG);
                    //containercount = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Count);
                    group = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Group.ToString();
          
                //try
                //{ //dgContainers20FootInHold
                //    Container_No = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Container_No);
                //    string TankName = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Bay.ToString();
                //    weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Weight);
                //    vcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).VCG);
                //    lcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).LCG);
                //    tcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).TCG);
                //    containercount = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Count);
                //    group = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Group.ToString();
                //}
                //catch { }
                //update40Container(TankId);

                //DataTable dtMaxCount = new DataTable();
                //string sCmd = "Select [Max_Count] from [tblSimulationMode_Loading_Condition] where Tank_ID=" + TankId;
                //dtMaxCount = clsDAL.GetAllRecsDT(sCmd);
                //if (containercount > Convert.ToInt32(dtMaxCount.Rows[0][0]))
                //{
                //    System.Windows.MessageBox.Show("Total number of containers in " + TankName + " should not be greater than " + Convert.ToInt32(dtMaxCount.Rows[0][0]).ToString());
                //}
                string query = "";
                if(cmbloadingdata.SelectedIndex == 1) 
                //if (flagnumber20inhold == 0&&flagnumber20ondeck==0)
                {
                    query = "update [20Ft_Container_Loading] set [Weight]=" + weight + " where [Container_No]=" + Container_No + " ";
                    //query += " update [20Ft_Container_Loading] set [Weight]=" + weight + " where Tank_ID=" + TankId;
                    query += " update [20Ft_Container_Loading] set [Container_Count]=" +1+ " where [Container_No]=" + Container_No;
                    query += " update [20Ft_Container_Loading] set VCG=" + vcg + " where [Container_No]=" + Container_No;
                    query += " update [20Ft_Container_Loading] set LCG=" + lcg + " where [Container_No]=" + Container_No;
                    query += " update [20Ft_Container_Loading] set TCG=" + tcg + " where [Container_No]=" + Container_No;
                    //query += " update [20Ft_Container_Loading] set [cmbselected]="+1;
                }
                else 
                {
                    query = "update [20Ft_Showbaywise] set [Weight]=" + weight + "where [Bay]='" + TankName+"' and location='"+ group+"'";
                    //query += " update [20Ft_Container_Loading] set [Weight]=" + weight + " where Tank_ID=" + TankId;
                    query += " update [20Ft_Showbaywise] set [Container_Count]=" + 1 + "where [Bay]='" + TankName +"' and location='" + group+"' and weight>0";
                    query += " update [20Ft_Showbaywise] set VCG=" + vcg + " where [Bay]='" + TankName + "' and location='" + group+"'";
                    query += " update [20Ft_Showbaywise] set LCG=" + lcg + " where [Bay]='" + TankName + "' and location='" + group+"'";
                    query += " update [20Ft_Showbaywise] set TCG=" + tcg + "  where [Bay]='" + TankName + "' and location='" + group+"'";
                }
                //string query = "update tblSimulationMode_Tank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
                //query += " update tblSimulationMode_Loading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set [Container_Count]=" + containercount + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                Models.TableModel.SimulationModeData();
                Collection objCollection = new Collection();
                objCollection.CollectionRefresh();
            }
            catch
            {
            }
        }

        private void dgContainers20FootInHold_LoadingRowDetails(object sender, DataGridRowDetailsEventArgs e)
        {
            System.Windows.Controls.Border border = e.DetailsElement as System.Windows.Controls.Border;
            stackGrid = new System.Windows.Controls.DataGrid();
            if (border != null)
            {
                //foreach (var grid in border.Child)
                {
                    Grid grid_ = border.Child as Grid;

                    if (grid_ != null)
                    {
                        foreach (var objinnergrid in grid_.Children)
                        {
                            if (objinnergrid != null)
                            {
                                stackGrid = objinnergrid as System.Windows.Controls.DataGrid;

                            }

                        }
                    }
                }
            }
        }

        private void dgBale_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void radioButtonBayWise40OnDeck_Checked(object sender, RoutedEventArgs e)
        {
            //flagnumber40ondeck = 0;
            //dgContainers40FootOnDeck.IsReadOnly = false;
            //dgContainers40FootOnDeck.Columns[6].IsReadOnly = true;
            //dgContainers40FootOnDeck.Columns[7].IsReadOnly = true;
            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers40FootOnDeck.ItemsSource = null;
            //dgContainers40FootOnDeck.ItemsSource = objCollection.Load40OnDeckBaySource;
            //dgContainers40FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //isStackWise40OnDeck = false;
            //isTierWise40OnDeck = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //}

            //dgContainers40FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
            ////dgContainers40FootOnDeck
        }

        private void radioButtonStackWise40OnDeck_Checked(object sender, RoutedEventArgs e)
        {
            flagnumber40ondeck = 1;
            dgContainers40FootOnDeck.IsReadOnly = false;
            dgContainers40FootOnDeck.Columns[3].Visibility = Visibility.Collapsed;
            dgContainers40FootOnDeck.Columns[6].IsReadOnly = false;
            dgContainers40FootOnDeck.Columns[7].IsReadOnly = false;
            Collection objCollection = new Collection();
            objCollection.CollectionRefresh();
            dgContainers40FootOnDeck.ItemsSource = null;
            //sachin
            ObservableCollection<Bays> _load40ondeckBaySourceTemp = new ObservableCollection<Bays>();

            foreach (Bays b in objCollection.Load40OnDeckBaySource)
            {
                var item = _load40ondeckBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
                if (item == null)
                {
                    b.LCG = b.Stack.Average(i => i.LCG);

                    b.VCG = b.Stack.Average(i => i.VCG);

                    b.TCG = b.Stack.Average(i => i.TCG);
                    b.Weight = b.Stack.Sum(i => i.Weight);

                    _load40ondeckBaySourceTemp.Add(b);
                }
            }



            //objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
            dgContainers40FootOnDeck.ItemsSource = _load40ondeckBaySourceTemp;
            //end



            //dgContainers40FootOnDeck.ItemsSource = objCollection.Load40OnDeckBaySource;
            dgContainers40FootOnDeck.Columns[0].Visibility = Visibility.Visible;
            isStackWise40OnDeck = true;
            isTierWise40OnDeck = false;
            if (stackGrid != null)
            {
                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                stackGrid.IsReadOnly = false;
            }
        }

        private void dgStack_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void dgStack_LoadingRowDetails(object sender, DataGridRowDetailsEventArgs e)
        {

        }

        private void dgStack_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            try
            {
                if (radioButtonStackWise.IsChecked == true)
                {
                    string query = "";
                    string updateText = "";
                    string Err = "";
                    SqlConnection conn = new SqlConnection();
                    SqlCommand cmd = new SqlCommand();
                    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string group_name, bay_name, stack_name, tier_name;
                    decimal weight, totalweight, stack_VCG, stack_TCG;
                    int tankId, Container_No;
                    //tankId = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tank_Id);
                    Container_No = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Container_No);

                    weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Weight);
                    totalweight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Total_Weight);
                    group_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Group);
                    bay_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Bay);
                    stack_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Stack_Name);
                    tier_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tier_Name);
                    //   // update40Container(tankId);
                    //    DataSet ds = new DataSet();
                    //    string cmdText = "";
                    //    cmdText = "SELECT Tank_ID,Weight, Volume, Percent_Full,SG,FSM,Container_Count,LCG,VCG,TCG FROM tblSimulationMode_Loading_Condition where Tank_ID between 76 and 83";
                    //    SqlConnection saConn = new SqlConnection(Models.DAL.clsSqlData.GetConnectionString());
                    //    saConn = new SqlConnection(Models.DAL.clsSqlData.GetConnectionString());
                    //    cmd = new SqlCommand(cmdText, saConn);
                    //    clsGlobVar.DataAdapterLoadingCondition = new SqlDataAdapter(cmd);
                    //    clsGlobVar.DataAdapterLoadingCondition.Fill(ds);
                    //    DataTable dtBale = ds.Tables[0];
                    //    if (weight > 0)
                    //    {
                    //        if (bay_name == "01 BAY IN HOLD" && tier_name == "10")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[0]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.1 HATCH PART HOLD SPACE FORE is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "03 BAY IN HOLD" && tier_name == "06" || tier_name == "08" || tier_name == "10")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[1]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale-   NO.1 HATCH PART HOLD SPACE AFT is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "13 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[2]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.4 HATCH PART HOLD SPACE FORE (INGOT) is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "15 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[3]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.4 HATCH PART HOLD SPACE AFT (INGOT) is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "17 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[4]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.5 HATCH PART HOLD SPACE FORE (INGOT) is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "19 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[5]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.5 HATCH PART HOLD SPACE AFT (INGOT) is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        else if (bay_name == "21 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[6]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale-NO.6 HATCH PART HOLD SPACE FORE (INGOT) is already filled,Please make neccessary changes.");
                    //            }

                    //        }
                    //        else if (bay_name == "23 BAY IN HOLD" && tier_name == "02" || tier_name == "04")
                    //        {
                    //            if (Convert.ToDecimal(dtBale.Rows[7]["Weight"]) > 0)
                    //            {
                    //                System.Windows.MessageBox.Show("Bale- NO.6 HATCH PART HOLD SPACE AFT (INGOT) is already filled,Please make neccessary changes.");
                    //            }
                    //        }
                    //        try
                    //        {
                    //            command.CommandText = updateText;
                    //            command.CommandType = CommandType.Text;
                    //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                    //        }
                    //        catch
                    //        {

                    //        }
                    //    }

                    //    if (weight > 0)
                    //    {

                    //        query = @"update [tblMaster_Tier] set [Container_Count]=1,[Flag]='True' where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";

                    //        conn = new SqlConnection(clsSqlData.GetConnectionString());
                    //        conn.Open();
                    //        cmd = new SqlCommand(query, conn);
                    //        cmd.ExecuteNonQuery();
                    //        conn.Close();

                    //    }
                    //    else
                    //    {
                    //        query = @"update [tblMaster_Tier] set [Container_Count]=0,[Flag]='True'  where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";
                    //        conn = new SqlConnection(clsSqlData.GetConnectionString());
                    //        conn.Open();
                    //        cmd = new SqlCommand(query, conn);
                    //        cmd.ExecuteNonQuery();
                    //        conn.Close();
                    //    }
                    //    //commented by sachin
                    ////    query = @"update [tblMaster_Tier] set [Weight]=" + weight + " where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'
                    ////  Update tblSimulationMode_Loading_Condition  
                    //// set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"'),
                    ////[Container_Count]= (Select sum([Container_Count]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')  
                    //// where [Tank_ID]=" + tankId + @"
                    ////  Update [tblSimulationMode_Tank_Status]  
                    ////  set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')
                    ////  where [Tank_ID]=" + tankId;


                    //    conn = new SqlConnection(clsSqlData.GetConnectionString());
                    //    conn.Open();
                    //    cmd = new SqlCommand(query, conn);
                    //    cmd.ExecuteNonQuery();
                    //    conn.Close();



                    //    DataTable dtTier = new DataTable();
                    //    string sCmd = "Select [Container_ID],[Group],[Bay],[Stack],[Tier],[Weight],[LCG],[VCG],[TCG],[Container_Count] from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "'";
                    //    dtTier = clsDAL.GetAllRecsDT(sCmd);
                    //    decimal sumofProduct = 0, sum = 0, sumofProductTCG = 0;


                    //    foreach (DataRow row in dtTier.Rows)
                    //    {
                    //        sumofProduct += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["VCG"]);
                    //        sumofProductTCG += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["TCG"]);
                    //        sum += Convert.ToDecimal(row["Weight"]);
                    //    }
                    //    stack_VCG = sumofProduct / sum;
                    //    stack_TCG = sumofProductTCG / sum;

                    //    DataTable dtTierWeightSum = new DataTable();
                    //    sCmd = "Select sum([Weight]) as SumWeight from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                    //    dtTierWeightSum = clsDAL.GetAllRecsDT(sCmd);

                    //    DataTable dtStack = new DataTable();
                    //    sCmd = "Select [Max_Weight] as StackWeight from [tblMaster_Stack] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                    //    dtStack = clsDAL.GetAllRecsDT(sCmd);

                    //    if (Convert.ToDecimal(dtTierWeightSum.Rows[0][0]) > Convert.ToDecimal(dtStack.Rows[0][0]))
                    //    {
                    //        System.Windows.MessageBox.Show("Weight of Stack '" + stack_name + "' in " + bay_name + " can not be greater than " + Convert.ToDecimal(dtStack.Rows[0][0]) + " Input Lesser Value");
                    //    }

                    //query = @"update [tblSimulationMode_Loading_Condition] set [VCG]=" + stack_VCG + ",[TCG]=" + stack_TCG + " where [Tank_ID]=" + tankId;
                    query = @"update [20Ft_Container_Loading] set [weight]=" + weight + " where [Container_No]=" + Container_No;
                    conn = new SqlConnection(clsSqlData.GetConnectionString());
                    conn.Open();
                    cmd = new SqlCommand(query, conn);
                    cmd.ExecuteNonQuery();
                    conn.Close();
                    Collection objCollection = new Collection();
                    objCollection.CollectionRefresh();

                }
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }
        }

        private void radioButtonBayWise_Checked(object sender, RoutedEventArgs e)
        {
            //flagnumber20inhold = 0; //container
            //dgContainers20FootInHold.IsReadOnly = false;     
            //dgContainers20FootInHold.Columns[6].IsReadOnly = true;//vcg
            //dgContainers20FootInHold.Columns[7].IsReadOnly = true;//tcg
           

            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers20FootInHold.ItemsSource = null;
            //dgContainers20FootInHold.ItemsSource = objCollection.Load20InHoldBaySource;
            //dgContainers20FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //isStackWise = false;
            //isTierWise = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //}
            //dgContainers20FootInHold.Columns[3].Visibility = Visibility.Visible;
            
            ////dgContainers20FootInHold.Columns[0].Visibility = Visibility.Collapsed;
        }

        private void radioButtonStackWise_Checked(object sender, RoutedEventArgs e)
        {
            ////bay wise 20
            //flagnumber20inhold = 1;


            //dgContainers20FootInHold.IsReadOnly = false;
           
            //dgContainers20FootInHold.Columns[3].Visibility = Visibility.Collapsed;
            
            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers20FootInHold.ItemsSource = null;

            //dgContainers20FootInHold.Columns[6].IsReadOnly = false;
            //dgContainers20FootInHold.Columns[7].IsReadOnly = false;
            

            //ObservableCollection<Bays> _load20InHoldBaySourceTemp = new ObservableCollection<Bays>();

            //foreach(Bays b in objCollection.Load20InHoldBaySource)
            //{
            //    var item = _load20InHoldBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
            //    if (item == null)
            //    {
            //        b.LCG = b.Stack.Average(i=>i.LCG);

            //        b.VCG = b.Stack.Average(i => i.VCG);

            //        b.TCG = b.Stack.Average(i => i.TCG);
            //        b.Weight = b.Stack.Sum(i => i.Weight);

            //        _load20InHoldBaySourceTemp.Add(b);
            //    }
            //}

         

            ////objCollection.Load20InHoldBaySource = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
            //dgContainers20FootInHold.ItemsSource = _load20InHoldBaySourceTemp;
           
            //dgContainers20FootInHold.Columns[0].Visibility = Visibility.Visible;
            //isStackWise = false;
            //isTierWise = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //    stackGrid.IsReadOnly = false;
            //}
            ////DataTable dt = new DataTable();
            ////    dt = ((DataView)dgContainers20FootInHold.ItemsSource).ToTable();
            //string GroupName = Convert.ToString((dgContainers20FootInHold.Items[2] as Bays).Group);
            ////for (int i = 0; i < dt.Rows.Count; i++)
            ////{
            ////    string GroupName = Convert.ToString((dgContainers20FootInHold.Items[i] as DataRowView)["Group"]);
            ////    string BayName = Convert.ToString((dgContainers20FootInHold.Items[i] as DataRowView)["Tank_Name"]);

            ////}

        }

        private void dgStack20OnDeck_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            try
            {
                if (radioButtonStackWise20OnDeck.IsChecked == true)
                {
                    string query = "";
                    SqlConnection conn = new SqlConnection();
                    SqlCommand cmd = new SqlCommand();
                    string group_name, bay_name, stack_name, tier_name;
                    decimal weight, totalweight, stack_VCG, stack_TCG, bay_VCG;
                    int tankId;
                    tankId = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tank_Id);
                    weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Weight);
                    totalweight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Total_Weight);
                    group_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Group);
                    bay_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Bay);
                    stack_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Stack_Name);
                    tier_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tier_Name);
                    //update40Container(tankId);
                    if (weight > 0)
                    {

                        query = @"update [tblMaster_Tier] set [Container_Count]=1,[Flag]='True' where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";

                        conn = new SqlConnection(clsSqlData.GetConnectionString());
                        conn.Open();
                        cmd = new SqlCommand(query, conn);
                        cmd.ExecuteNonQuery();
                        conn.Close();

                    }
                    else
                    {
                        query = @"update [tblMaster_Tier] set [Container_Count]=0,[Flag]='True' where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";
                        conn = new SqlConnection(clsSqlData.GetConnectionString());
                        conn.Open();
                        cmd = new SqlCommand(query, conn);
                        cmd.ExecuteNonQuery();
                        conn.Close();
                    }
                    //                 Update tblMaster_Stack  
                    //                 set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + @"'),
                    //                [Container_Count]= (Select sum([Container_Count]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + @"')  
                    //                 where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + @"';
                    query = @"update [tblMaster_Tier] set [Weight]=" + weight + " where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'
                  Update tblSimulationMode_Loading_Condition  
                 set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"'),
                [Container_Count]= (Select sum([Container_Count]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')  
                 where [Tank_ID]=" + tankId + @"
                  Update [tblSimulationMode_Tank_Status]  
                  set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')
                  where [Tank_ID]=" + tankId;


                    conn = new SqlConnection(clsSqlData.GetConnectionString());
                    conn.Open();
                    cmd = new SqlCommand(query, conn);
                    cmd.ExecuteNonQuery();
                    conn.Close();
                    DataTable dtTier = new DataTable();
                    string sCmd = "Select [Container_ID],[Group],[Bay],[Stack],[Tier],[Weight],[LCG],[VCG],[TCG],[Container_Count] from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "'";
                    dtTier = clsDAL.GetAllRecsDT(sCmd);
                    decimal sumofProduct = 0, sum = 0, sumofProductTCG = 0;


                    foreach (DataRow row in dtTier.Rows)
                    {
                        sumofProduct += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["VCG"]);
                        sumofProductTCG += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["TCG"]);
                        sum += Convert.ToDecimal(row["Weight"]);
                    }
                    stack_VCG = sumofProduct / sum;
                    stack_TCG = sumofProductTCG / sum;

                    DataTable dtTierWeightSum = new DataTable();
                    sCmd = "Select sum([Weight]) as SumWeight from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                    dtTierWeightSum = clsDAL.GetAllRecsDT(sCmd);

                    DataTable dtStack = new DataTable();
                    sCmd = "Select [Max_Weight] as StackWeight from [tblMaster_Stack] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                    dtStack = clsDAL.GetAllRecsDT(sCmd);

                    if (Convert.ToDecimal(dtTierWeightSum.Rows[0][0]) > Convert.ToDecimal(dtStack.Rows[0][0]))
                    {
                        System.Windows.MessageBox.Show("Weight of Stack '" + stack_name + "' in " + bay_name + " can not be greater than " + Convert.ToDecimal(dtStack.Rows[0][0]) + " Input Lesser Value");
                    }

                    query = @"update [tblSimulationMode_Loading_Condition] set [VCG]=" + stack_VCG + ",[TCG]=" + stack_TCG + " where [Tank_ID]=" + tankId;
                    conn = new SqlConnection(clsSqlData.GetConnectionString());
                    conn.Open();
                    cmd = new SqlCommand(query, conn);
                    cmd.ExecuteNonQuery();
                    conn.Close();
                    Collection objCollection = new Collection();

                }
            }
            catch
            {
            }
        }

        private void dgStack20OnDeck_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void dgStack20OnDeck_LoadingRowDetails(object sender, DataGridRowDetailsEventArgs e)
        {

        }

        private void radioButtonBayWise20OnDeck_Checked(object sender, RoutedEventArgs e)
        {
            //flagnumber20ondeck = 0;
            //    dgContainers20FootOnDeck.IsReadOnly = false;
     
  
            //    dgContainers20FootOnDeck.Columns[5].IsReadOnly = true;
            //    dgContainers20FootOnDeck.Columns[6].IsReadOnly = true;
            //    dgContainers20FootOnDeck.Columns[7].IsReadOnly = true;
         
            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers20FootOnDeck.ItemsSource = null;
            //dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
            //dgContainers20FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //isStackWise20OnDeck = false;
            //isTierWise20OnDeck = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //}
           
            //    dgContainers20FootOnDeck.Columns[3].Visibility = Visibility.Visible;
           
            //dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
        }

        private void radioButtonStackWise20OnDeck_Checked(object sender, RoutedEventArgs e)
        {
            //flagnumber20ondeck = 1;
            //// dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
            //showbaywise.IsEnabled = true;
            //dgContainers20FootOnDeck.IsReadOnly = false;
            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers20FootOnDeck.ItemsSource = null;
            //dgContainers20FootOnDeck.Columns[3].Visibility = Visibility.Collapsed;
            //dgContainers20FootOnDeck.Columns[6].IsReadOnly = false;
            //dgContainers20FootOnDeck.Columns[7].IsReadOnly = false;
            ////sachin
            //ObservableCollection<Bays> _load20onHoldBaySourceTemp = new ObservableCollection<Bays>();

            //foreach (Bays b in objCollection.Load20OnDeckBaySource)
            //{
            //    var item = _load20onHoldBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
            //    if (item == null)
            //    {
            //        b.LCG = b.Stack.Average(i => i.LCG);

            //        b.VCG = b.Stack.Average(i => i.VCG);

            //        b.TCG = b.Stack.Average(i => i.TCG);
            //        b.Weight = b.Stack.Sum(i => i.Weight);

            //        _load20onHoldBaySourceTemp.Add(b);
            //    }
            //}



            ////objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
            //dgContainers20FootOnDeck.ItemsSource = _load20onHoldBaySourceTemp;
            ////end





            ////dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
            //dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Visible;
            //isStackWise20OnDeck = true;
            //isTierWise20OnDeck = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //    stackGrid.IsReadOnly = false;
            //}
        }

        private void dgStack40InHold_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            try
            {
                if (radioButtonStackWise40InHold.IsChecked == true)
                {
                    string query = "";
                    SqlConnection conn = new SqlConnection();
                    SqlCommand cmd = new SqlCommand();
                    string group_name, bay_name, stack_name, tier_name;
                    decimal weight, totalweight, stack_VCG, stack_TCG, bay_VCG;
                    int tankId, Container_No;
                    //tankId = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tank_Id);
                    Container_No = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Container_No);
                    weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Weight);
                    totalweight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Total_Weight);
                    group_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Group);
                    bay_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Bay);
                    stack_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Stack_Name);
                    tier_name = Convert.ToString((e.Row.Item as ZebecLoadMaster.Models.DAL.Stack).Tier_Name);
                    //update40Container(tankId);
                //    DataSet ds = new DataSet();
                //    string cmdText = "";
                //    cmdText = "SELECT Tank_ID,Weight, Volume, Percent_Full,SG,FSM,Container_Count,LCG,VCG,TCG FROM tblSimulationMode_Loading_Condition where Tank_ID between 76 and 83";
                //    SqlConnection saConn = new SqlConnection(Models.DAL.clsSqlData.GetConnectionString());
                //    saConn = new SqlConnection(Models.DAL.clsSqlData.GetConnectionString());
                //    cmd = new SqlCommand(cmdText, saConn);
                //    clsGlobVar.DataAdapterLoadingCondition = new SqlDataAdapter(cmd);
                //    clsGlobVar.DataAdapterLoadingCondition.Fill(ds);
                //    DataTable dtBale = ds.Tables[0];
                //    if (weight > 0)
                //    {
                //        if (bay_name == "14 BAY IN HOLD" && (tier_name == "02" || tier_name == "04"))
                //        {
                //            if (Convert.ToDecimal(dtBale.Rows[3]["Weight"]) > 0 || Convert.ToDecimal(dtBale.Rows[4]["Weight"]) > 0)
                //            {
                //                System.Windows.MessageBox.Show("Bale- NO.4 HATCH PART HOLD SPACE FORE (INGOT) and NO.4 HATCH PART HOLD SPACE AFT (INGOT) are already filled,Please make neccessary changes.");
                //            }
                //        }
                //        else if (bay_name == "18 BAY IN HOLD" && (tier_name == "02" || tier_name == "04"))
                //        {
                //            if (Convert.ToDecimal(dtBale.Rows[5]["Weight"]) > 0 || Convert.ToDecimal(dtBale.Rows[6]["Weight"]) > 0)
                //            {
                //                System.Windows.MessageBox.Show("Bale-   NO.5 HATCH PART HOLD SPACE FORE (INGOT) and NO.5 HATCH PART HOLD SPACE AFT (INGOT)  are already filled,Please make neccessary changes.");
                //            }
                //        }
                //        else if (bay_name == "22 BAY IN HOLD" && (tier_name == "02" || tier_name == "04"))
                //        {
                //            if (Convert.ToDecimal(dtBale.Rows[7]["Weight"]) > 0 || Convert.ToDecimal(dtBale.Rows[8]["Weight"]) > 0)
                //            {
                //                System.Windows.MessageBox.Show("Bale-NO.6 HATCH PART HOLD SPACE FORE (INGOT) and NO.6 HATCH PART HOLD SPACE AFT (INGOT) are already filled,Please make neccessary changes.");
                //            }
                //        }
                //    }
                //    if (weight > 0)
                //    {

                //        query = @"update [tblMaster_Tier] set [Container_Count]=1,[Flag]='True' where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";

                //        conn = new SqlConnection(clsSqlData.GetConnectionString());
                //        conn.Open();
                //        cmd = new SqlCommand(query, conn);
                //        cmd.ExecuteNonQuery();
                //        conn.Close();

                //    }
                //    else
                //    {
                //        query = @"update [tblMaster_Tier] set [Container_Count]=0,[Flag]='True' where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'";
                //        conn = new SqlConnection(clsSqlData.GetConnectionString());
                //        conn.Open();
                //        cmd = new SqlCommand(query, conn);
                //        cmd.ExecuteNonQuery();
                //        conn.Close();
                //    }

                //    query = @"update [tblMaster_Tier] set [Weight]=" + weight + " where [Group]='" + group_name + "' and [Bay]='" + bay_name + "' and [Stack]='" + stack_name + "' and [Tier]='" + tier_name + @"'
                //  Update tblSimulationMode_Loading_Condition  
                // set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"'),
                //[Container_Count]= (Select sum([Container_Count]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')  
                // where [Tank_ID]=" + tankId + @"
                //  Update [tblSimulationMode_Tank_Status]  
                //  set [Weight]= (Select sum([Weight]) from [tblMaster_Tier] where [Group]='" + group_name + "' and [Bay]='" + bay_name + @"')
                //  where [Tank_ID]=" + tankId;


                //    conn = new SqlConnection(clsSqlData.GetConnectionString());
                //    conn.Open();
                //    cmd = new SqlCommand(query, conn);
                //    cmd.ExecuteNonQuery();
                //    conn.Close();
                //    DataTable dtTier = new DataTable();
                //    string sCmd = "Select [Container_ID],[Group],[Bay],[Stack],[Tier],[Weight],[LCG],[VCG],[TCG],[Container_Count] from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "'";
                //    dtTier = clsDAL.GetAllRecsDT(sCmd);
                //    decimal sumofProduct = 0, sum = 0, sumofProductTCG = 0;


                //    foreach (DataRow row in dtTier.Rows)
                //    {
                //        sumofProduct += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["VCG"]);
                //        sumofProductTCG += Convert.ToDecimal(row["Weight"]) * Convert.ToDecimal(row["TCG"]);
                //        sum += Convert.ToDecimal(row["Weight"]);
                //    }
                //    stack_VCG = sumofProduct / sum;
                //    stack_TCG = sumofProductTCG / sum;

                //    DataTable dtTierWeightSum = new DataTable();
                //    sCmd = "Select sum([Weight]) as SumWeight from [tblMaster_Tier] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                //    dtTierWeightSum = clsDAL.GetAllRecsDT(sCmd);

                //    DataTable dtStack = new DataTable();
                //    sCmd = "Select [Max_Weight] as StackWeight from [tblMaster_Stack] where [Group]='" + group_name + "' and Bay='" + bay_name + "' and [Stack]='" + stack_name + "'";
                //    dtStack = clsDAL.GetAllRecsDT(sCmd);

                //    if (Convert.ToDecimal(dtTierWeightSum.Rows[0][0]) > Convert.ToDecimal(dtStack.Rows[0][0]))
                //    {
                //        System.Windows.MessageBox.Show("Weight of Stack '" + stack_name + "' in " + bay_name + " can not be greater than " + Convert.ToDecimal(dtStack.Rows[0][0]) + " Input Lesser Value");
                //    }

                    //query = @"update [tblSimulationMode_Loading_Condition] set [VCG]=" + stack_VCG + ",[TCG]=" + stack_TCG + " where [Tank_ID]=" + tankId;
                    query = @"update [40Ft_Container_Loading] set [weight]=" + weight + " where [Container_No]=" + Container_No;
                    conn = new SqlConnection(clsSqlData.GetConnectionString());
                    conn.Open();
                    cmd = new SqlCommand(query, conn);
                    cmd.ExecuteNonQuery();
                    conn.Close();
                    Collection objCollection = new Collection();

                }
            }
            catch
            {
            }
        }

        private void dgStack40InHold_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void dgStack40InHold_LoadingRowDetails(object sender, DataGridRowDetailsEventArgs e)
        {

        }

        private void radioButtonBayWise40InHold_Checked(object sender, RoutedEventArgs e)
        {
            //flagnumber40inhold = 0;
            //dgContainers40FootInHold.IsReadOnly = false;
            //dgContainers40FootInHold.Columns[5].IsReadOnly = true;
            //dgContainers40FootInHold.Columns[7].IsReadOnly = true;
           
            //Collection objCollection = new Collection();
            //objCollection.CollectionRefresh();
            //dgContainers40FootInHold.ItemsSource = null;
            //dgContainers40FootInHold.ItemsSource = objCollection.Load40InHoldBaySource;
            //dgContainers40FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //isStackWise40InHold = false;
            //isTierWise40InHold = false;
            //if (stackGrid != null)
            //{
            //    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
            //}
            //dgContainers40FootInHold.Columns[3].Visibility = Visibility.Visible;
           
        }

        private void radioButtonStackWise40InHold_Checked(object sender, RoutedEventArgs e)
        {
           // flagnumber40inhold = 1;
           // dgContainers40FootInHold.Columns[3].Visibility = Visibility.Collapsed;
         
           // dgContainers40FootInHold.Columns[6].IsReadOnly = false;
           // dgContainers40FootInHold.Columns[7].IsReadOnly = false;
           // dgContainers40FootInHold.IsReadOnly = false; //bay

           // Collection objCollection = new Collection();
           // objCollection.CollectionRefresh();
           // dgContainers40FootInHold.ItemsSource = null;
           // //sachin
           // ObservableCollection<Bays> _load40inholdBaySourceTemp = new ObservableCollection<Bays>();

           // foreach (Bays b in objCollection.Load40InHoldBaySource)
           // {
           //     var item = _load40inholdBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
           //     if (item == null)
           //     {
           //         b.LCG = b.Stack.Average(i => i.LCG);

           //         b.VCG = b.Stack.Average(i => i.VCG);

           //         b.TCG = b.Stack.Average(i => i.TCG);
           //         b.Weight = b.Stack.Sum(i => i.Weight);

           //         _load40inholdBaySourceTemp.Add(b);
           //     }
           // }



           // //objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
           // dgContainers40FootInHold.ItemsSource = _load40inholdBaySourceTemp;
           // //end
           //// /*dgContainers40FootInHold*/.ItemsSource = objCollection.Load40InHoldBaySource;
           // //dgContainers40FootInHold.Columns[0].Visibility = Visibility.Visible;
           // isStackWise40InHold = true;
           // isTierWise40InHold = false;
           // if (stackGrid != null)
           // {
           //     stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
           //     stackGrid.IsReadOnly = false;
           // }
        }

        private void dgStack40OnDeck_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void dgStack40OnDeck_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void radioButtonAtSea_Checked(object sender, RoutedEventArgs e)
        {

        }

        private void radioButtonAtPort_Checked(object sender, RoutedEventArgs e)
        {

        }

        private void radioButtonSummer_Checked(object sender, RoutedEventArgs e)
        {

        }

        private void radioButtonTropical_Checked(object sender, RoutedEventArgs e)
        {

        }

        private void dgContainers40FootInHold_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        
        {



            try
            {

                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "", updateText = "", group = " ";
                int TankId, containercount, Container_No;
                decimal weight, vcg, lcg, tcg;

                //TankId = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Tank_Id);
                Container_No = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Container_No);
                string TankName = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Bay.ToString();
                weight = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Weight);
                vcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).VCG);
                lcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).LCG);
                tcg = Convert.ToDecimal((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).TCG);
                containercount = Convert.ToInt32((e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Count);
                group = (e.Row.Item as ZebecLoadMaster.Models.DAL.Bays).Group.ToString();
                //update40Container(TankId);

                //DataTable dtMaxCount = new DataTable();
                //string sCmd = "Select [Max_Count] from [tblSimulationMode_Loading_Condition] where Tank_ID=" + TankId;
                //dtMaxCount = clsDAL.GetAllRecsDT(sCmd);
                //if (containercount > Convert.ToInt32(dtMaxCount.Rows[0][0]))
                //{
                //    System.Windows.MessageBox.Show("Total number of containers in " + TankName + " should not be greater than " + Convert.ToInt32(dtMaxCount.Rows[0][0]).ToString());
                //}
                string query = "";
                if (flagnumber40ondeck == 0 && flagnumber40inhold == 0)
                {
                    query = "update [40Ft_Container_Loading] set [Weight]=" + weight + " where [Container_No]=" + Container_No + " ";
                    //query += " update [20Ft_Container_Loading] set [Weight]=" + weight + " where Tank_ID=" + TankId;
                    // query += " update [40Ft_Container_Loading] set [Container_Count]=" + containercount + " where [Container_No]=" + Container_No;
                    query += " update [40Ft_Container_Loading] set [Container_Count]=" + 1 + " where [Container_No]=" + Container_No;
                    query += " update [40Ft_Container_Loading] set VCG=" + vcg + " where [Container_No]=" + Container_No;
                    query += " update [40Ft_Container_Loading] set LCG=" + lcg + " where [Container_No]=" + Container_No;
                    query += " update [40Ft_Container_Loading] set TCG=" + tcg + " where [Container_No]=" + Container_No;
                }
                else
                {
                    query = "update [40Ft_Showbaywise] set [Weight]=" + weight + " where [Bay]='" + TankName + "' and location='" + group + "'";
                    //query += " update [20Ft_Container_Loading] set [Weight]=" + weight + " where Tank_ID=" + TankId;
                    //query += " update [40Ft_Showbaywise] set [Container_Count]=" + containercount + " where [Bay]='" + TankName + "' and location='" + group + "'";
                    query += " update [40Ft_Showbaywise] set [Container_Count]=" + 1 + "where [Bay]='" + TankName + "' and location='" + group + "' and weight>0";
                    query += " update [40Ft_Showbaywise] set VCG=" + vcg + "where [Bay]='" + TankName + "' and location='" + group + "'";
                    query += " update [40Ft_Showbaywise] set LCG=" + lcg + "where [Bay]='" + TankName + "' and location='" + group + "'";
                    query += " update [40Ft_Showbaywise] set TCG=" + tcg + " where [Bay]='" + TankName + "' and location='" + group + "'";
                }
                //string query = "update tblSimulationMode_Tank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
                //query += " update tblSimulationMode_Loading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set [Container_Count]=" + containercount + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                Models.TableModel.SimulationModeData();
                Collection objCollection = new Collection();
                objCollection.CollectionRefresh();
            }
            catch { }
        }

        private void dgContainers40FootOnDeck_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void BTNSHOWBAYWISE_CLICK(object sender, RoutedEventArgs e)
        {
            //showbaywise40deck showbaywise4 = new showbaywise40deck();
            //showbaywise4.Close();
            TabItem ti1 = tabControl5.SelectedItem as TabItem;
            //System.Windows.MessageBox.Show(ti1.Header.ToString());
            try
            {
                TabItem ti2 = tabControl6.SelectedItem as TabItem;
                //System.Windows.MessageBox.Show(ti2.Header.ToString());
                if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
                {
                    SHOWBAYWISE SHOWBAYWISE1 = new SHOWBAYWISE();
                    SHOWBAYWISE1.Show();                      
                }
                else if (ti2.Header.ToString() == "On Deck")
                {
                    showbaywise20 showbase2 = new showbaywise20();
                    showbase2.Show();
                }
            }
            catch(Exception ex) { }
            //try
            //{
            //    TabItem ti3 = tabControl7.SelectedItem as TabItem;
            //    //System.Windows.MessageBox.Show(ti3.Header.ToString());
            //    if (ti1.Header.ToString() == "40' Containers" && ti3.Header.ToString() == "In Hold")
            //    {
                    
            //        showbaywise40hold showbase3 = new showbaywise40hold();
            //        showbase3.Show();
                    
            //        closewindow();

            //    }
            //    else if(ti3.Header.ToString()== "On Deck")
            //    {
            //        showbaywise40deck showbaywise4 = new showbaywise40deck();
            //        showbaywise4.Show();
            //    }
            //}
            //catch(Exception ex)
            //{ }
            

          
           // tabControl5.SelectedIndex = 1;
        }

        //SACHIN 2MARCH 40' HOLD
        private void BTNSHOWBAYWISE40HOLD_CLICK(object sender, RoutedEventArgs e)
        {
            ////showbaywise40deck showbaywise4 = new showbaywise40deck();
            ////showbaywise4.Close();
            //TabItem ti1 = tabControl5.SelectedItem as TabItem;
            ////System.Windows.MessageBox.Show(ti1.Header.ToString());
            //try
            //{
            //    TabItem ti2 = tabControl6.SelectedItem as TabItem;
            //    //System.Windows.MessageBox.Show(ti2.Header.ToString());
            //    if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
            //    {
            //        SHOWBAYWISE SHOWBAYWISE1 = new SHOWBAYWISE();
            //        SHOWBAYWISE1.Show();
            //    }
            //    else if (ti2.Header.ToString() == "On Deck")
            //    {
            //        showbaywise20 showbase2 = new showbaywise20();
            //        showbase2.Show();
            //    }
            //}
            //catch (Exception ex) { }
            //try
            //{
            //    TabItem ti3 = tabControl7.SelectedItem as TabItem;
            //    //System.Windows.MessageBox.Show(ti3.Header.ToString());
            //    if (ti1.Header.ToString() == "40' Containers" && ti3.Header.ToString() == "In Hold")
            //    {

            showbaywise40hold showbase3 = new showbaywise40hold();
            showbase3.Show();

            //        closewindow();

            //    }
            //    else if (ti3.Header.ToString() == "On Deck")
            //    {
            //        showbaywise40deck showbaywise4 = new showbaywise40deck();
            //        showbaywise4.Show();
            //    }
            //}
            //catch (Exception ex)
            //{ }



            // tabControl5.SelectedIndex = 1;
        }
        //END FOR BAYWISE BUTTON 40' HOLD 
        //SACHIN 2MARCH 40' DECK
        private void BTNSHOWBAYWISE40DECK_CLICK(object sender, RoutedEventArgs e)
        {
            ////showbaywise40deck showbaywise4 = new showbaywise40deck();
            ////showbaywise4.Close();
            //TabItem ti1 = tabControl5.SelectedItem as TabItem;
            ////System.Windows.MessageBox.Show(ti1.Header.ToString());
            //try
            //{
            //    TabItem ti2 = tabControl6.SelectedItem as TabItem;
            //    //System.Windows.MessageBox.Show(ti2.Header.ToString());
            //    if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
            //    {
            //        SHOWBAYWISE SHOWBAYWISE1 = new SHOWBAYWISE();
            //        SHOWBAYWISE1.Show();
            //    }
            //    else if (ti2.Header.ToString() == "On Deck")
            //    {
            //        showbaywise20 showbase2 = new showbaywise20();
            //        showbase2.Show();
            //    }
            //}
            //catch (Exception ex) { }
            //try
            //{
            //    TabItem ti3 = tabControl7.SelectedItem as TabItem;
            //    //System.Windows.MessageBox.Show(ti3.Header.ToString());
            //    if (ti1.Header.ToString() == "40' Containers" && ti3.Header.ToString() == "In Hold")
            //    {

            //showbaywise40hold showbase3 = new showbaywise40hold();
            //showbase3.Show();

            //        closewindow();

            //    }
            //    else if (ti3.Header.ToString() == "On Deck")
            //    {
            showbaywise40deck showbaywise4 = new showbaywise40deck();
            showbaywise4.Show();
            //    }
            //}
            //catch (Exception ex)
            //{ }



            // tabControl5.SelectedIndex = 1;
        }
        //END FOR BAYWISE BUTTON 40' DECK 
        public void closewindow()
        {
            showbaywise40deck showbaywise4 = new showbaywise40deck();
            showbaywise4.Close();
        }

        private void cmbloadingdata_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (LBLBTNOKCLICK != null && LBLBTNOKCLICK.Content != "TRUE")

                {
                    //DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    //string err1="";
                    //DataSet dstable;
                    //DataTable dttable;
                    ////testing container to bay and vice versa
                    //string flip = "select weight from [40Ft_Container_Loading] where weight >0 and location='hatch'";
                    //flip += "select weight from [40Ft_Container_Loading] where weight >0 and Location ='hold'";
                    //flip += "select weight from [20Ft_Container_Loading] where weight >0 and Location ='hatch'";
                    //flip += "select weight from [20Ft_Container_Loading] where weight >0 and Location ='hold'";
                    ////flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";
                    ////flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";
                    //command12.CommandText = flip;
                    //command12.CommandType = CommandType.Text;
                    //dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);
                    //dttable = dstable.Tables[0];
                    //if (dttable.Rows.Count > 0) 
                    //{
                    //    cmbloadingdata.Items.Remove("Bay");
                    //}
                    //dttable = dstable.Tables[1];
                    //if (dttable.Rows.Count > 0)
                    //{
                    //    cmbloadingdata.Items.Remove("Bay");
                    //}
                    //dttable = dstable.Tables[2];
                    //if (dttable.Rows.Count > 0)
                    //{
                    //    cmbloadingdata.Items.Remove("Bay");
                    //}
                    //dttable = dstable.Tables[3];
                    //if (dttable.Rows.Count > 0)
                    //{
                    //    cmbloadingdata.Items.Remove("Bay");
                    //}
                    // end 
                    if (cmbloadingdata.SelectedIndex >= 0)
                    {
                        string loadingdata = cmbloadingdata.SelectedItem.ToString();
                        //try
                        //{
                        //    CmprItem = loadingdata;
                        //}
                        //catch { }

                        try
                        {
                            CmprItem = Convert.ToString(loadingdata.Split(':')[1]);
                        }
                        catch { }
                        {
                            if (CmprItem == "Container Wise" || CmprItem == " Container Wise")
                            {

                                dgContainers20FootInHold.Columns[2].Visibility = Visibility.Visible;
                                btnshow.Visibility = Visibility.Visible;
                                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                                string query = "", Err = "";
                                query = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
                                query += "update [20Ft_Container_Loading] set cmbselected=1 ";
                                //query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                                //query += "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";commented bcoz 20ft and 40ft both change same now 21feb
                                command.CommandText = query;
                                command.CommandType = CommandType.Text;
                                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                                flagnumber20inhold = 0;
                                dgContainers20FootInHold.IsReadOnly = false;
                                dgContainers20FootInHold.Columns[6].IsReadOnly = true;//vcg
                                dgContainers20FootInHold.Columns[7].IsReadOnly = true;//tcg

                                dgContainers20FootInHold.Columns[8].IsReadOnly = true;
                                Collection objCollection = new Collection();
                                objCollection.CollectionRefresh();
                                dgContainers20FootInHold.ItemsSource = null;
                                dgContainers20FootInHold.ItemsSource = objCollection.Load20InHoldBaySource;
                                dgContainers20FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                    isStackWise = false;
                                isTierWise = false;
                                if (stackGrid != null)
                                {
                                    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                }
                                dgContainers20FootInHold.Columns[3].Visibility = Visibility.Visible;

                            }
                            else if (CmprItem == " Bay")
                            {

                                //if(LBLBTNOKCLICK.Content!="TRUE")

                                //{ 
                                dgContainers20FootInHold.Columns[2].Visibility = Visibility.Hidden;
                                int i1 = 0;
                                btnshow.Visibility = Visibility.Hidden;
                                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                                string query = "", Err = "";

                                query = "update [20Ft_Showbaywise] set cmbselected=1 ";
                                query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                                query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                                //query += "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";commented for testing both bay and container 21feb23
                                //query = "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                                //query += "update [20Ft_Showbaywise] set cmbselected=1 ";
                                //query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                                command.CommandText = query;
                                command.CommandType = CommandType.Text;
                                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                                //bay wise 20
                                flagnumber20inhold = 1;


                                //dgContainers20FootInHold.IsReadOnly = true;

                                // dgContainers20FootInHold.Columns[3].Visibility = Visibility.Collapsed;

                                Collection objCollection = new Collection();
                                objCollection.CollectionRefresh();
                                dgContainers20FootInHold.ItemsSource = null;
                                // dgContainers20FootInHold.Columns[0].IsReadOnly = false;
                                //dgContainers20FootInHold.Columns[1].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[2].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[3].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[4].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[5].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[7].IsReadOnly = false;
                                dgContainers20FootInHold.Columns[8].IsReadOnly = false;
                                TabItem ti1 = tabControl5.SelectedItem as TabItem;
                                TabItem ti2 = tabControl6.SelectedItem as TabItem;
                                //System.Windows.MessageBox.Show(ti1.Header.ToString());
                                DataSet dsbay;
                                DataTable dtbay = new DataTable();
                                DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                                string Err1 = "";
                                if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
                                {
                                    string cmd = " select * from [20Ft_Showbaywise] where location='hold' ";

                                    command1.CommandText = cmd;
                                    command1.CommandType = CommandType.Text;
                                    dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                                    dtbay = dsbay.Tables[0];

                                }
                                ObservableCollection<Bays> _load20InHoldBaySourceTemp = new ObservableCollection<Bays>();

                                foreach (Bays b in objCollection.Load20InHoldBaySource)
                                {
                                    var item = _load20InHoldBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
                                    if (item == null)
                                    {   //working
                                        if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
                                        {
                                            b.LCG = Convert.ToDecimal(dtbay.Rows[i1][2]);
                                            b.VCG = Convert.ToDecimal(dtbay.Rows[i1][6]);
                                            b.TCG = Convert.ToDecimal(dtbay.Rows[i1][4]);
                                            b.Weight = Convert.ToDecimal(dtbay.Rows[i1][1]);
                                            i1++;
                                        }
                                        //b.LCG = b.Stack.Average(i => i.LCG);

                                        //b.VCG = b.Stack.Average(i => i.VCG);

                                        //b.TCG = b.Stack.Average(i => i.TCG);
                                        //b.Weight = b.Stack.Sum(i => i.Weight);

                                        _load20InHoldBaySourceTemp.Add(b);
                                    }
                                }



                                //objCollection.Load20InHoldBaySource = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
                                dgContainers20FootInHold.ItemsSource = _load20InHoldBaySourceTemp;

                                dgContainers20FootInHold.Columns[0].Visibility = Visibility.Visible;
                                isStackWise = false;
                                isTierWise = false;
                                if (stackGrid != null)
                                {
                                    stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                    stackGrid.IsReadOnly = false;
                                }
                                //DataTable dt = new DataTable();
                                //    dt = ((DataView)dgContainers20FootInHold.ItemsSource).ToTable();
                                //string GroupName = Convert.ToString((dgContainers20FootInHold.Items[2] as Bays).Group);
                                //for (int i = 0; i < dt.Rows.Count; i++)
                                //{
                                //    string GroupName = Convert.ToString((dgContainers20FootInHold.Items[i] as DataRowView)["Group"]);
                                //    string BayName = Convert.ToString((dgContainers20FootInHold.Items[i] as DataRowView)["Tank_Name"]);

                                //} 
                                //}
                            }



                            //Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                            //        btnGenerateReport.IsEnabled = false;
                            //        btnSaveLoadingCondition.IsEnabled = false;
                            //        clsGlobVar.FlagDamageCases = true;
                            //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            //        string Err = "", cmd = "";
                            //        cmd = "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=0 where [User]='dbo' and [Tank_ID] between 1 and 53";
                            //        for (int i = 0; i < 61; i++)
                            //        {
                            //            if (Convert.ToInt16(dtIntactCondition.Rows[i]["Tank_ID"]) >0)

                            //            cmd += "Update [tblSimulationMode_Tank_Status] set [Volume]=" + dtIntactCondition.Rows[i]["Volume"].ToString() + " where [User]='dbo' and [Tank_ID]=" + dtIntactCondition.Rows[i]["Tank_ID"].ToString() + " ";
                            //        }

                            //        if (CmprItem.Trim() == "Case 1(S)")
                            //        {
                            //            clsGlobVar.DamageCase = "Case 1(S)";
                            //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                            //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,17,19,21)";
                            //        }

                            //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                            //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (15,16,17,1,2) ";
                            //        }
                            //        else if (CmprItem.Trim() == "Case 10")
                            //        {
                            //            clsGlobVar.DamageCase = "Case 10";
                            //            txtLoadingConditionName.Text = clsGlobVar.DamageCase;
                            //            cmd += "Update [tblSimulationMode_Tank_Status] set [IsDamaged]=1 where [User]='dbo' and [Tank_ID] in (16,17,18,19,1,2,3,4) ";
                            //        }

                            //        command.CommandText = cmd;
                            //        command.CommandType = CommandType.Text;
                            //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            //        Models.TableModel.SimulationModeData();
                            //        dgTanks.ItemsSource = clsGlobVar.dtSimulationAllTanksForDamage.DefaultView;
                            //        clsGlobVar.FlagDamageCases = false;
                            //        Mouse.OverrideCursor = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
                Mouse.OverrideCursor = null;
            }
        }

        private void cmbloadingdatadeck20_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            { //20.11.22
                if (LBLBTNOKCLICK!=null && LBLBTNOKCLICK.Content.ToString() != "TRUE") { 
                DataTable dtable = new DataTable();
                String sCmd = "SELECT WEIGHT FROM [Saushyant_Stability].[dbo].[20Ft_Showbaywise] WHERE Weight >0";
                dtable = Models.DAL.clsDAL.GetAllRecsDT(sCmd);
                if (dtable != null)
                {
                }//work here 21.11.22

                if (cmbloadingdatadeck20.SelectedIndex >= 0)
                {
                    string loadingdata1 = cmbloadingdatadeck20.SelectedItem.ToString();
                    try {
                        CmprItem1 = Convert.ToString(loadingdata1.Split(':')[1]);
                    }
                    catch { }
                    try
                    {
                        CmprItem = loadingdata1;
                    }
                    catch { }
                    //CmprItem = Convert.ToString(loadingdata1.Split(':')[1]);
                    {
                        if (CmprItem == "Container Wise" || CmprItem1 == " Container Wise")
                        {
                            dgContainers20FootOnDeck.Columns[2].Visibility = Visibility.Visible;
                            btnshow1.Visibility = Visibility.Visible;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query1 = "", Err = "";

                            query1 = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            query1 += "update [20Ft_Container_Loading] set cmbselected=1 ";
                            //query1 += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query1 += "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            //query1 = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            //query1 += "update [20Ft_Container_Loading] set cmbselected=1 ";
                            command.CommandText = query1;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber20ondeck = 0;

                            dgContainers20FootOnDeck.IsReadOnly = false;


                            dgContainers20FootOnDeck.Columns[5].IsReadOnly = false;
                            dgContainers20FootOnDeck.Columns[6].IsReadOnly = true;
                            dgContainers20FootOnDeck.Columns[7].IsReadOnly = true;
                            dgContainers20FootOnDeck.Columns[8].IsReadOnly = true;

                            Collection objCollection = new Collection();
                            objCollection.CollectionRefresh();
                            dgContainers20FootOnDeck.ItemsSource = null;
                            dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
                            dgContainers20FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            isStackWise20OnDeck = false;
                            isTierWise20OnDeck = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            }

                            dgContainers20FootOnDeck.Columns[3].Visibility = Visibility.Visible;

                            dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
                        }




                        else if (CmprItem1 == " Bay")
                        {
                            dgContainers20FootOnDeck.Columns[2].Visibility = Visibility.Hidden;
                            //dgContainers20FootInHold.Columns[3].Visibility = Visibility.Visible;
                            int i1 = 0;
                            btnshow1.Visibility = Visibility.Hidden;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query = "", Err = "";
                            query = "update [20Ft_Showbaywise] set cmbselected=1 ";
                            query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            //query += "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";commented for testing 20 and 40 ft 21feb
                            //query = "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            //query += "update [20Ft_Showbaywise] set cmbselected=1 ";
                            command.CommandText = query;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber20ondeck = 1;
                            // dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
                            //showbaywise.IsEnabled = true;
                            dgContainers20FootOnDeck.IsReadOnly = false;
                            Collection objCollection = new Collection();
                            objCollection.CollectionRefresh();
                            dgContainers20FootOnDeck.ItemsSource = null;
                            dgContainers20FootOnDeck.Columns[3].Visibility = Visibility.Visible;
                            dgContainers20FootOnDeck.Columns[7].IsReadOnly = false;
                            dgContainers20FootOnDeck.Columns[8].IsReadOnly = false;
                            //sachin kr rahaa hai
                            ObservableCollection<Bays> _load20ondeckBaySourceTemp = new ObservableCollection<Bays>();

                            TabItem ti1 = tabControl5.SelectedItem as TabItem;
                            TabItem ti2 = tabControl6.SelectedItem as TabItem;
                            //System.Windows.MessageBox.Show(ti1.Header.ToString());
                            DataSet dsbay;
                            DataTable dtbay = new DataTable();
                            DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string Err1 = "";
                            if (ti2.Header.ToString() == "On Deck")
                            {
                                string cmd = " select * from [20Ft_Showbaywise] where location='hatch' ";

                                command1.CommandText = cmd;
                                command1.CommandType = CommandType.Text;
                                dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                                dtbay = dsbay.Tables[0];
                            }
                            try
                            {

                                //System.Windows.MessageBox.Show(ti2.Header.ToString());
                                if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
                                {
                                    string cmd = " select * from [20Ft_Showbaywise] where location='hold' ";

                                    command1.CommandText = cmd;
                                    command1.CommandType = CommandType.Text;
                                    dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                                    dtbay = dsbay.Tables[0];

                                }

                            }
                            catch { }

                            foreach (Bays b in objCollection.Load20OnDeckBaySource)
                            {
                                var item = _load20ondeckBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
                                if (item == null)
                                {

                                    //b.LCG = b.Stack.Average(i => i.LCG);
                                    if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "On Deck")
                                    {
                                        b.LCG = Convert.ToDecimal(dtbay.Rows[i1][2]);
                                        b.VCG = Convert.ToDecimal(dtbay.Rows[i1][6]);
                                        b.TCG = Convert.ToDecimal(dtbay.Rows[i1][4]);
                                        b.Weight = Convert.ToDecimal(dtbay.Rows[i1][1]);
                                        i1++;

                                    }

                                    ////b.VCG = b.Stack.Average(i => i.VCG);

                                    //b.TCG = b.Stack.Average(i => i.TCG);
                                    //b.Weight = b.Stack.Sum(i => i.Weight);

                                    _load20ondeckBaySourceTemp.Add(b);
                                }
                            }



                            //objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
                            dgContainers20FootOnDeck.ItemsSource = _load20ondeckBaySourceTemp;
                            //end





                            //dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
                            dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Visible;
                            isStackWise20OnDeck = true;
                            isTierWise20OnDeck = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                stackGrid.IsReadOnly = false;
                            }
                        }
                    }
                }
            }
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }



        }

        private void cmbloadingdatadeck40_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
                try 
            {
                if (cmbloadingdata40.SelectedIndex >= 0)
                {
                    string loadingdata2 = cmbloadingdata40.SelectedItem.ToString();
                    try 
                    {
                        CmprItem1 = Convert.ToString(loadingdata2.Split(':')[1]);
                    }
                    catch { }
                    try{
                        CmprItem = loadingdata2;
                    }
                    catch 
                    {
                    }
                    {
                        if (CmprItem == "Container Wise"|| CmprItem1== " Container Wise")
                        {
                            dgContainers40FootInHold.Columns[1].Visibility = Visibility.Visible;
                            //dgContainers40FootInHold.Columns[2].Visibility = Visibility.Hidden;
                            shwbay1.Visibility = Visibility.Visible;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query = "", Err = "";
                            query = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            query += "update [40Ft_Container_Loading] set cmbselected=1 ";
                            //query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query += "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";

                            //query = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            //query += "update [40Ft_Container_Loading] set cmbselected=1 ";
                            command.CommandText = query;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber40inhold = 0;
                            dgContainers40FootInHold.IsReadOnly = false;
                            dgContainers40FootInHold.Columns[5].IsReadOnly = true;
                            dgContainers40FootInHold.Columns[6].IsReadOnly = true;
                            dgContainers40FootInHold.Columns[7].IsReadOnly = true;


                            Collection objCollection = new Collection();
                            objCollection.CollectionRefresh();
                            dgContainers40FootInHold.ItemsSource = null;
                            dgContainers40FootInHold.ItemsSource = objCollection.Load40InHoldBaySource;
                            dgContainers40FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            isStackWise40InHold = false;
                            isTierWise40InHold = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            }
                           // dgContainers40FootInHold.Columns[3].Visibility = Visibility.Visible;

                        }
                        else if (CmprItem1 == " Bay"|| CmprItem == "Bay")
                        {   //40 inhold working
                            dgContainers40FootInHold.Columns[2].Visibility = Visibility.Visible;
                            dgContainers40FootInHold.Columns[1].Visibility = Visibility.Hidden;
                            int i1 = 0;
                            shwbay1.Visibility = Visibility.Hidden;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query = "", Err = "";

                            query = "update [40Ft_Showbaywise] set cmbselected=1 ";
                            query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            //query += "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";commented for testing both 20 & 40 ft bay

                            //query = "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            //query += "update [40Ft_Showbaywise] set cmbselected=1 ";
                            command.CommandText = query;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber40inhold = 1;
                            dgContainers40FootInHold.Columns[3].Visibility = Visibility.Collapsed;
                            //dgContainers40FootInHold.Columns[5].IsReadOnly = false;
                            dgContainers40FootInHold.Columns[6].IsReadOnly = false;
                            dgContainers40FootInHold.Columns[7].IsReadOnly = false;
                            dgContainers40FootInHold.IsReadOnly = false; //bay

                            Collection objCollection = new Collection();
                            objCollection.CollectionRefresh();
                            dgContainers40FootInHold.ItemsSource = null;
                            //sachin
                            ObservableCollection<Bays> _load40inholdBaySourceTemp = new ObservableCollection<Bays>();
                            TabItem ti1 = tabControl5.SelectedItem as TabItem;
                            TabItem ti2 = tabControl6.SelectedItem as TabItem;
                            //System.Windows.MessageBox.Show(ti1.Header.ToString());
                            DataSet dsbay;
                            DataTable dtbay = new DataTable();
                            DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string Err1 = "";
                            //if (ti2.Header.ToString() == "On Deck")
                            //{
                            //    string cmd = " select * from [40Ft_Showbaywise] where location='hatch' ";

                            //    command1.CommandText = cmd;
                            //    command1.CommandType = CommandType.Text;
                            //    dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                            //    dtbay = dsbay.Tables[0];
                            //}
                            //if (ti2.Header.ToString() == "In Hold")
                            //{
                                string cmd = " select * from [40Ft_Showbaywise] where location='hold' ";

                                command1.CommandText = cmd;
                                command1.CommandType = CommandType.Text;
                                dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                                dtbay = dsbay.Tables[0];
                            //}

                            foreach (Bays b in objCollection.Load40InHoldBaySource)
                            {
                                var item = _load40inholdBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
                                if (item == null)
                                {
                                    
                                    //if (ti1.Header.ToString() == "40' Containers" && ti2.Header.ToString() == "In Hold")
                                    //{
                                        b.LCG = Convert.ToDecimal(dtbay.Rows[i1][2]);
                                        b.VCG = Convert.ToDecimal(dtbay.Rows[i1][6]);
                                        b.TCG = Convert.ToDecimal(dtbay.Rows[i1][4]);
                                        b.Weight = Convert.ToDecimal(dtbay.Rows[i1][1]);
                                        i1++;

                                    //}
                                    //b.LCG = b.Stack.Average(i => i.LCG);

                                    //b.VCG = b.Stack.Average(i => i.VCG);

                                    //b.TCG = b.Stack.Average(i => i.TCG);
                                    //b.Weight = b.Stack.Sum(i => i.Weight);

                                    _load40inholdBaySourceTemp.Add(b);
                                }
                            }



                            //objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
                            dgContainers40FootInHold.ItemsSource = _load40inholdBaySourceTemp;
                            //end
                            // /*dgContainers40FootInHold*/.ItemsSource = objCollection.Load40InHoldBaySource;
                            //dgContainers40FootInHold.Columns[0].Visibility = Visibility.Visible;
                            isStackWise40InHold = true;
                            isTierWise40InHold = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                stackGrid.IsReadOnly = false;
                            }
                        }

                        }
                }


                        }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }

        }

        private void cmbloadingdatadeck40deck_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (cmbloadingdata40deck.SelectedIndex >= 0)
                {
                    string loadingdata1 = cmbloadingdata40deck.SelectedItem.ToString();
                    try 
                    {
                        CmprItem1 = Convert.ToString(loadingdata1.Split(':')[1]);
                    }
                    catch { }
                    try
                    {
                        CmprItem = loadingdata1;
                    }
                    catch { }
                    {
                        if (CmprItem1 == " Container Wise"|| CmprItem == "Container Wise")
                        {
                            shwbay.Visibility = Visibility.Visible;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query = "", Err = "";

                            query = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            query += "update [40Ft_Container_Loading] set cmbselected=1 ";
                            //query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query += "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";

                            //query = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                            //query += "update [40Ft_Container_Loading] set cmbselected=1 ";
                            command.CommandText = query;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber40ondeck = 0;
                            dgContainers40FootOnDeck.IsReadOnly = false;
                            dgContainers40FootOnDeck.Columns[6].IsReadOnly = true;
                            dgContainers40FootOnDeck.Columns[7].IsReadOnly = true;
                            dgContainers40FootOnDeck.Columns[8].IsReadOnly = true;
                            Collection objCollection = new Collection();
                            objCollection.CollectionRefresh();
                            dgContainers40FootOnDeck.ItemsSource = null;
                            dgContainers40FootOnDeck.ItemsSource = objCollection.Load40OnDeckBaySource;
                            dgContainers40FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            isStackWise40OnDeck = false;
                            isTierWise40OnDeck = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                            }

                            dgContainers40FootOnDeck.Columns[3].Visibility = Visibility.Visible;
                           
                            dgContainers40FootOnDeck.Columns[2].Visibility = Visibility.Visible;

                        }
                        else if (CmprItem == "Bay"|| CmprItem1== " Bay")
                        {
                            int i1 = 0;
                            shwbay.Visibility = Visibility.Hidden;
                            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string query = "", Err = "";
                            query = "update [40Ft_Showbaywise] set cmbselected=1 ";
                            query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
                           // query += "update [20Ft_Showbaywise]  set weight=0,cmbselected=0 "; commented for testing 20 and 40 ft 21feb
                            //query = "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";
                            //query += "update [40Ft_Showbaywise] set cmbselected=1 ";
                            command.CommandText = query;
                            command.CommandType = CommandType.Text;
                            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                            flagnumber40ondeck = 1;
                            dgContainers40FootOnDeck.IsReadOnly = false;
                            dgContainers40FootOnDeck.Columns[3].Visibility = Visibility.Visible;
                            dgContainers40FootOnDeck.Columns[8].IsReadOnly = false;
                            dgContainers40FootOnDeck.Columns[7].IsReadOnly = false;
                            Collection objCollection = new Collection();
                            objCollection.CollectionRefreshBAY();
                            dgContainers40FootOnDeck.ItemsSource = null;
                            //sachin
                            ObservableCollection<Bays> _load40ondeckBaySourceTemp = new ObservableCollection<Bays>();
                            TabItem ti1 = tabControl5.SelectedItem as TabItem;
                            TabItem ti2 = tabControl6.SelectedItem as TabItem;
                            //System.Windows.MessageBox.Show(ti1.Header.ToString());
                            DataSet dsbay;
                            DataTable dtbay = new DataTable();
                            DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                            string Err1 = "";
                                string cmd = " select * from [40Ft_Showbaywise] where location='hatch' ";

                                command1.CommandText = cmd;
                                command1.CommandType = CommandType.Text;
                                dsbay = Models.DAL.clsDBUtilityMethods.GetDataSet(command1, Err1);
                                dtbay = dsbay.Tables[0];
                                foreach (Bays b in objCollection.Load40OnDeckBaySource)
                            {
                                var item = _load40ondeckBaySourceTemp.FirstOrDefault(i => i.Bay == b.Bay);
                                if (item == null)
                                {
                                    //if (ti1.Header.ToString() == "40' Containers" && ti2.Header.ToString() == "On Deck")
                                    //{
                                        b.LCG = Convert.ToDecimal(dtbay.Rows[i1][2]);
                                        b.VCG = Convert.ToDecimal(dtbay.Rows[i1][6]);
                                        b.TCG = Convert.ToDecimal(dtbay.Rows[i1][4]);
                                        b.Weight = Convert.ToDecimal(dtbay.Rows[i1][1]);
                                        i1++;

                                    //}
                                    //b.LCG = b.Stack.Average(i => i.LCG);

                                    //b.VCG = b.Stack.Average(i => i.VCG);

                                    //b.TCG = b.Stack.Average(i => i.TCG);
                                    //b.Weight = b.Stack.Sum(i => i.Weight);

                                    _load40ondeckBaySourceTemp.Add(b);
                                }
                            }



                            //objCollection.dgContainers20FootOnDeck = new ObservableCollection<Bays>(Load20InHoldBaySource.Distinct());
                            dgContainers40FootOnDeck.ItemsSource = _load40ondeckBaySourceTemp;
                            //end



                            //dgContainers40FootOnDeck.ItemsSource = objCollection.Load40OnDeckBaySource;
                            dgContainers40FootOnDeck.Columns[0].Visibility = Visibility.Hidden;
                            dgContainers40FootOnDeck.Columns[2].Visibility = Visibility.Hidden;
                            isStackWise40OnDeck = true;
                            isStackWise40OnDeck = true;
                            isTierWise40OnDeck = false;
                            if (stackGrid != null)
                            {
                                stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                                stackGrid.IsReadOnly = false;
                            }
                        }
                    }
                }
            }
            catch
            { }

        }

        private void btnadd_clk(object sender, RoutedEventArgs e)
        {
            try
            {
                if ((System.Windows.MessageBox.Show("Are you sure you want to add new Variable Item?", "Please confirm.", MessageBoxButton.YesNo) == MessageBoxResult.Yes))
                {
                    string Err = "", query = "";
                    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    query = "SELECT MAX(TANK_ID) FROM tblMaster_Tank";
                    command.CommandText = query;
                    command.CommandType = CommandType.Text;
                    MaxTankId = Convert.ToInt32(Models.DAL.clsDBUtilityMethods.ExecuteScalar(command, Err));
                    MaxTankId = MaxTankId + 1;
                    string query1 = "";
                    string Err1 = "";
                    DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    query1 = "INSERT INTO [tblMaster_Tank] ([Tank_ID],[Group],[Tank_Name])  VALUES (" + MaxTankId + ",'FIXED_WEIGHT','FIXED WEIGHT')";
                    //query1 += @"INSERT INTO tblFixedLoad_Simulation ([tank_Id],[Load_Name],[Weight],[LCG],[TCG],[VCG],[Length],[Breadth],[Depth])
                    //                                          VALUES (" + MaxTankId + ",'FixedWeight',0,0,0,0,0,0,0)";
                    query1 += @"INSERT INTO tblFixedLoad_Simulation ([tank_Id],[Load_Name],[Weight],[LCG],[TCG],[VCG],[Length],[Breadth],[Depth])
                                                              VALUES (" + MaxTankId + ",'FIXED WEIGHT',0,0,0,0,0,0,0)";
                    query1 += "INSERT INTO [tblSimulationMode_Tank_Status] ([Tank_ID],[Volume],[SG],[Timestamp],[User],[Weight],[IsDamaged])" +
                                      "VALUES (" + MaxTankId + ",0,1,GETDATE(),'dbo',0,0)";
                    query1 += "insert into [tblFSM_max_act]([Tank_ID],[max_1_act_0])" +
                        "values("+MaxTankId+",0)";
                    query1 += "INSERT INTO [tblSimulationMode_Loading_Condition] ([Tank_ID],[Percent_Full],[Volume],[SG],[Weight],[LCG],[Lmom],[TCG]," +
                         " [Tmom],[VCG],[Vmom],[FSM],[User],[IsManualEntry],[Sounding_Level],[Timestamp],[Permeability],[IsDamaged])" +

                         "VALUES (" + MaxTankId + ",0,0,1,0,0,0,0,0,0,0,0,'dbo',1,0,GETDATE(),1,0)";
                    command1.CommandText = query1;
                    command1.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command1, Err1);
                    Models.clsGlobVar.dtSimulationAllTanks = Models.BLL.clsBLL.GetEnttyDBRecs("vstank");
                    //Models.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
                    dgTanks.ItemsSource = Models.clsGlobVar.dtSimulationAllTanks.DefaultView;
                    DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    DataSet dstable; string err1 = "";
                    //testing container to bay and vice versa
                    //commented for testing
                    //string scmd = "select * from tblFixedLoad_Simulation";

                    ////flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";
                    ////flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";
                    //command12.CommandText = scmd;
                    //command12.CommandType = CommandType.Text;
                    //dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);
                    //DataTable dttable1 = new DataTable();
                    //dttable1 = dstable.Tables[0];

                    //dgVariableItems.ItemsSource = dttable1.DefaultView;
                    //  End
                    //Models.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView;
                    //dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    Models.clsGlobVar.dtSimulationfixedload = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModefixedload");
                    dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                }

            }
            catch
            {
            }
        }

        private void btnremove_clk(object sender, RoutedEventArgs e)
        {
            try
            {
                //if (Models.clsGlobVar.dtSimulationVariableItems.Rows.Count > 1)
                //{
                    if ((System.Windows.MessageBox.Show("Are you sure, you want to delete selected Variable Item?", "Please confirm.", MessageBoxButton.YesNo) == MessageBoxResult.Yes))
                    {
                        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                        string Err = "";
                        int tank_id;
                        DataRowView row = dgTanks.SelectedItem as DataRowView;
                    tank_id = Convert.ToInt16((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["tank_id"]);
                    if (tank_id != 47)
                    {
                        //tank_id = Convert.ToInt16(row.Row[0]);
                        //tank_id = Convert.ToInt16((DataRowView)dgVariableItems.SelectedItems[1]);
                        //tank_id = Convert.ToInt16(((dgVariableItems).Items[indexvar] as DataRowView)["tankloadid"]);
                        //string query = @"DELETE FROM tblFixedLoad_Simulation
                        //            WHERE tank_id=" + tank_id;
                        //if (Convert.ToInt16(+tank_id) > 47)
                        //{
                        //string query = "DELETE FROM  [tblMaster_Tank] WHERE [Tank_ID] in (select top(1) [Tank_ID]   from tblMaster_Tank WHERE [GROUP]='FIXED_WEIGHT' order by Tank_ID desc) ";
                        string query = "DELETE FROM  [tblMaster_Tank] WHERE [Tank_ID] =" + tank_id;
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

                        // string query1 = " DELETE FROM  [tblSimulationMode_Loading_Condition] WHERE [Tank_ID] in  (select top(1) [Tank_ID]   from tblSimulationMode_Loading_Condition WHERE [GROUP]='FIXED_WEIGHT' order by Tank_ID desc)";
                        string query1 = " DELETE FROM  [tblSimulationMode_Loading_Condition] WHERE [Tank_ID]=" + tank_id;
                        //query1 += " DELETE FROM  [tblSimulationMode_Tank_Status] WHERE [Tank_ID] in  (select top(1) [Tank_ID]   from tblSimulationMode_Tank_Status WHERE [GROUP]='FIXED_WEIGHT' order by Tank_ID desc)";
                        query1 += " DELETE FROM  [tblSimulationMode_Tank_Status] WHERE [Tank_ID]=" + tank_id;
                        //query1 += @" delete from  tblFixedLoad_Simulation where load_id in (select  top 1 (load_id) from tblFixedLoad_Simulation WHERE [GROUP]='FIXED_WEIGHT' order by load_id desc)";
                        query1 += @" delete from  tblFixedLoad_Simulation where Tank_ID=" + tank_id;
                        DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                        command1.CommandText = query1;
                        command1.CommandType = CommandType.Text;
                        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command1, Err);
                        //Models.clsGlobVar.dtSimulationAllTanks = Models.BLL.clsBLL.GetEnttyDBRecs("vstank");
                        //dgTanks.ItemsSource = Models.clsGlobVar.dtSimulationAllTanks.DefaultView;
                        //Models.BO.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
                        //string query2 = "delete from tempfixed WHERE tank_id=" + tank_id;
                        //DbCommand command2 = Models.DAL.clsDBUtilityMethods.GetCommand();
                        //command2.CommandText = query2;
                        //command2.CommandType = CommandType.Text;
                        //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command2, Err);
                        //24.11.22 commneted 
                        //DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                        //DataSet dstable; string err1 = "";
                        ////testing container to bay and vice versa
                        //string scmd = "select * from tblFixedLoad_Simulation";

                        ////flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";
                        ////flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";
                        //command12.CommandText = scmd;
                        //command12.CommandType = CommandType.Text;
                        //dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);
                        //DataTable dttable1 = new DataTable();
                        //dttable1 = dstable.Tables[0];

                        //dgVariableItems.ItemsSource = dttable1.DefaultView;
                        //end 
                        Models.clsGlobVar.dtSimulationfixedload = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModefixedload");
                        dgVariableItems.ItemsSource = Models.clsGlobVar.dtSimulationfixedload.DefaultView;
                    }
                    else 
                    {
                     // System.Windows.MessageBox.Show("Cannot Delete DWT CONSTANT");
                    }
                }
                    //}
                //}
                else
                {
                    System.Windows.MessageBox.Show("There should be atleast one row in the table");
                }
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.ToString());
            }
        }

        private void TabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                
                DbCommand command12 = Models.DAL.clsDBUtilityMethods.GetCommand();
                DataSet dstable; string err1 = ""; DataTable dttable;
                //testing container to bay and vice versa
                string flip = "select weight from [40Ft_Container_Loading] where weight >0 and location='hatch'";
                flip += "select weight from [40Ft_Container_Loading] where weight >0 and Location ='hold'";
                flip += "select weight from [20Ft_Container_Loading] where weight >0 and Location ='hatch'";
                flip += "select weight from [20Ft_Container_Loading] where weight >0 and Location ='hold'";
                //flip += "select weight from [20Ft_Showbaywise] where weight >0 and Location ='hatch'";
                //flip += "select weight from [40Ft_Showbaywise] where weight >0 and Location ='hatch'";
                command12.CommandText = flip;
                command12.CommandType = CommandType.Text;
                dstable = Models.DAL.clsDBUtilityMethods.GetDataSet(command12, err1);
                dttable = dstable.Tables[0];
                if (dttable.Rows.Count > 0)
                {
                    datagriddata();
                    //cmbloadingdata.Items.RemoveAt(0);
                    //if (!cmbloadingdata.Items.Contains("Container Wise"))
                    //{
                    //    cmbloadingdata.Items.Add("Container Wise");
                    //}
                    //cmbloadingdatadeck20.Items.RemoveAt(0);
                    //if (!cmbloadingdatadeck20.Items.Contains("Container Wise"))
                    //{
                    //    cmbloadingdatadeck20.Items.Add("Container Wise");
                    //}
                    //cmbloadingdata40.Items.RemoveAt(0); //40 inhold 
                    //if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //{
                    //    cmbloadingdata40.Items.Add("Container Wise");
                    //}
                    //cmbloadingdata40deck.Items.RemoveAt(0); //40 on deck 
                    //if (!cmbloadingdata40deck.Items.Contains("Container Wise"))
                    //{
                    //    cmbloadingdata40deck.Items.Add("Container Wise");
                    //}
                }
                dttable = dstable.Tables[1];
                if (dttable.Rows.Count > 0)
                {
                    //try
                    //{
                    //    cmbloadingdata.Items.RemoveAt(0);
                    //    if (!cmbloadingdata.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdatadeck20.Items.RemoveAt(0);
                    //    if (!cmbloadingdatadeck20.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdatadeck20.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40.Items.RemoveAt(0); //20 deck hatch
                    //    if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40.Items.RemoveAt(0); //40 inhold
                    //    if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40deck.Items.RemoveAt(0); //40 on deck 
                    //    if (!cmbloadingdata40deck.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40deck.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                }
                dttable = dstable.Tables[2];
                if (dttable.Rows.Count > 0)
                {
                    //try
                    //{
                    //    cmbloadingdata.Items.RemoveAt(0);
                    //    if (!cmbloadingdata.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdatadeck20.Items.RemoveAt(0);
                    //    if (!cmbloadingdatadeck20.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdatadeck20.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40.Items.RemoveAt(0); //20 deck hatch
                    //    if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40.Items.RemoveAt(0); //40 inhold
                    //    if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                    //try
                    //{
                    //    cmbloadingdata40deck.Items.RemoveAt(0); //40 on deck 
                    //    if (!cmbloadingdata40deck.Items.Contains("Container Wise"))
                    //    {
                    //        cmbloadingdata40deck.Items.Add("Container Wise");
                    //    }
                    //}
                    //catch { }
                }
                dttable = dstable.Tables[3];
                if (dttable.Rows.Count > 0)
                {
                    try
                    {
                        datagriddata();
                        //cmbloadingdata.Items.RemoveAt(0);
                        ////cmbloadingdata.Items.Remove("Bay");
                        ////cmbloadingdata.Items.Add("Container Wise");
                        //if (!cmbloadingdata.Items.Contains("Container Wise"))
                        //{
                        //    cmbloadingdata.Items.Add("Container Wise");
                        //}
                    }
                    catch { }
                    //try
                    //{
                    //    //cmbloadingdatadeck20.Items.RemoveAt(0); //20 deck hatch
                    //    //if (!cmbloadingdatadeck20.Items.Contains("Container Wise"))
                    //    //{
                    //    //    cmbloadingdatadeck20.Items.Add("Container Wise");
                    //    //}
                    //}
                    //catch { }
                    //try
                    //{
                    //    //cmbloadingdata40.Items.RemoveAt(0); //20 deck hatch
                    //    //if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    //{
                    //    //    cmbloadingdata40.Items.Add("Container Wise");
                    //    //}
                    //}
                    //catch { }
                    //try
                    //{
                    //    //cmbloadingdata40.Items.RemoveAt(0); //40 inhold
                    //    //if (!cmbloadingdata40.Items.Contains("Container Wise"))
                    //    //{
                    //    //    cmbloadingdata40.Items.Add("Container Wise");
                    //    //}
                    //}
                    //catch { }
                    //try
                    //{
                    //    //cmbloadingdata40deck.Items.RemoveAt(0); //40 on deck 
                    //    //if (!cmbloadingdata40deck.Items.Contains("Container Wise"))
                    //    //{
                    //    //    cmbloadingdata40deck.Items.Add("Container Wise");
                    //    //}
                    //}
                    //catch { }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.ToString());
            }
        }
        private void datagriddata()
        {
            TabItem ti1 = tabControl5.SelectedItem as TabItem;
            TabItem ti2 = tabControl6.SelectedItem as TabItem;
            //System.Windows.MessageBox.Show(ti1.Header.ToString());
            try
            {
                if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "In Hold")
                {
                    //20 inhold
                    // btnshow.Visibility = Visibility.Visible;
                    DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string query = "", Err = "";
                    query = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
                    query += "update [20Ft_Container_Loading] set cmbselected=1 ";
                    command.CommandText = query;
                    command.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                    flagnumber20inhold = 0;
                    dgContainers20FootInHold.IsReadOnly = false;
                    dgContainers20FootInHold.Columns[6].IsReadOnly = true;//vcg
                    dgContainers20FootInHold.Columns[7].IsReadOnly = true;//tcg


                    Collection objCollection1 = new Collection();
                    objCollection1.CollectionRefresh();
                    dgContainers20FootInHold.ItemsSource = null;
                    dgContainers20FootInHold.ItemsSource = objCollection1.Load20InHoldBaySource;
                    dgContainers20FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    isStackWise = false;
                    isTierWise = false;
                    if (stackGrid != null)
                    {
                        stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    }
                    dgContainers20FootInHold.Columns[3].Visibility = Visibility.Visible;
                }
            }
            catch
            { }
            //onhold 20
            //btnshow1.Visibility = Visibility.Visible;
            try
            {
                if (ti1.Header.ToString() == "20' Containers" && ti2.Header.ToString() == "On Deck")
                {
                    DbCommand command1 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string query1 = "", Err1 = "";
                    query1 = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
                    query1 += "update [20Ft_Container_Loading] set cmbselected=1 ";
                    command1.CommandText = query1;
                    command1.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command1, Err1);
                    flagnumber20ondeck = 0;

                    dgContainers20FootOnDeck.IsReadOnly = false;


                    dgContainers20FootOnDeck.Columns[5].IsReadOnly = true;
                    dgContainers20FootOnDeck.Columns[6].IsReadOnly = true;
                    dgContainers20FootOnDeck.Columns[7].IsReadOnly = true;

                    Collection objCollection = new Collection();
                    objCollection.CollectionRefresh();
                    dgContainers20FootOnDeck.ItemsSource = null;
                    dgContainers20FootOnDeck.ItemsSource = objCollection.Load20OnDeckBaySource;
                    dgContainers20FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    isStackWise20OnDeck = false;
                    isTierWise20OnDeck = false;
                    if (stackGrid != null)
                    {
                        stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    }

                    dgContainers20FootOnDeck.Columns[3].Visibility = Visibility.Visible;

                    dgContainers20FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
                }
            }
            catch { }
            //end ondeck 20
            //40 hold
            try
            {
                if (ti1.Header.ToString() == "200' Containers" && ti2.Header.ToString() == "In Hold")
                {
                    //shwbay1.Visibility = Visibility.Visible;
                    DbCommand command2 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string query2 = "", Err2 = "";
                    query2 = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                    query2 += "update [40Ft_Container_Loading] set cmbselected=1 ";
                    command2.CommandText = query2;
                    command2.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command2, Err2);
                    flagnumber40inhold = 0;
                    dgContainers40FootInHold.IsReadOnly = false;
                    dgContainers40FootInHold.Columns[5].IsReadOnly = true;
                    dgContainers40FootInHold.Columns[7].IsReadOnly = true;

                    Collection objCollection2 = new Collection();
                    objCollection2.CollectionRefresh();
                    dgContainers40FootInHold.ItemsSource = null;
                    dgContainers40FootInHold.ItemsSource = objCollection2.Load40InHoldBaySource;
                    dgContainers40FootInHold.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    isStackWise40InHold = false;
                    isTierWise40InHold = false;
                    if (stackGrid != null)
                    {
                        stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    }
                    dgContainers40FootInHold.Columns[3].Visibility = Visibility.Visible;
                }
            }
            catch(Exception ex) 
            {
               // System.Windows.MessageBox.Show(ex.ToString());
            }
            //end hold 40
            //ondeck 40
            //shwbay.Visibility = Visibility.Visible;
            try
            {
                if (ti1.Header.ToString() == "200' Containers" && ti2.Header.ToString() == "In Hold")
                {
                    DbCommand command3 = Models.DAL.clsDBUtilityMethods.GetCommand();
                    string query3 = "", Err3 = "";
                    query3 = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";
                    query3 += "update [40Ft_Container_Loading] set cmbselected=1 ";
                    command3.CommandText = query3;
                    command3.CommandType = CommandType.Text;
                    Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command3, Err3);
                    flagnumber40ondeck = 0;
                    dgContainers40FootOnDeck.IsReadOnly = false;
                    dgContainers40FootOnDeck.Columns[6].IsReadOnly = true;
                    dgContainers40FootOnDeck.Columns[7].IsReadOnly = true;
                    Collection objCollection3 = new Collection();
                    objCollection3.CollectionRefresh();
                    dgContainers40FootOnDeck.ItemsSource = null;
                    dgContainers40FootOnDeck.ItemsSource = objCollection3.Load40OnDeckBaySource;
                    dgContainers40FootOnDeck.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    isStackWise40OnDeck = false;
                    isTierWise40OnDeck = false;
                    if (stackGrid != null)
                    {
                        stackGrid.RowDetailsVisibilityMode = DataGridRowDetailsVisibilityMode.Collapsed;
                    }

                    dgContainers40FootOnDeck.Columns[0].Visibility = Visibility.Collapsed;
                }
            }
            catch { }
        }



        //private void dgVariableItems_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{

        //}

        //private void dgVariableItems_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        //{

        //}    

        private void dgVariableItems_CurrentCellChanged(object sender, EventArgs e)
        {

            try
            {
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                string Err = "";
                int TankId;
                decimal weight, vcg, lcg, tcg, fsm;
                TankId = Convert.ToInt16((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["tank_id"]);
                //TankId = Convert.ToInt16((dgVariableItems.Items[index] as DataRowView)["tank_id"]);
                weight = Convert.ToDecimal((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["Weight"]);
                vcg = Convert.ToDecimal((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["VCG"]);
                lcg = Convert.ToDecimal((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["LCG"]);
                tcg = Convert.ToDecimal((dgVariableItems.Items[dgVariableItems.SelectedIndex] as DataRowView)["TCG"]);
                //fsm = Convert.ToDecimal((dgVariableItems.Items[index] as DataRowView)["FSM"]);

                string query = "update tblSimulationMode_Tank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
                query += " update tblSimulationMode_Loading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
                query += " update tblSimulationMode_Loading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
                query += " update tblSimulationMode_Loading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
                query += " update tblSimulationMode_Loading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
                query += " update tblFixedLoad_Simulation set [Weight]=" + weight + " where Tank_ID=" + TankId;
                query += " update tblFixedLoad_Simulation set VCG=" + vcg + " where Tank_ID=" + TankId;
                query += " update tblFixedLoad_Simulation set LCG=" + lcg + " where Tank_ID=" + TankId;
                query += " update tblFixedLoad_Simulation set TCG=" + tcg + " where Tank_ID=" + TankId;
                //query += " update tblSimulationMode_Loading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
                //query += " update tblTank_Status set [Weight]=" + weight + " where Tank_ID=" + TankId + " ";
                //query += " update  tblLoading_Condition set [Weight]=" + weight + " where Tank_ID=" + TankId;
                //query += " update  tblLoading_Condition set VCG=" + vcg + " where Tank_ID=" + TankId;
                //query += " update tblLoading_Condition set LCG=" + lcg + " where Tank_ID=" + TankId;
                //query += " update tblLoading_Condition set TCG=" + tcg + " where Tank_ID=" + TankId;
                //query += " update tblLoading_Condition set FSM=" + fsm + " where Tank_ID=" + TankId;
                command.CommandText = query;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show(ex.ToString());
            }
        }

        private void dgVariableItems_LoadingRow(object sender, DataGridRowEventArgs e)
        {

        }

        private void dgVariableItems_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {

        }

        private void dgTankCompartment_PreparingCellForEdit(object sender, DataGridPreparingCellForEditEventArgs e)
        {

        }

        private void dgVariableItems_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void dgVariableItems_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void Containers20_gotfocus(object sender, RoutedEventArgs e)
        {
            //DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
            //string query = "", Err = "";
            //query = "update [40Ft_Showbaywise] set weight=0,cmbselected=0 ";          
            //query += "update [40Ft_Container_Loading] set weight=0,cmbselected=0 ";             
            //command.CommandText = query;
            //command.CommandType = CommandType.Text;
            //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);

           
        }

        //private void Containers40_gotfocus(object sender, RoutedEventArgs e)
        //{
        //    //DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //    //string query = "", Err = "";
        //    //query = "update [20Ft_Showbaywise] set weight=0,cmbselected=0 ";
        //    //query += "update [20Ft_Container_Loading] set weight=0,cmbselected=0 ";
        //    //command.CommandText = query;
        //    //command.CommandType = CommandType.Text;
        //    //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
           
        //}

        private void Containers20hold_gotfocus(object sender, RoutedEventArgs e)
        {
            //if (cmbloadingdatadeck20.SelectedIndex==1) 
            //{
            //    cmbloadingdata.SelectedIndex = 1;   
            //}
            
        }

        private void BaplieFiles_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                Microsoft.Win32.OpenFileDialog objFileDialog = new Microsoft.Win32.OpenFileDialog();
                objFileDialog.Title = "View Baplie File";
                objFileDialog.Filter = "Baplie files(*.edi)|*.edi|All files (*.*)|*.*";
                objFileDialog.InitialDirectory = System.IO.Directory.GetCurrentDirectory();
                string[] containerID = new string[3000];
                string[] container_ID = new string[3000];

                string[] Bay = new string[3000];
                string[] Stack = new string[3000];
                string[] Tier = new string[3000];

                string[] weightID = new string[3000];
                string[] weight_ID = new string[3000];

                string[] containerType = new string[3000];
                string[] container_Type = new string[3000];

                if (objFileDialog.ShowDialog() == true)
                {
                    string Err = "";
                    //string query = "update [tblMaster_Tier] set [Weight]=0,[Container_Count]=0,[Flag]='False'";
                    //DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                    //command.CommandText = query;
                    //command.CommandType = CommandType.Text;
                    //Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
                    DataTable dtLoading = new DataTable();
                    dtLoading.Columns.Add("ContainerID");
                    //dtLoading.Columns.Add("Bay");
                    //dtLoading.Columns.Add("Stack");
                    //dtLoading.Columns.Add("Tier");
                    dtLoading.Columns.Add("Weight", typeof(decimal));
                    //dtLoading.Columns.Add("ContainerType");

                    string filename = objFileDialog.FileName;

                    string[] filelines = File.ReadAllLines(filename);
                    int i = 0;

                    foreach (string textline in filelines)
                    {
                        string Line = textline.Replace("'", "_");
                        string[] separateLines = Line.Split('_');
                        foreach (string eachLine in separateLines)
                        {
                            string[] eachCode = eachLine.Split('+');
                            if (eachCode[0] == "LOC" && eachCode[1] == "147")
                            {
                                containerID[i] = eachCode[2];
                                string[] containerString = containerID[i].Split(':');
                                container_ID[i] = containerString[0];
                                //Stack[i] = container_ID[i].Substring(3, 2);
                                //Tier[i] = container_ID[i].Substring(5, 2);
                                //if (Convert.ToInt32(Tier[i]) <= 10)
                                //{
                                //    Bay[i] = container_ID[i].Substring(1, 2); //+ " BAY IN HOLD";
                                //}
                                //else
                                //{
                                //    Bay[i] = container_ID[i].Substring(1, 2); //+ " BAY ON DECK";
                                //}

                            }
                            if (eachCode[0] == "MEA" && eachCode[1] == "WT")
                            {
                                weightID[i] = eachCode[3];
                                string[] weightString = weightID[i].Split(':');
                                weight_ID[i] = weightString[1].Replace("'", "");
                            }
                            if (eachCode[0] == "EQD" && eachCode[1] == "CN")
                            {
                                //containerType[i] = eachCode[3];
                                DataRow row = dtLoading.NewRow();
                                row[0] = container_ID[i];
                                //row[1] = Bay[i];
                                //row[2] = Stack[i];
                                //row[3] = Tier[i];
                                row[1] = Math.Round(Convert.ToDecimal(weight_ID[i]) / 1000, 3);
                                //row[5] = containerType[i];
                                dtLoading.Rows.Add(row);
                                i++;

                            }
                        }

                    }
                    BaplieContents objBaplieWindow = new BaplieContents(dtLoading);
                    objBaplieWindow.Show();

                }
                Mouse.OverrideCursor = null;
            }
            catch
            {
                Mouse.OverrideCursor = null;
            }
        }

        private void dgStack40OnDeck_LoadingRowDetails(object sender, DataGridRowDetailsEventArgs e)
        {

        }

        private void dgBale_LoadingRow(object sender, DataGridRowEventArgs e)
        {

        }

        private void dgTanks_Loaded(object sender, RoutedEventArgs e)
        {

        }

        //private void btnadd_Click(object sender, RoutedEventArgs e)    commnetd by sachin for contaier             
        //{
        //    try
        //    {
        //        if ((System.Windows.MessageBox.Show("Are you sure you want to add new Variable Item?", "Please confirm.", MessageBoxButton.YesNo) == MessageBoxResult.Yes))
        //    {
        //        DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //        string Err = "", query="";

        //        query = "SELECT MAX(TANK_ID) FROM tblMaster_Tank";
        //        command.CommandText = query;
        //        command.CommandType = CommandType.Text;
        //        MaxTankId=Convert.ToInt32(Models.DAL.clsDBUtilityMethods.ExecuteScalar(command, Err));
        //        MaxTankId = MaxTankId + 1;
        //        query = "";
        //        Err = "";
        //        query = "INSERT INTO [tblMaster_Tank] ([Tank_ID],[Group],[Tank_Name])  VALUES (" + MaxTankId + ",'FIXED_WEIGHT','FixedWeight')";

        //        query += "INSERT INTO [tblSimulationMode_Loading_Condition] ([Tank_ID],[Percent_Full],[Volume],[SG],[Weight],[LCG],[Lmom],[TCG]," +
        //                 " [Tmom],[VCG],[Vmom],[FSM],[User],[IsManualEntry],[Sounding_Level],[Timestamp],[Permeability],[IsDamaged])" +
        //                 "VALUES (" + MaxTankId + ",0,0,1,0,0,0,0,0,0,0,0,'dbo',1,0,GETDATE(),1,0)";

        //        query += "INSERT INTO [tblSimulationMode_Tank_Status] ([Tank_ID],[Volume],[SG],[IsDamaged],[Timestamp],[Sounding_Level],[User],[Weight])" +
        //                              "VALUES (" + MaxTankId + ",0,1,0,GETDATE(),0,'dbo',0)";

        //        query += "INSERT INTO [tblLoading_Condition] ([Tank_ID],[Percent_Full],[Volume],[SG],[Weight],[LCG],[Lmom],[TCG]," +
        //           " [Tmom],[VCG],[Vmom],[FSM],[User],[IsManualEntry],[Sounding_Level],[Timestamp],[Permeability],[IsDamaged])" +
        //           "VALUES (" + MaxTankId + ",0,0,1,0,0,0,0,0,0,0,0,'dbo',1,0,GETDATE(),1,0)";

        //        query += "INSERT INTO [tblTank_Status] ([Tank_ID],[Volume],[SG],[IsDamaged],[Timestamp],[Sounding_Level],[User],[Weight])" +
        //                              "VALUES (" + MaxTankId + ",0,1,0,GETDATE(),0,'dbo',0)";
        //        command.CommandText = query;
        //        command.CommandType = CommandType.Text;
        //        Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        //        Models.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
        //        //dgFixedLoad.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView; commnetd by sachin for contaier



        //    }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //}

        //private void btnremove_Click(object sender, RoutedEventArgs e)    commnetd by sachin for contaier             
        //{
        //    try
        //    {
        //        if (dgFixedLoad.SelectedIndex < 0 || dgFixedLoad.SelectedIndex == 0)
        //        {
        //            System.Windows.MessageBox.Show("Select the row ");
        //            return;
        //        }
        //        //if (Models.clsGlobVar.dtSimulationVariableItems.Rows.Count > 1)
        //        //{
        //        if ((System.Windows.MessageBox.Show("Are you sure, you want to delete selected Variable Item?", "Please confirm.", MessageBoxButton.YesNo) == MessageBoxResult.Yes))
        //        {
        //            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
        //            string Err = "", query = "";
        //            int TankId;

        //            var selected = dgFixedLoad.SelectedItem as DataRowView;
        //            TankId = Convert.ToInt16(selected["Tank_Id"].ToString());
        //            //  TankId = Convert.ToInt16(((dgFixedLoad).Items[index] as DataRowView)["Tank_Id"]);

        //            if (TankId == 55)
        //            {
        //                return;
        //            }

        //            query = "DELETE FROM  [tblMaster_Tank] WHERE [Tank_ID]=" + TankId + "";

        //            query += "DELETE FROM  [tblSimulationMode_Loading_Condition] WHERE [Tank_ID]=" + TankId + "";
        //            query += "DELETE FROM  [tblSimulationMode_Tank_Status] WHERE [Tank_ID]=" + TankId + "";

        //            query += "DELETE FROM  [tblLoading_Condition] WHERE [Tank_ID]=" + TankId + "";

        //            query += "DELETE FROM  [tblTank_Status] WHERE [Tank_ID]=" + TankId + "";

        //            command.CommandText = query;
        //            command.CommandType = CommandType.Text;
        //            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        //            Models.clsGlobVar.dtSimulationVariableItems = Models.BLL.clsBLL.GetEnttyDBRecs("vsGetSimulationModeVariableDetails");
        //            dgFixedLoad.ItemsSource = Models.clsGlobVar.dtSimulationVariableItems.DefaultView;
        //        }
        //        //}
        //        //else
        //        //{
        //        //    System.Windows.MessageBox.Show("There should be atleast one row in the table");
        //        //}
        //    }
        //    catch
        //    {
        //    }
        //}


        private void SFCorrection1()
        {

            try
            {
                string cmd = "", Err = "";
                DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
                cmd = "";
                Err = "";


                string std = txtLoadingConditionName.Text;
                if (std == "LIGHTSHIP COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='LIGHTSHIP COND' ";
                }
                else if (std == "HOMO. LOAD SCANT. DEP. COND. (S.G.=0.8601)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='HOMO. LOAD SCANT. DEP. COND. (S.G.=0.8601)' ";
                }
                else if (std == "HOMO. LOAD SCANT. ARR. COND. (S.G.=0.8601)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='HOMO. LOAD SCANT. ARR. COND. (S.G.=0.8601)' ";
                }
                else if (std == "BALLAST DEP COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='BALLAST DEP COND' ";
                }
                else if (std == "BALLAST ARR. COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='BALLAST ARR. COND' ";
                }
                else if (std == "BALLAST HALF COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='BALLAST HALF COND' ";
                }
                else if (std == "HOMO. LOAD DESIGN DEP. COND. (S.G.=0.7654)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='HOMO. LOAD DESIGN DEP. COND. (S.G.=0.7654)' ";
                }
                else if (std == "HOMO. LOAD DESIGN ARR. COND. (S.G.=0.7654)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='HOMO. LOAD DESIGN ARR. COND. (S.G.=0.7654)' ";
                }
                else if (std == "GALE BALLAST DEP. COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='GALE BALLAST DEP. COND' ";
                }
                else if (std == "GALE BALLAST HALF COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='GALE BALLAST HALF COND' ";
                }
                else if (std == "GALE BALLAST ARR. COND")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='GALE BALLAST ARR. COND' ";
                }
                else if (std == "SEG.I DEP. COND. (NO.1,4,SLOP-30.1%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I DEP. COND. (NO.1,4,SLOP-30.1%)' ";
                }
                else if (std == "SEG.I HALF COND. (NO.1,4,SLOP-30.1%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I HALF COND. (NO.1,4,SLOP-30.1%)' ";
                }
                else if (std == "SEG.I ARR. COND. (NO.1,4,SLOP-30.1%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I ARR. COND. (NO.1,4,SLOP-30.1%)' ";
                }
                else if (std == "SEG.II DEP. COND. (NO.2,5-34.7%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II DEP. COND. (NO.2,5-34.7%)' ";
                }
                else if (std == "SEG.II HALF COND. (NO.2,5-34.7%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II HALF COND. (NO.2,5-34.7%)' ";
                }
                else if (std == "SEG.II ARR. COND. (NO.2,5-34.7%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II ARR. COND. (NO.2,5-34.7%)' ";
                }
                else if (std == "SEG.III DEP. COND. (NO.3,6-35.2%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.III DEP. COND. (NO.3,6-35.2%)' ";
                }
                else if (std == "SEG.III HALF COND. (NO.3,6-35.2%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.III HALF COND. (NO.3,6-35.2%)' ";
                }
                else if (std == "SEG.III ARR. COND. (NO.3,6-35.2%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.III ARR. COND. (NO.3,6-35.2%)' ";
                }
                else if (std == "SEG.I+II DEP. COND. (NO.1,2,4,5,SLOP-64.8%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+II DEP. COND. (NO.1,2,4,5,SLOP-64.8%)' ";
                }
                else if (std == "SEG.I+II HALF COND. (NO.1,2,4,5,SLOP-64.8%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+II HALF COND. (NO.1,2,4,5,SLOP-64.8%)' ";
                }
                else if (std == "SEG.I+II ARR. COND. (NO.1,2,4,5,SLOP-64.8%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+II ARR. COND. (NO.1,2,4,5,SLOP-64.8%)' ";
                }
                else if (std == "SEG.I+III DEP. COND. (NO.1,3,4,6,SLOP-65.3%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+III DEP. COND. (NO.1,3,4,6,SLOP-65.3%)' ";
                }
                else if (std == "SEG.I+III HALF COND. (NO.1,3,4,6,SLOP-65.3%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+III HALF COND. (NO.1,3,4,6,SLOP-65.3%)' ";
                }
                else if (std == "SEG.I+III ARR. COND. (NO.1,3,4,6,SLOP-65.3%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.I+III ARR. COND. (NO.1,3,4,6,SLOP-65.3%)' ";
                }
                else if (std == "SEG.II+III DEP. COND. (NO.2,3,5,6-69.9%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II+III DEP. COND. (NO.2,3,5,6-69.9%)' ";
                }
                else if (std == "SEG.II+III HALF COND. (NO.2,3,5,6-69.9%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II+III HALF COND. (NO.2,3,5,6-69.9%)' ";
                }
                else if (std == "SEG.II+III ARR. COND. (NO.2,3,5,6-69.9%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SEG.II+III ARR. COND. (NO.2,3,5,6-69.9%)' ";
                }
                else if (std == "TWO PARCEL LOAD DEP. COND. (NO.1,4,5,SLOP-48.3%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='TWO PARCEL LOAD DEP. COND. (NO.1,4,5,SLOP-48.3%)' ";
                }
                else if (std == "TWO PARCEL LOAD ARR. COND. (NO.1,4,5,SLOP-48.3%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='TWO PARCEL LOAD ARR. COND. (NO.1,4,5,SLOP-48.3%)' ";
                }
                else if (std == "TWO PARCEL LOAD DEP. COND. (NO.2,3,6-51.7%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='TWO PARCEL LOAD DEP. COND. (NO.2,3,6-51.7%)' ";
                }
                else if (std == "TWO PARCEL LOAD ARR. COND. (NO.2,3,6-51.7%)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='TWO PARCEL LOAD ARR. COND. (NO.2,3,6-51.7%)' ";
                }
                else if (std == "FULL LOAD DEP. COND. (S.G.=0.60)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD DEP. COND. (S.G.=0.60)' ";
                }
                else if (std == "FULL LOAD HALF COND. (S.G.=0.60)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD HALF COND. (S.G.=0.60)' ";
                }
                else if (std == "FULL LOAD ARR. COND. (S.G.=0.60)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD ARR. COND. (S.G.=0.60)' ";
                }
                else if (std == "FULL LOAD DEP. COND. (S.G.=0.70)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD DEP. COND. (S.G.=0.70)' ";
                }
                else if (std == "FULL LOAD HALF COND. (S.G.=0.70)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD HALF COND. (S.G.=0.70)' ";
                }
                else if (std == "FULL LOAD ARR. COND. (S.G.=0.70)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD ARR. COND. (S.G.=0.70)' ";
                }
                else if (std == "FULL LOAD DEP. COND. (S.G.=0.80)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD DEP. COND. (S.G.=0.80)' ";
                }
                else if (std == "FULL LOAD HALF COND. (S.G.=0.80)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD HALF COND. (S.G.=0.80)' ";
                }
                else if (std == "FULL LOAD ARR. COND. (S.G.=0.80)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD ARR. COND. (S.G.=0.80)' ";
                }
                else if (std == "FULL LOAD DEP. COND. (S.G.=0.95)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD DEP. COND. (S.G.=0.95)' ";
                }
                else if (std == "FULL LOAD HALF COND. (S.G.=0.95)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD HALF COND. (S.G.=0.95)' ";
                }
                else if (std == "FULL LOAD ARR. COND. (S.G.=0.95)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='FULL LOAD ARR. COND. (S.G.=0.95)' ";
                }
                else if (std == "SPECIAL LOAD ARR. COND. (S.G.=1.03)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SPECIAL LOAD ARR. COND. (S.G.=1.03)' ";
                }
                else if (std == "SPECIAL LOAD DEP. COND. (S.G.=1.03)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='SPECIAL LOAD DEP. COND. (S.G.=1.03)' ";
                }
                else if (std == "PANAMA TRANSIT COND. (D=12.04M F.W._11.73M S.W.)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='PANAMA TRANSIT COND. (D=12.04M F.W._11.73M S.W.)' ";
                }
                else if (std == "DRY DOCKING WITH 3 DAYS BUNK. COND. (NOT SEAGOING)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='DRY DOCKING WITH 3 DAYS BUNK. COND. (NOT SEAGOING)' ";
                }
                else if (std == "DRY DOCKING WITH 50% BUNK. COND. (NOT SEAGOING)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='DRY DOCKING WITH 50% BUNK. COND. (NOT SEAGOING)' ";
                }
                else if (std == "CAREENING FOR PAINTING AFLOAT COND. (NOT SEAGOING)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='CAREENING FOR PAINTING AFLOAT COND. (NOT SEAGOING)' ";
                }
                else if (std == "PROPELLER REMOVAL COND. (NOT SEAGOING)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='PROPELLER REMOVAL COND. (NOT SEAGOING)' ";
                }
                else if (std == "S.B.T. COND. (NOT SEAGOING)")
                {
                    cmd = " UPDATE tbl_SFCorreFactStdLoadCon SET ACTIVE=1 WHERE Conditions='S.B.T. COND. (NOT SEAGOING)' ";
                }
                command.CommandText = cmd;
                command.CommandType = CommandType.Text;
                Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
            }


            catch (Exception)
            {
            }

        }

       

        private void Squat_Click(object sender, RoutedEventArgs e)
        {
            SqatCalWindow objSquatCalc = new SqatCalWindow();
            objSquatCalc.ShowDialog();
        }

        private void cbDensity_Checked(object sender, RoutedEventArgs e)
        {

            txtDensity.Visibility = Visibility.Visible;
            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
       
            string Err = "";
            string query1 = "update tbl_CheckDensity set CheckDen= 1";                  
            command.CommandText = query1;
            command.CommandType = CommandType.Text;
            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        }

        private void cbDensity_Unchecked(object sender, RoutedEventArgs e)
        {
            txtDensity.Visibility = Visibility.Hidden;
            DbCommand command = Models.DAL.clsDBUtilityMethods.GetCommand();
            string Err = "";
            string query1 = "update tbl_CheckDensity set CheckDen= 0";
            command.CommandText = query1;
            command.CommandType = CommandType.Text;
            Models.DAL.clsDBUtilityMethods.ExecuteNonQuery(command, Err);
        }

        private void txtDensity_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9.]+");
            e.Handled = regex.IsMatch(e.Text);
        }

        private void UnitCon_Click(object sender, RoutedEventArgs e)
        {
            UnitConCalcWindow objUnitCalc = new UnitConCalcWindow();
            objUnitCalc.ShowDialog();
        }

       
    }

    public static class ProgressBarExtensions
    {
        private static TimeSpan duration = TimeSpan.FromSeconds(2);

        public static void SetPercent(this System.Windows.Controls.ProgressBar progressBar, double percentage)
        {
            System.Windows.Media.Animation.DoubleAnimation animation = new System.Windows.Media.Animation.DoubleAnimation(percentage, duration);
            for (int i = 0; i < 50; i++)
            {
                progressBar.BeginAnimation(System.Windows.Controls.ProgressBar.ValueProperty, animation);
            }
        }
    }
}
    

